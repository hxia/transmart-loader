--
-- Create Schema Script 
--   Database Version          : 11.2.0.1.0 
--   Database Compatible Level : 11.2.0.0.0 
--   Script Compatible Level   : 11.2.0.0.0 
--   Toad Version              : 12.1.0.22 
--   DB Connect String         : 10.118.255.5:1521/ORCL5 
--   Schema                    : I2B2DEMODATA 
--   Script Created by         : BIOMART_USER 
--   Script Created at         : 7/17/2015 3:32:11 PM 
--   Physical Location         :  
--   Notes                     :  
--

-- Object Counts: 
--   Indexes: 78        Columns: 139        
--   Object Privileges: 88 
--   Procedures: 21     Lines of Code: 1342 
--   Sequences: 19 
--   Tables: 66         Columns: 530        Constraints: 248    
--   Triggers: 2 


--
-- ARCHIVE_OBSERVATION_FACT  (Table) 
--
CREATE TABLE ARCHIVE_OBSERVATION_FACT
(
  ENCOUNTER_NUM      NUMBER(38)                 NOT NULL,
  PATIENT_NUM        NUMBER(38)                 NOT NULL,
  CONCEPT_CD         VARCHAR2(50 BYTE)          NOT NULL,
  PROVIDER_ID        VARCHAR2(50 BYTE)          NOT NULL,
  START_DATE         DATE                       NOT NULL,
  MODIFIER_CD        VARCHAR2(100 BYTE)         NOT NULL,
  INSTANCE_NUM       NUMBER(18)                 NOT NULL,
  VALTYPE_CD         VARCHAR2(50 BYTE),
  TVAL_CHAR          VARCHAR2(255 BYTE),
  NVAL_NUM           NUMBER(18,5),
  VALUEFLAG_CD       VARCHAR2(50 BYTE),
  QUANTITY_NUM       NUMBER(18,5),
  UNITS_CD           VARCHAR2(50 BYTE),
  END_DATE           DATE,
  LOCATION_CD        VARCHAR2(50 BYTE),
  OBSERVATION_BLOB   CLOB,
  CONFIDENCE_NUM     NUMBER(18,5),
  UPDATE_DATE        DATE,
  DOWNLOAD_DATE      DATE,
  IMPORT_DATE        DATE,
  SOURCESYSTEM_CD    VARCHAR2(50 BYTE),
  UPLOAD_ID          NUMBER(38),
  ARCHIVE_UPLOAD_ID  NUMBER(22)
);


--
-- ASYNC_JOB  (Table) 
--
CREATE TABLE ASYNC_JOB
(
  ID               NUMBER,
  JOB_NAME         VARCHAR2(200 BYTE),
  JOB_STATUS       VARCHAR2(200 BYTE),
  RUN_TIME         VARCHAR2(200 BYTE),
  LAST_RUN_ON      TIMESTAMP(6),
  VIEWER_URL       VARCHAR2(4000 BYTE),
  ALT_VIEWER_URL   VARCHAR2(600 BYTE),
  JOB_RESULTS      CLOB,
  JOB_TYPE         VARCHAR2(60 BYTE),
  JOB_STATUS_TIME  TIMESTAMP(6),
  JOB_INPUTS_JSON  CLOB
);


--
-- CDM_COHORT_MASTER  (Table) 
--
CREATE TABLE CDM_COHORT_MASTER
(
  COHORT_MASTER_RECORD_ID  NUMBER(19)           NOT NULL,
  COHORT_ID                NUMBER(19)           NOT NULL,
  COHORT_NAME              VARCHAR2(255 CHAR),
  ENCOUTNER_SET_ID         NUMBER(19),
  EXECUTION_PATH           VARCHAR2(255 CHAR),
  FROM_DATE                DATE,
  INVERT                   VARCHAR2(255 CHAR),
  MODIFIER_KEY             VARCHAR2(255 CHAR),
  MODIFIER_NAME            VARCHAR2(255 CHAR),
  ONTOLOGY_PATH            VARCHAR2(255 CHAR),
  PANEL_NUMBER             NUMBER(19),
  PATIENT_SET_ID           NUMBER(19),
  SOURCE_SYSTEM            VARCHAR2(255 CHAR),
  STANDARD_FACT_COLUMN     VARCHAR2(255 CHAR),
  STANDARD_FACT_TABLE      VARCHAR2(255 CHAR),
  TO_DATE                  DATE,
  USER_ID                  VARCHAR2(255 CHAR),
  VALUE_CONSTRAINT         VARCHAR2(255 CHAR),
  VALUE_OPERATOR           VARCHAR2(255 CHAR),
  VALUE_TYPE               VARCHAR2(255 CHAR),
  VERSION_NUMBER           VARCHAR2(255 CHAR),
  PRIMARY KEY
  (COHORT_MASTER_RECORD_ID)
  ENABLE VALIDATE
);


--
-- CODE_LOOKUP  (Table) 
--
CREATE TABLE CODE_LOOKUP
(
  TABLE_CD         VARCHAR2(100 BYTE)           NOT NULL,
  COLUMN_CD        VARCHAR2(100 BYTE)           NOT NULL,
  CODE_CD          VARCHAR2(50 BYTE)            NOT NULL,
  NAME_CHAR        VARCHAR2(650 BYTE),
  LOOKUP_BLOB      CLOB,
  UPLOAD_DATE      DATE,
  UPDATE_DATE      DATE,
  DOWNLOAD_DATE    DATE,
  IMPORT_DATE      DATE,
  SOURCESYSTEM_CD  VARCHAR2(50 BYTE),
  UPLOAD_ID        NUMBER(38),
  CONSTRAINT CODE_LOOKUP_PK
  PRIMARY KEY
  (TABLE_CD, COLUMN_CD, CODE_CD)
  ENABLE VALIDATE
);


--
-- CONCEPT_COUNTS  (Table) 
--
CREATE TABLE CONCEPT_COUNTS
(
  CONCEPT_PATH         VARCHAR2(500 BYTE),
  PARENT_CONCEPT_PATH  VARCHAR2(500 BYTE),
  PATIENT_COUNT        NUMBER(38)
);


--
-- CONCEPT_DIMENSION  (Table) 
--
CREATE TABLE CONCEPT_DIMENSION
(
  CONCEPT_PATH     VARCHAR2(700)           NOT NULL,
  CONCEPT_CD       VARCHAR2(50)            NOT NULL,
  NAME_CHAR        VARCHAR2(2000),
  CONCEPT_BLOB     CLOB,
  UPDATE_DATE      DATE,
  DOWNLOAD_DATE    DATE,
  IMPORT_DATE      DATE,
  SOURCESYSTEM_CD  VARCHAR2(50),
  UPLOAD_ID        NUMBER(38),
  CONSTRAINT CONCEPT_DIMENSION_PK
  PRIMARY KEY
  (CONCEPT_PATH)
  ENABLE VALIDATE
);


--
-- DATAMART_REPORT  (Table) 
--
CREATE TABLE DATAMART_REPORT
(
  TOTAL_PATIENT          NUMBER(38),
  TOTAL_OBSERVATIONFACT  NUMBER(38),
  TOTAL_EVENT            NUMBER(38),
  REPORT_DATE            DATE
);


--
-- DX  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE DX
(
  ENCOUNTER_NUM        NUMBER(38),
  INSTANCE_NUM         NUMBER(38),
  PATIENT_NUM          NUMBER(38),
  CONCEPT_CD           VARCHAR2(50),
  START_DATE           DATE,
  PROVIDER_ID          VARCHAR2(50),
  TEMPORAL_START_DATE  DATE,
  TEMPORAL_END_DATE    DATE
)
ON COMMIT PRESERVE ROWS
RESULT_CACHE (MODE DEFAULT);


--
-- ENCOUNTER_MAPPING  (Table) 
--
CREATE TABLE ENCOUNTER_MAPPING
(
  ENCOUNTER_IDE         VARCHAR2(200)      NOT NULL,
  ENCOUNTER_IDE_SOURCE  VARCHAR2(50)       NOT NULL,
  ENCOUNTER_NUM         NUMBER(38)              NOT NULL,
  PATIENT_IDE           VARCHAR2(200),
  PATIENT_IDE_SOURCE    VARCHAR2(50),
  ENCOUNTER_IDE_STATUS  VARCHAR2(50),
  UPLOAD_DATE           DATE,
  UPDATE_DATE           DATE,
  DOWNLOAD_DATE         DATE,
  IMPORT_DATE           DATE,
  SOURCESYSTEM_CD       VARCHAR2(50),
  UPLOAD_ID             NUMBER(38),
  PROJECT_ID            VARCHAR2(50)       NOT NULL,
  CONSTRAINT ENCOUNTER_MAPPING_PK
  PRIMARY KEY
  (ENCOUNTER_IDE, ENCOUNTER_IDE_SOURCE, PROJECT_ID)
  ENABLE VALIDATE
);


--
-- EVENT  (Table) 
--
CREATE TABLE EVENT
(
  ID            NUMBER(19)                      NOT NULL,
  VERSION       NUMBER(19)                      NOT NULL,
  AGG_OPERATOR  VARCHAR2(255 CHAR)              NOT NULL,
  JOIN_COLUMN   VARCHAR2(255 CHAR)              NOT NULL,
  QUERY_ID      VARCHAR2(255 CHAR)              NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- GLOBAL_TEMP_FACT_PARAM_TABLE  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE GLOBAL_TEMP_FACT_PARAM_TABLE
(
  SET_INDEX    INTEGER,
  CHAR_PARAM1  VARCHAR2(500),
  CHAR_PARAM2  VARCHAR2(500),
  NUM_PARAM1   INTEGER,
  NUM_PARAM2   INTEGER
)
ON COMMIT PRESERVE ROWS
RESULT_CACHE (MODE DEFAULT);


--
-- GLOBAL_TEMP_PARAM_TABLE  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE GLOBAL_TEMP_PARAM_TABLE
(
  SET_INDEX    INTEGER,
  CHAR_PARAM1  VARCHAR2(500),
  CHAR_PARAM2  VARCHAR2(500),
  NUM_PARAM1   INTEGER,
  NUM_PARAM2   INTEGER
)
ON COMMIT PRESERVE ROWS
RESULT_CACHE (MODE DEFAULT);


--
-- HILOSEQUENCES  (Table) 
--
CREATE TABLE HILOSEQUENCES
(
  SEQUENCENAME  VARCHAR2(50)               NOT NULL,
  HIGHVALUES    INTEGER                         NOT NULL,
  CONSTRAINT HILO_PK
  PRIMARY KEY
  (SEQUENCENAME)
  ENABLE VALIDATE
);


--
-- I2B2MAPPER_PARSE  (Table) 
--
CREATE TABLE I2B2MAPPER_PARSE
(
  ID              NUMBER(19)                    NOT NULL,
  VERSION         NUMBER(19)                    NOT NULL,
  CHRT_ID         NUMBER(10)                    NOT NULL,
  CHRT_NM         VARCHAR2(255 CHAR)            NOT NULL,
  CNCPT_CODE      VARCHAR2(255 CHAR)            NOT NULL,
  CNDTN_END_DT    TIMESTAMP(6)                  NOT NULL,
  CNDTN_STRT_DT   TIMESTAMP(6)                  NOT NULL,
  EXCTN_SQNC_NUM  NUMBER(10)                    NOT NULL,
  INVRT           NUMBER(10)                    NOT NULL,
  OCCRNC          NUMBER(10)                    NOT NULL,
  ONTLGY_PATH     VARCHAR2(255 CHAR)            NOT NULL,
  PANL_NUM        NUMBER(10)                    NOT NULL,
  TEMPRL_FLG      NUMBER(1)                     NOT NULL,
  I2B2_PARSE_ID   NUMBER(10)                    NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- I2B2PARSE_DOMAIN1111  (Table) 
--
CREATE TABLE I2B2PARSE_DOMAIN1111
(
  I2B2_PARSE_ID   INTEGER                       NOT NULL,
  CHRT_ID         NUMBER(19),
  CHRT_DESCR      VARCHAR2(255 CHAR),
  CNCPT_CODE      VARCHAR2(255 CHAR),
  CNDTN_END_DT    TIMESTAMP(6)                  NOT NULL,
  CNDTN_STRT_DT   TIMESTAMP(6)                  NOT NULL,
  EXCTN_SQNC_NUM  NUMBER(19),
  INVRT           NUMBER(19),
  OCCRNC          NUMBER(19),
  ONTLGY_PATH     VARCHAR2(255 CHAR),
  PANL_NUM        NUMBER(19),
  SRC_DT          TIMESTAMP(6)                  NOT NULL,
  SRC_SYS_NM      VARCHAR2(255 CHAR),
  TEMPRL_FLG      VARCHAR2(255 CHAR),
  USR_ID          VARCHAR2(255 CHAR),
  PRIMARY KEY
  (I2B2_PARSE_ID)
  ENABLE VALIDATE
);


--
-- I2B2PARSE_EVENT_MAPPER  (Table) 
--
CREATE TABLE I2B2PARSE_EVENT_MAPPER
(
  ID                  NUMBER(19)                NOT NULL,
  VERSION             NUMBER(19)                NOT NULL,
  CHRT_ID             NUMBER(10)                NOT NULL,
  CNDTN_END_DT        TIMESTAMP(6)              NOT NULL,
  CNDTN_STRT_DT       TIMESTAMP(6)              NOT NULL,
  EVNT_ID             VARCHAR2(255 CHAR)        NOT NULL,
  EVNT_PANL_NUM       NUMBER(10)                NOT NULL,
  EXCTN_SQNC_NUM      NUMBER(10)                NOT NULL,
  INVRT               NUMBER(10)                NOT NULL,
  ONTLGY_PATH         VARCHAR2(255 CHAR)        NOT NULL,
  I2B2_PARSE_EVNT_ID  NUMBER(10)                NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- I2B2PATIENT_SET  (Table) 
--
CREATE TABLE I2B2PATIENT_SET
(
  ID                  NUMBER(19)                NOT NULL,
  VERSION             NUMBER(19)                NOT NULL,
  PATIENT_NUM         NUMBER(19)                NOT NULL,
  QUERY_MASTER_ID     NUMBER(19)                NOT NULL,
  RESULT_INSTANCE_ID  NUMBER(19)                NOT NULL,
  SET_INDEX           NUMBER(19)                NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- I2B2REQUEST_ITEM_DETAILS  (Table) 
--
CREATE TABLE I2B2REQUEST_ITEM_DETAILS
(
  ID           NUMBER(19)                       NOT NULL,
  VERSION      NUMBER(19)                       NOT NULL,
  ONTLGY_PATH  VARCHAR2(255 CHAR)               NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- I2B2REQUEST_PANEL  (Table) 
--
CREATE TABLE I2B2REQUEST_PANEL
(
  ID             NUMBER(19)                     NOT NULL,
  VERSION        NUMBER(19)                     NOT NULL,
  EVNT_PANL_NUM  NUMBER(10)                     NOT NULL,
  INVRT          NUMBER(10)                     NOT NULL,
  OCCRNC         NUMBER(10)                     NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- ITEM  (Table) 
--
CREATE TABLE ITEM
(
  ID        NUMBER(19)                          NOT NULL,
  VERSION   NUMBER(19)                          NOT NULL,
  ITEM_KEY  VARCHAR2(255 CHAR)                  NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- JMS_ROLES  (Table) 
--
CREATE TABLE JMS_ROLES
(
  ROLEID  VARCHAR2(32)                     NOT NULL,
  USERID  VARCHAR2(32)                     NOT NULL,
  PRIMARY KEY
  (USERID, ROLEID)
  ENABLE VALIDATE
);


--
-- JMS_SUBSCRIPTIONS  (Table) 
--
CREATE TABLE JMS_SUBSCRIPTIONS
(
  CLIENTID  VARCHAR2(128)                  NOT NULL,
  SUBNAME   VARCHAR2(128)                  NOT NULL,
  TOPIC     VARCHAR2(255)                  NOT NULL,
  SELECTOR  VARCHAR2(255),
  PRIMARY KEY
  (CLIENTID, SUBNAME)
  ENABLE VALIDATE
);


--
-- JMS_USERS  (Table) 
--
CREATE TABLE JMS_USERS
(
  USERID    VARCHAR2(32)                   NOT NULL,
  PASSWD    VARCHAR2(32)                   NOT NULL,
  CLIENTID  VARCHAR2(128),
  PRIMARY KEY
  (USERID)
  ENABLE VALIDATE
);


--
-- MASTER_QUERY_GLOBAL_TEMP  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE MASTER_QUERY_GLOBAL_TEMP
(
  ENCOUNTER_NUM        NUMBER(38),
  PATIENT_NUM          NUMBER(38),
  INSTANCE_NUM         NUMBER(18),
  CONCEPT_CD           VARCHAR2(50),
  START_DATE           DATE,
  PROVIDER_ID          VARCHAR2(50),
  MASTER_ID            VARCHAR2(50),
  LEVEL_NO             NUMBER(5),
  TEMPORAL_START_DATE  DATE,
  TEMPORAL_END_DATE    DATE
)
ON COMMIT PRESERVE ROWS
RESULT_CACHE (MODE DEFAULT);


--
-- META_DATA_MAPPER  (Table) 
--
CREATE TABLE META_DATA_MAPPER
(
  ID                  NUMBER(19)                NOT NULL,
  VERSION             NUMBER(19)                NOT NULL,
  SRC_DB_HOST         VARCHAR2(255 CHAR)        NOT NULL,
  SRC_DB_LOGIN        VARCHAR2(255 CHAR)        NOT NULL,
  SRC_DB_PASSWORD     VARCHAR2(255 CHAR)        NOT NULL,
  TARGET_DB_HOST      VARCHAR2(255 CHAR)        NOT NULL,
  TARGET_DB_LOGIN     VARCHAR2(255 CHAR)        NOT NULL,
  TARGET_DB_PASSWORD  VARCHAR2(255 CHAR)        NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- MODIFIER  (Table) 
--
CREATE TABLE MODIFIER
(
  ID             NUMBER(19)                     NOT NULL,
  VERSION        NUMBER(19)                     NOT NULL,
  MODIFIER_KEY   VARCHAR2(255 CHAR)             NOT NULL,
  MODIFIER_NAME  VARCHAR2(255 CHAR)             NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- MODIFIER_DIMENSION  (Table) 
--
CREATE TABLE MODIFIER_DIMENSION
(
  MODIFIER_PATH       VARCHAR2(700)        NOT NULL,
  MODIFIER_CD         VARCHAR2(50),
  NAME_CHAR           VARCHAR2(2000),
  MODIFIER_BLOB       CLOB,
  UPDATE_DATE         DATE,
  DOWNLOAD_DATE       DATE,
  IMPORT_DATE         DATE,
  SOURCESYSTEM_CD     VARCHAR2(50),
  UPLOAD_ID           NUMBER(38),
  MODIFIER_LEVEL      NUMBER(38),
  MODIFIER_NODE_TYPE  VARCHAR2(10),
  CONSTRAINT MODIFIER_DIMENSION_PK
  PRIMARY KEY
  (MODIFIER_PATH)
  ENABLE VALIDATE
);


--
-- MODIFIER_DIMENSION_VIEW  (Table) 
--
CREATE TABLE MODIFIER_DIMENSION_VIEW
(
  MODIFIER_PATH       VARCHAR2(700),
  MODIFIER_CD         VARCHAR2(50)         NOT NULL,
  NAME_CHAR           VARCHAR2(2000),
  MODIFIER_LEVEL      NUMBER(38),
  SOURCESYSTEM_CD     VARCHAR2(50),
  MODIFIER_NODE_TYPE  VARCHAR2(10),
  VALTYPE_CD          VARCHAR2(50),
  STD_UNITS           VARCHAR2(50),
  VISIT_IND           CHAR(1)
);


--
-- MODIFIER_METADATA  (Table) 
--
CREATE TABLE MODIFIER_METADATA
(
  MODIFIER_CD  VARCHAR2(50),
  VALTYPE_CD   VARCHAR2(10),
  STD_UNITS    VARCHAR2(50),
  VISIT_IND    CHAR(1)
);


--
-- MODIFIER_VALUE  (Table) 
--
CREATE TABLE MODIFIER_VALUE
(
  ID                NUMBER(19)                  NOT NULL,
  VERSION           NUMBER(19)                  NOT NULL,
  VALUE_CONSTRAINT  VARCHAR2(255 CHAR)          NOT NULL,
  VALUE_OPERATOR    VARCHAR2(255 CHAR)          NOT NULL,
  VALUE_TYPE        VARCHAR2(255 CHAR)          NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- OBSERVATION_FACT  (Table) 
--
CREATE TABLE OBSERVATION_FACT
(
  ENCOUNTER_NUM     NUMBER(38)                  NOT NULL,
  PATIENT_NUM       NUMBER(38)                  NOT NULL,
  CONCEPT_CD        VARCHAR2(50)           NOT NULL,
  PROVIDER_ID       VARCHAR2(50)           NOT NULL,
  START_DATE        DATE,
  MODIFIER_CD       VARCHAR2(100)          NOT NULL,
  INSTANCE_NUM      NUMBER(18)                  NOT NULL,
  VALTYPE_CD        VARCHAR2(50),
  TVAL_CHAR         VARCHAR2(255),
  NVAL_NUM          NUMBER(18,5),
  VALUEFLAG_CD      VARCHAR2(50),
  QUANTITY_NUM      NUMBER(18,5),
  UNITS_CD          VARCHAR2(50),
  END_DATE          DATE,
  LOCATION_CD       VARCHAR2(50),
  OBSERVATION_BLOB  CLOB,
  CONFIDENCE_NUM    NUMBER(18,5),
  UPDATE_DATE       DATE,
  DOWNLOAD_DATE     DATE,
  IMPORT_DATE       DATE,
  SOURCESYSTEM_CD   VARCHAR2(50),
  UPLOAD_ID         NUMBER(38)
);


--
-- OBSERVATION_FACT_TEMP  (Table) 
--
CREATE TABLE OBSERVATION_FACT_TEMP
(
  ENCOUNTER_NUM     NUMBER(38)                  NOT NULL,
  PATIENT_NUM       NUMBER(38)                  NOT NULL,
  CONCEPT_CD        VARCHAR2(50)           NOT NULL,
  PROVIDER_ID       VARCHAR2(50)           NOT NULL,
  START_DATE        DATE,
  MODIFIER_CD       VARCHAR2(100)          NOT NULL,
  INSTANCE_NUM      NUMBER(18)                  NOT NULL,
  VALTYPE_CD        VARCHAR2(50),
  TVAL_CHAR         VARCHAR2(255),
  NVAL_NUM          NUMBER(18,5),
  VALUEFLAG_CD      VARCHAR2(50),
  QUANTITY_NUM      NUMBER(18,5),
  UNITS_CD          VARCHAR2(50),
  END_DATE          DATE,
  LOCATION_CD       VARCHAR2(50),
  OBSERVATION_BLOB  CLOB,
  CONFIDENCE_NUM    NUMBER(18,5),
  UPDATE_DATE       DATE,
  DOWNLOAD_DATE     DATE,
  IMPORT_DATE       DATE,
  SOURCESYSTEM_CD   VARCHAR2(50),
  UPLOAD_ID         NUMBER(38)
);


--
-- OBSERVATION_FACT_TMTEST  (Table) 
--
CREATE TABLE OBSERVATION_FACT_TMTEST
(
  ENCOUNTER_NUM     NUMBER(38)                  NOT NULL,
  PATIENT_NUM       NUMBER(38)                  NOT NULL,
  CONCEPT_CD        VARCHAR2(50)           NOT NULL,
  PROVIDER_ID       VARCHAR2(50)           NOT NULL,
  START_DATE        DATE,
  MODIFIER_CD       VARCHAR2(100)          NOT NULL,
  INSTANCE_NUM      NUMBER(18)                  NOT NULL,
  VALTYPE_CD        VARCHAR2(50),
  TVAL_CHAR         VARCHAR2(255),
  NVAL_NUM          NUMBER(18,5),
  VALUEFLAG_CD      VARCHAR2(50),
  QUANTITY_NUM      NUMBER(18,5),
  UNITS_CD          VARCHAR2(50),
  END_DATE          DATE,
  LOCATION_CD       VARCHAR2(50),
  OBSERVATION_BLOB  CLOB,
  CONFIDENCE_NUM    NUMBER(18,5),
  UPDATE_DATE       DATE,
  DOWNLOAD_DATE     DATE,
  IMPORT_DATE       DATE,
  SOURCESYSTEM_CD   VARCHAR2(50),
  UPLOAD_ID         NUMBER(38)
);


--
-- PANEL  (Table) 
--
CREATE TABLE PANEL
(
  ID                      NUMBER(19)            NOT NULL,
  VERSION                 NUMBER(19)            NOT NULL,
  INVERT                  NUMBER(10)            NOT NULL,
  PANEL_NUMBER            NUMBER(10)            NOT NULL,
  TOTAL_ITEM_OCCURRENCES  NUMBER(10)            NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PATIENT_DIMENSION  (Table) 
--
CREATE TABLE PATIENT_DIMENSION
(
  PATIENT_NUM        NUMBER(38)                 NOT NULL,
  VITAL_STATUS_CD    VARCHAR2(50),
  BIRTH_DATE         DATE,
  DEATH_DATE         DATE,
  SEX_CD             VARCHAR2(50),
  AGE_IN_YEARS_NUM   NUMBER(38),
  LANGUAGE_CD        VARCHAR2(50),
  RACE_CD            VARCHAR2(50),
  MARITAL_STATUS_CD  VARCHAR2(50),
  RELIGION_CD        VARCHAR2(50),
  ZIP_CD             VARCHAR2(10),
  STATECITYZIP_PATH  VARCHAR2(700),
  INCOME_CD          VARCHAR2(50),
  PATIENT_BLOB       CLOB,
  UPDATE_DATE        DATE,
  DOWNLOAD_DATE      DATE,
  IMPORT_DATE        DATE,
  SOURCESYSTEM_CD    VARCHAR2(50),
  UPLOAD_ID          NUMBER(38),
  CONSTRAINT PATIENT_DIMENSION_PK
  PRIMARY KEY
  (PATIENT_NUM)
  ENABLE VALIDATE
);


--
-- PATIENT_MAPPING  (Table) 
--
CREATE TABLE PATIENT_MAPPING
(
  PATIENT_IDE         VARCHAR2(200)        NOT NULL,
  PATIENT_IDE_SOURCE  VARCHAR2(50)         NOT NULL,
  PATIENT_NUM         NUMBER(38)                NOT NULL,
  PATIENT_IDE_STATUS  VARCHAR2(50),
  UPLOAD_DATE         DATE,
  UPDATE_DATE         DATE,
  DOWNLOAD_DATE       DATE,
  IMPORT_DATE         DATE,
  SOURCESYSTEM_CD     VARCHAR2(50),
  UPLOAD_ID           NUMBER(38),
  PROJECT_ID          VARCHAR2(50)         NOT NULL,
  CONSTRAINT PATIENT_MAPPING_PK
  PRIMARY KEY
  (PATIENT_IDE, PATIENT_IDE_SOURCE, PROJECT_ID)
  ENABLE VALIDATE
);


--
-- PATIENT_TRIAL  (Table) 
--
CREATE TABLE PATIENT_TRIAL
(
  PATIENT_NUM       NUMBER,
  TRIAL             VARCHAR2(30),
  SECURE_OBJ_TOKEN  VARCHAR2(50)
);


--
-- PROVIDER_DIMENSION  (Table) 
--
CREATE TABLE PROVIDER_DIMENSION
(
  PROVIDER_ID      VARCHAR2(50)            NOT NULL,
  PROVIDER_PATH    VARCHAR2(700)           NOT NULL,
  NAME_CHAR        VARCHAR2(850),
  PROVIDER_BLOB    CLOB,
  UPDATE_DATE      DATE,
  DOWNLOAD_DATE    DATE,
  IMPORT_DATE      DATE,
  SOURCESYSTEM_CD  VARCHAR2(50),
  UPLOAD_ID        NUMBER(38),
  CONSTRAINT PROVIDER_DIMENSION_PK
  PRIMARY KEY
  (PROVIDER_PATH, PROVIDER_ID)
  ENABLE VALIDATE
);


--
-- QT_ANALYSIS_PLUGIN  (Table) 
--
CREATE TABLE QT_ANALYSIS_PLUGIN
(
  PLUGIN_ID           NUMBER(10)                NOT NULL,
  PLUGIN_NAME         VARCHAR2(2000),
  DESCRIPTION         VARCHAR2(2000),
  VERSION_CD          VARCHAR2(50),
  PARAMETER_INFO      CLOB,
  PARAMETER_INFO_XSD  CLOB,
  COMMAND_LINE        CLOB,
  WORKING_FOLDER      CLOB,
  COMMANDOPTION_CD    CLOB,
  PLUGIN_ICON         CLOB,
  STATUS_CD           VARCHAR2(50),
  USER_ID             VARCHAR2(50),
  GROUP_ID            VARCHAR2(50),
  CREATE_DATE         DATE,
  UPDATE_DATE         DATE,
  CONSTRAINT ANALYSIS_PLUGIN_PK
  PRIMARY KEY
  (PLUGIN_ID)
  ENABLE VALIDATE
);


--
-- QT_ANALYSIS_PLUGIN_RESULT_TYPE  (Table) 
--
CREATE TABLE QT_ANALYSIS_PLUGIN_RESULT_TYPE
(
  PLUGIN_ID       NUMBER(10),
  RESULT_TYPE_ID  NUMBER(10),
  CONSTRAINT ANALYSIS_PLUGIN_RESULT_PK
  PRIMARY KEY
  (PLUGIN_ID, RESULT_TYPE_ID)
  ENABLE VALIDATE
);


--
-- QT_BREAKDOWN_PATH  (Table) 
--
CREATE TABLE QT_BREAKDOWN_PATH
(
  NAME         VARCHAR2(100),
  VALUE        VARCHAR2(2000),
  CREATE_DATE  DATE,
  UPDATE_DATE  DATE,
  USER_ID      VARCHAR2(50)
);


--
-- QT_PDO_QUERY_MASTER  (Table) 
--
CREATE TABLE QT_PDO_QUERY_MASTER
(
  QUERY_MASTER_ID   NUMBER(5),
  USER_ID           VARCHAR2(50)           NOT NULL,
  GROUP_ID          VARCHAR2(50)           NOT NULL,
  CREATE_DATE       DATE                        NOT NULL,
  REQUEST_XML       CLOB,
  I2B2_REQUEST_XML  CLOB,
  PRIMARY KEY
  (QUERY_MASTER_ID)
  ENABLE VALIDATE
);


--
-- QT_PRIVILEGE  (Table) 
--
CREATE TABLE QT_PRIVILEGE
(
  PROTECTION_LABEL_CD  VARCHAR2(1500),
  DATAPROT_CD          VARCHAR2(1000),
  HIVEMGMT_CD          VARCHAR2(1000),
  PLUGIN_ID            NUMBER(10)
);


--
-- QT_QUERY_MASTER  (Table) 
--
CREATE TABLE QT_QUERY_MASTER
(
  QUERY_MASTER_ID   NUMBER(5),
  NAME              VARCHAR2(250)          NOT NULL,
  USER_ID           VARCHAR2(50)           NOT NULL,
  GROUP_ID          VARCHAR2(50)           NOT NULL,
  MASTER_TYPE_CD    VARCHAR2(2000),
  PLUGIN_ID         NUMBER(10),
  CREATE_DATE       DATE                        NOT NULL,
  DELETE_DATE       DATE,
  DELETE_FLAG       VARCHAR2(3),
  GENERATED_SQL     CLOB,
  REQUEST_XML       CLOB,
  I2B2_REQUEST_XML  CLOB,
  PM_XML            CLOB,
  PRIMARY KEY
  (QUERY_MASTER_ID)
  ENABLE VALIDATE
);


--
-- QT_QUERY_RESULT_TYPE  (Table) 
--
CREATE TABLE QT_QUERY_RESULT_TYPE
(
  RESULT_TYPE_ID            NUMBER(3),
  NAME                      VARCHAR2(100),
  DESCRIPTION               VARCHAR2(200),
  DISPLAY_TYPE_ID           VARCHAR2(500),
  VISUAL_ATTRIBUTE_TYPE_ID  VARCHAR2(3),
  PRIMARY KEY
  (RESULT_TYPE_ID)
  ENABLE VALIDATE
);


--
-- QT_QUERY_STATUS_TYPE  (Table) 
--
CREATE TABLE QT_QUERY_STATUS_TYPE
(
  STATUS_TYPE_ID  NUMBER(3),
  NAME            VARCHAR2(100),
  DESCRIPTION     VARCHAR2(200),
  PRIMARY KEY
  (STATUS_TYPE_ID)
  ENABLE VALIDATE
);


--
-- QUERY_GLOBAL_TEMP  (Table) 
--
CREATE GLOBAL TEMPORARY TABLE QUERY_GLOBAL_TEMP
(
  ENCOUNTER_NUM  NUMBER(22),
  PATIENT_NUM    NUMBER(22),
  INSTANCE_NUM   NUMBER(18),
  CONCEPT_CD     VARCHAR2(50),
  START_DATE     DATE,
  PROVIDER_ID    VARCHAR2(50),
  PANEL_COUNT    NUMBER(5),
  FACT_COUNT     NUMBER(22),
  FACT_PANELS    NUMBER(5)
)
ON COMMIT PRESERVE ROWS
RESULT_CACHE (MODE DEFAULT);


--
-- RESPONSE  (Table) 
--
CREATE TABLE RESPONSE
(
  ID         NUMBER(19)                         NOT NULL,
  VERSION    NUMBER(19)                         NOT NULL,
  COHORT_ID  VARCHAR2(255 CHAR)                 NOT NULL,
  STATUS     VARCHAR2(255 CHAR)                 NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- SET_TYPE  (Table) 
--
CREATE TABLE SET_TYPE
(
  ID           INTEGER,
  NAME         VARCHAR2(500),
  CREATE_DATE  DATE,
  CONSTRAINT PK_ST_ID
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- SET_UPLOAD_STATUS  (Table) 
--
CREATE TABLE SET_UPLOAD_STATUS
(
  UPLOAD_ID        NUMBER,
  SET_TYPE_ID      INTEGER,
  SOURCE_CD        VARCHAR2(50)            NOT NULL,
  NO_OF_RECORD     NUMBER,
  LOADED_RECORD    NUMBER,
  DELETED_RECORD   NUMBER,
  LOAD_DATE        DATE                         NOT NULL,
  END_DATE         DATE,
  LOAD_STATUS      VARCHAR2(100),
  MESSAGE          CLOB,
  INPUT_FILE_NAME  CLOB,
  LOG_FILE_NAME    CLOB,
  TRANSFORM_NAME   VARCHAR2(500),
  CONSTRAINT PK_UP_UPSTATUS_IDSETTYPEID
  PRIMARY KEY
  (UPLOAD_ID, SET_TYPE_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_UP_SET_TYPE_ID 
  FOREIGN KEY (SET_TYPE_ID) 
  REFERENCES SET_TYPE (ID)
  ENABLE VALIDATE
);


--
-- SOURCE_MASTER  (Table) 
--
CREATE TABLE SOURCE_MASTER
(
  SOURCE_CD    VARCHAR2(50)                NOT NULL,
  DESCRIPTION  VARCHAR2(300),
  CREATE_DATE  DATE,
  CONSTRAINT PK_SOURCEMASTER_SOURCECD
  PRIMARY KEY
  (SOURCE_CD)
  ENABLE VALIDATE
);


--
-- SPAN  (Table) 
--
CREATE TABLE SPAN
(
  ID             NUMBER(19)                     NOT NULL,
  VERSION        NUMBER(19)                     NOT NULL,
  SPAN_OPERATOR  VARCHAR2(255 CHAR)             NOT NULL,
  SPAN_VALUE     VARCHAR2(255 CHAR)             NOT NULL,
  UNITS          VARCHAR2(255 CHAR)             NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- SUB_QUERY  (Table) 
--
CREATE TABLE SUB_QUERY
(
  ID        NUMBER(19)                          NOT NULL,
  VERSION   NUMBER(19)                          NOT NULL,
  QUERY_ID  VARCHAR2(255 CHAR)                  NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- SUB_QUERY_CONSTRAINT  (Table) 
--
CREATE TABLE SUB_QUERY_CONSTRAINT
(
  ID        NUMBER(19)                          NOT NULL,
  VERSION   NUMBER(19)                          NOT NULL,
  OPERATOR  VARCHAR2(255 CHAR)                  NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- TARGET_TBL_MAPPER  (Table) 
--
CREATE TABLE TARGET_TBL_MAPPER
(
  ID              NUMBER(19)                    NOT NULL,
  VERSION         NUMBER(19)                    NOT NULL,
  TGT_TABLE_NAME  VARCHAR2(255 CHAR)            NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- UNIT_MAPPER  (Table) 
--
CREATE TABLE UNIT_MAPPER
(
  ID              NUMBER(19)                    NOT NULL,
  VERSION         NUMBER(19)                    NOT NULL,
  CONV_FUNC       VARCHAR2(255 CHAR)            NOT NULL,
  SRC_COLUMN      VARCHAR2(255 CHAR)            NOT NULL,
  TGT_COLUMN      VARCHAR2(255 CHAR)            NOT NULL,
  TGT_DERV_LOGIC  VARCHAR2(255 CHAR)            NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- UPLOAD_STATUS  (Table) 
--
CREATE TABLE UPLOAD_STATUS
(
  UPLOAD_ID        NUMBER(38),
  UPLOAD_LABEL     VARCHAR2(500)           NOT NULL,
  USER_ID          VARCHAR2(100)           NOT NULL,
  SOURCE_CD        VARCHAR2(50)            NOT NULL,
  NO_OF_RECORD     NUMBER,
  LOADED_RECORD    NUMBER,
  DELETED_RECORD   NUMBER,
  LOAD_DATE        DATE                         NOT NULL,
  END_DATE         DATE,
  LOAD_STATUS      VARCHAR2(100),
  MESSAGE          CLOB,
  INPUT_FILE_NAME  CLOB,
  LOG_FILE_NAME    CLOB,
  TRANSFORM_NAME   VARCHAR2(500),
  CONSTRAINT PK_UP_UPSTATUS_UPLOADID
  PRIMARY KEY
  (UPLOAD_ID)
  ENABLE VALIDATE
);


--
-- VISIT_DIMENSION  (Table) 
--
CREATE TABLE VISIT_DIMENSION
(
  ENCOUNTER_NUM     NUMBER(38)                  NOT NULL,
  PATIENT_NUM       NUMBER(38)                  NOT NULL,
  ACTIVE_STATUS_CD  VARCHAR2(50),
  START_DATE        DATE,
  END_DATE          DATE,
  INOUT_CD          VARCHAR2(50),
  LOCATION_CD       VARCHAR2(50),
  LOCATION_PATH     VARCHAR2(900),
  LENGTH_OF_STAY    NUMBER(38),
  VISIT_BLOB        CLOB,
  UPDATE_DATE       DATE,
  DOWNLOAD_DATE     DATE,
  IMPORT_DATE       DATE,
  SOURCESYSTEM_CD   VARCHAR2(50),
  UPLOAD_ID         NUMBER(38),
  CONSTRAINT VISIT_DIMENSION_PK
  PRIMARY KEY
  (ENCOUNTER_NUM, PATIENT_NUM)
  ENABLE VALIDATE
);


--
-- CONCEPT_ID  (Sequence) 
--
CREATE SEQUENCE CONCEPT_ID;


--
-- ENCOUNTER_NUM  (Sequence) 
--
CREATE SEQUENCE ENCOUNTER_NUM;


--
-- HIBERNATE_SEQUENCE  (Sequence) 
--
CREATE SEQUENCE HIBERNATE_SEQUENCE;


--
-- PROTOCOL_ID_SEQ  (Sequence) 
--
CREATE SEQUENCE PROTOCOL_ID_SEQ;


--
-- QT_SQ_PQM_QMID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_PQM_QMID;


--
-- QT_SQ_QI_QIID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QI_QIID;


--
-- QT_SQ_QM_QMID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QM_QMID;


--
-- QT_SQ_QPER_PECID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QPER_PECID;


--
-- QT_SQ_QPR_PCID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QPR_PCID;


--
-- QT_SQ_QRI_QRIID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QRI_QRIID;


--
-- QT_SQ_QR_QRID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QR_QRID;


--
-- QT_SQ_QS_QSID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QS_QSID;


--
-- QT_SQ_QXR_XRID  (Sequence) 
--
CREATE SEQUENCE QT_SQ_QXR_XRID;


--
-- SEQ_ENCOUNTER_NUM  (Sequence) 
--
CREATE SEQUENCE SEQ_ENCOUNTER_NUM;


--
-- SEQ_PATIENT_NUM  (Sequence) 
--
CREATE SEQUENCE SEQ_PATIENT_NUM;


--
-- SEQ_SUBJECT_REFERENCE  (Sequence) 
--
CREATE SEQUENCE SEQ_SUBJECT_REFERENCE;


--
-- SQ_UPLOADSTATUS_UPLOADID  (Sequence) 
--
CREATE SEQUENCE SQ_UPLOADSTATUS_UPLOADID;


--
-- SQ_UP_ENCDIM_ENCOUNTERNUM  (Sequence) 
--
CREATE SEQUENCE SQ_UP_ENCDIM_ENCOUNTERNUM;


--
-- SQ_UP_PATDIM_PATIENTNUM  (Sequence) 
--
CREATE SEQUENCE SQ_UP_PATDIM_PATIENTNUM;


--
-- CD_UPLOADID_IDX  (Index) 
--
CREATE INDEX CD_UPLOADID_IDX ON CONCEPT_DIMENSION (UPLOAD_ID);


--
-- CL_IDX_NAME_CHAR  (Index) 
--
CREATE INDEX CL_IDX_NAME_CHAR ON CODE_LOOKUP (NAME_CHAR);


--
-- CL_IDX_UPLOADID  (Index) 
--
CREATE INDEX CL_IDX_UPLOADID ON CODE_LOOKUP (UPLOAD_ID);


--
-- CONCEPT_DIMENSION_FK1  (Index) 
--
CREATE INDEX CONCEPT_DIMENSION_FK1 ON CONCEPT_DIMENSION (CONCEPT_CD);


--
-- EM_ENCNUM_IDX  (Index) 
--
CREATE INDEX EM_ENCNUM_IDX ON ENCOUNTER_MAPPING (ENCOUNTER_NUM);


--
-- EM_IDX_ENCPATH  (Index) 
--
CREATE INDEX EM_IDX_ENCPATH ON ENCOUNTER_MAPPING
(ENCOUNTER_IDE, ENCOUNTER_IDE_SOURCE, PATIENT_IDE, PATIENT_IDE_SOURCE, ENCOUNTER_NUM);


--
-- EM_UPLOADID_IDX  (Index) 
--
CREATE INDEX EM_UPLOADID_IDX ON ENCOUNTER_MAPPING (UPLOAD_ID);


--
-- MD_IDX_UPLOADID  (Index) 
--
CREATE INDEX MD_IDX_UPLOADID ON MODIFIER_DIMENSION (UPLOAD_ID);


--
-- OBS_FACT_MODIFIER  (Index) 
--
CREATE INDEX OBS_FACT_MODIFIER ON OBSERVATION_FACT (MODIFIER_CD);


--
-- OB_FACT_PK  (Index) 
--
CREATE UNIQUE INDEX OB_FACT_PK ON OBSERVATION_FACT
(ENCOUNTER_NUM, PATIENT_NUM, CONCEPT_CD, PROVIDER_ID, START_DATE, 
MODIFIER_CD, INSTANCE_NUM);


--
-- PATD_UPLOADID_IDX  (Index) 
--
CREATE INDEX PATD_UPLOADID_IDX ON PATIENT_DIMENSION (UPLOAD_ID);


--
-- PATIENT_DIMENSION_PK  (Index) 
--
CREATE UNIQUE INDEX PATIENT_DIMENSION_PK ON PATIENT_DIMENSION (PATIENT_NUM);


--
-- PD_IDX_ALLPATIENTDIM  (Index) 
--
CREATE INDEX PD_IDX_ALLPATIENTDIM ON PATIENT_DIMENSION
(PATIENT_NUM, VITAL_STATUS_CD, BIRTH_DATE, DEATH_DATE, SEX_CD, 
AGE_IN_YEARS_NUM, LANGUAGE_CD, RACE_CD, MARITAL_STATUS_CD, RELIGION_CD, 
ZIP_CD, INCOME_CD);


--
-- PD_IDX_DATES  (Index) 
--
CREATE INDEX PD_IDX_DATES ON PATIENT_DIMENSION
(PATIENT_NUM, VITAL_STATUS_CD, BIRTH_DATE, DEATH_DATE);


--
-- PD_IDX_NAME_CHAR  (Index) 
--
CREATE INDEX PD_IDX_NAME_CHAR ON PROVIDER_DIMENSION
(PROVIDER_ID, NAME_CHAR);


--
-- PD_IDX_STATECITYZIP  (Index) 
--
CREATE INDEX PD_IDX_STATECITYZIP ON PATIENT_DIMENSION
(STATECITYZIP_PATH, PATIENT_NUM);


--
-- PK_ARCHIVE_OBSFACT  (Index) 
--
CREATE INDEX PK_ARCHIVE_OBSFACT ON ARCHIVE_OBSERVATION_FACT
(ENCOUNTER_NUM, PATIENT_NUM, CONCEPT_CD, PROVIDER_ID, START_DATE, 
MODIFIER_CD, ARCHIVE_UPLOAD_ID);


--
-- PM_ENCPNUM_IDX  (Index) 
--
CREATE INDEX PM_ENCPNUM_IDX ON PATIENT_MAPPING
(PATIENT_IDE, PATIENT_IDE_SOURCE, PATIENT_NUM);


--
-- PM_PATNUM_IDX  (Index) 
--
CREATE INDEX PM_PATNUM_IDX ON PATIENT_MAPPING
(PATIENT_NUM);


--
-- PM_UPLOADID_IDX  (Index) 
--
CREATE INDEX PM_UPLOADID_IDX ON PATIENT_MAPPING
(UPLOAD_ID);


--
-- PROD_UPLOADID_IDX  (Index) 
--
CREATE INDEX PROD_UPLOADID_IDX ON PROVIDER_DIMENSION
(UPLOAD_ID);


--
-- QT_APNAMEVERGRP_IDX  (Index) 
--
CREATE INDEX QT_APNAMEVERGRP_IDX ON QT_ANALYSIS_PLUGIN
(PLUGIN_NAME, VERSION_CD, GROUP_ID);


--
-- QT_IDX_PQM_UGID  (Index) 
--
CREATE INDEX QT_IDX_PQM_UGID ON QT_PDO_QUERY_MASTER
(USER_ID, GROUP_ID);


--
-- QT_IDX_QM_UGID  (Index) 
--
CREATE INDEX QT_IDX_QM_UGID ON QT_QUERY_MASTER
(USER_ID, GROUP_ID, MASTER_TYPE_CD);


--
-- VD_UPLOADID_IDX  (Index) 
--
CREATE INDEX VD_UPLOADID_IDX ON VISIT_DIMENSION
(UPLOAD_ID);


--
-- VISITDIM_EN_PN_LP_IO_SD_IDX  (Index) 
--
CREATE INDEX VISITDIM_EN_PN_LP_IO_SD_IDX ON VISIT_DIMENSION
(ENCOUNTER_NUM, PATIENT_NUM, LOCATION_PATH, INOUT_CD, START_DATE, 
END_DATE, LENGTH_OF_STAY);


--
-- VISITDIM_STD_EDD_IDX  (Index) 
--
CREATE INDEX VISITDIM_STD_EDD_IDX ON VISIT_DIMENSION
(START_DATE, END_DATE);


--
-- CREATE_TEMP_CONCEPT_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_CONCEPT_TABLE(tempConceptTableName IN VARCHAR,
  errorMsg OUT VARCHAR)
IS

BEGIN
execute immediate 'create table ' ||  tempConceptTableName || ' (
        CONCEPT_CD VARCHAR2(50) NOT NULL,
	CONCEPT_PATH VARCHAR2(900) NOT NULL ,
	NAME_CHAR VARCHAR2(2000),
	CONCEPT_BLOB CLOB,
	UPDATE_DATE date,
	DOWNLOAD_DATE DATE,
	IMPORT_DATE DATE,
	SOURCESYSTEM_CD VARCHAR2(50)
	 )';

 execute immediate 'CREATE INDEX idx_' || tempConceptTableName || '_pat_id ON ' || tempConceptTableName || '  (CONCEPT_PATH)';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/


--
-- CREATE_TEMP_EID_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_EID_TABLE(tempPatientMappingTableName IN VARCHAR ,errorMsg OUT VARCHAR)
IS

BEGIN
execute immediate 'create table ' ||  tempPatientMappingTableName || ' (
	ENCOUNTER_MAP_ID       	VARCHAR2(200) NOT NULL,
    ENCOUNTER_MAP_ID_SOURCE	VARCHAR2(50) NOT NULL,
    PATIENT_MAP_ID          VARCHAR2(200),
	PATIENT_MAP_ID_SOURCE   VARCHAR2(50),
    ENCOUNTER_ID       	    VARCHAR2(200) NOT NULL,
    ENCOUNTER_ID_SOURCE     VARCHAR2(50) ,
    ENCOUNTER_NUM           NUMBER,
    ENCOUNTER_MAP_ID_STATUS    VARCHAR2(50),
    PROCESS_STATUS_FLAG     CHAR(1),
	UPDATE_DATE DATE,
	DOWNLOAD_DATE DATE,
	IMPORT_DATE DATE,
	SOURCESYSTEM_CD VARCHAR2(50)
)';

execute immediate 'CREATE INDEX idx_' || tempPatientMappingTableName || '_eid_id ON ' || tempPatientMappingTableName || '  (ENCOUNTER_ID, ENCOUNTER_ID_SOURCE, ENCOUNTER_MAP_ID, ENCOUNTER_MAP_ID_SOURCE, ENCOUNTER_NUM)';

 execute immediate 'CREATE INDEX idx_' || tempPatientMappingTableName || '_stateid_eid_id ON ' || tempPatientMappingTableName || '  (PROCESS_STATUS_FLAG)';
EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/


--
-- CREATE_TEMP_MODIFIER_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_MODIFIER_TABLE(tempModifierTableName IN VARCHAR,
  errorMsg OUT VARCHAR)
IS

BEGIN
execute immediate 'create table ' ||  tempModifierTableName || ' (
        MODIFIER_CD VARCHAR2(50) NOT NULL,
	MODIFIER_PATH VARCHAR2(900) NOT NULL ,
	NAME_CHAR VARCHAR2(2000),
	MODIFIER_BLOB CLOB,
	UPDATE_DATE date,
	DOWNLOAD_DATE DATE,
	IMPORT_DATE DATE,
	SOURCESYSTEM_CD VARCHAR2(50)
	 )';

 execute immediate 'CREATE INDEX idx_' || tempModifierTableName || '_pat_id ON ' || tempModifierTableName || '  (MODIFIER_PATH)';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/


--
-- CREATE_TEMP_PATIENT_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_PATIENT_TABLE(tempPatientDimensionTableName IN VARCHAR,
    errorMsg OUT VARCHAR )
IS

BEGIN
	-- Create temp table to store encounter/visit information
	execute immediate 'create table ' ||  tempPatientDimensionTableName || ' (
		PATIENT_ID VARCHAR2(200),
		PATIENT_ID_SOURCE VARCHAR2(50),
		PATIENT_NUM NUMBER(38,0),
	    VITAL_STATUS_CD VARCHAR2(50),
	    BIRTH_DATE DATE,
	    DEATH_DATE DATE,
	    SEX_CD CHAR(50),
	    AGE_IN_YEARS_NUM NUMBER(5,0),
	    LANGUAGE_CD VARCHAR2(50),
		RACE_CD VARCHAR2(50 ),
		MARITAL_STATUS_CD VARCHAR2(50),
		RELIGION_CD VARCHAR2(50),
		ZIP_CD VARCHAR2(50),
		STATECITYZIP_PATH VARCHAR2(700),
		PATIENT_BLOB CLOB,
		UPDATE_DATE DATE,
		DOWNLOAD_DATE DATE,
		IMPORT_DATE DATE,
		SOURCESYSTEM_CD VARCHAR2(50)
	)';

execute immediate 'CREATE INDEX idx_' || tempPatientDimensionTableName || '_pat_id ON ' || tempPatientDimensionTableName || '  (PATIENT_ID, PATIENT_ID_SOURCE,PATIENT_NUM)';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/


--
-- CREATE_TEMP_PID_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_PID_TABLE(tempPatientMappingTableName IN VARCHAR,
    errorMsg OUT VARCHAR )
IS

BEGIN
execute immediate 'create table ' ||  tempPatientMappingTableName || ' (
	   	PATIENT_MAP_ID VARCHAR2(200),
		PATIENT_MAP_ID_SOURCE VARCHAR2(50),
		PATIENT_ID_STATUS VARCHAR2(50),
		PATIENT_ID  VARCHAR2(200),
	    PATIENT_ID_SOURCE varchar(50),
		PATIENT_NUM NUMBER(38,0),
	    PATIENT_MAP_ID_STATUS VARCHAR2(50),
		PROCESS_STATUS_FLAG CHAR(1),
		UPDATE_DATE DATE,
		DOWNLOAD_DATE DATE,
		IMPORT_DATE DATE,
		SOURCESYSTEM_CD VARCHAR2(50)

	 )';

execute immediate 'CREATE INDEX idx_' || tempPatientMappingTableName || '_pid_id ON ' || tempPatientMappingTableName || '  ( PATIENT_ID, PATIENT_ID_SOURCE )';

execute immediate 'CREATE INDEX idx_' || tempPatientMappingTableName || 'map_pid_id ON ' || tempPatientMappingTableName || '
( PATIENT_ID, PATIENT_ID_SOURCE,PATIENT_MAP_ID, PATIENT_MAP_ID_SOURCE,  PATIENT_NUM )';

execute immediate 'CREATE INDEX idx_' || tempPatientMappingTableName || 'stat_pid_id ON ' || tempPatientMappingTableName || '
(PROCESS_STATUS_FLAG)';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/


--
-- CREATE_TEMP_PROVIDER_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_PROVIDER_TABLE(tempProviderTableName IN VARCHAR,
   errorMsg OUT VARCHAR)
IS

BEGIN

execute immediate 'create table ' ||  tempProviderTableName || ' (
    PROVIDER_ID VARCHAR2(50) NOT NULL,
	PROVIDER_PATH VARCHAR2(700) NOT NULL,
	NAME_CHAR VARCHAR2(2000),
	PROVIDER_BLOB CLOB,
	UPDATE_DATE DATE,
	DOWNLOAD_DATE DATE,
	IMPORT_DATE DATE,
	SOURCESYSTEM_CD VARCHAR2(50),
	UPLOAD_ID NUMBER(*,0)
	 )';
 execute immediate 'CREATE INDEX idx_' || tempProviderTableName || '_ppath_id ON ' || tempProviderTableName || '  (PROVIDER_PATH)';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/


--
-- CREATE_TEMP_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_TABLE(tempTableName IN VARCHAR, errorMsg OUT VARCHAR)
IS

BEGIN
	execute immediate 'create table ' ||  tempTableName || '  (
		encounter_num  NUMBER(38,0),
		encounter_id varchar(200) not null,
        encounter_id_source varchar(50) not null,
		concept_cd 	 VARCHAR(50) not null,
                patient_num number(38,0),
		patient_id  varchar(200) not null,
        patient_id_source  varchar(50) not null,
		provider_id   VARCHAR(50),
 		start_date   DATE,
		modifier_cd VARCHAR2(100),
	    instance_num number(18,0),
 		valtype_cd varchar2(50),
		tval_char varchar(255),
 		nval_num NUMBER(18,5),
		valueflag_cd CHAR(50),
 		quantity_num NUMBER(18,5),
		confidence_num NUMBER(18,0),
 		observation_blob CLOB,
		units_cd VARCHAR2(50),
 		end_date    DATE,
		location_cd VARCHAR2(50),
 		update_date  DATE,
		download_date DATE,
 		import_date DATE,
		sourcesystem_cd VARCHAR2(50) ,
 		upload_id INTEGER
	) NOLOGGING';

    execute immediate 'CREATE INDEX idx_' || tempTableName || '_pk ON ' || tempTableName || '  ( encounter_num,patient_num,concept_cd,provider_id,start_date,modifier_cd,instance_num)';
    execute immediate 'CREATE INDEX idx_' || tempTableName || '_enc_pat_id ON ' || tempTableName || '  (encounter_id,encounter_id_source, patient_id,patient_id_source )';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;  
/


--
-- CREATE_TEMP_VISIT_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE CREATE_TEMP_VISIT_TABLE(tempTableName IN VARCHAR, errorMsg OUT VARCHAR )
IS

BEGIN
	-- Create temp table to store encounter/visit information
	execute immediate 'create table ' ||  tempTableName || ' (
		encounter_id 			VARCHAR(200) not null,
		encounter_id_source 	VARCHAR(50) not null,
		patient_id  			VARCHAR(200) not null,
		patient_id_source 		VARCHAR2(50) not null,
		encounter_num	 		    NUMBER(38,0),
		inout_cd   			VARCHAR(50),
		location_cd 			VARCHAR2(50),
		location_path 			VARCHAR2(900),
 		start_date   			DATE,
 		end_date    			DATE,
 		visit_blob 				CLOB,
 		update_date  			DATE,
		download_date 			DATE,
 		import_date 			DATE,
		sourcesystem_cd 		VARCHAR2(50)
	)';

    execute immediate 'CREATE INDEX idx_' || tempTableName || '_enc_id ON ' || tempTableName || '  ( encounter_id,encounter_id_source,patient_id,patient_id_source )';
    execute immediate 'CREATE INDEX idx_' || tempTableName || '_patient_id ON ' || tempTableName || '  ( patient_id,patient_id_source )';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/

--
-- INSERT_CONCEPT_FROMTEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE  "INSERT_CONCEPT_FROMTEMP" (tempConceptTableName IN VARCHAR, upload_id IN NUMBER, errorMsg OUT VARCHAR )
IS

BEGIN
	--Delete duplicate rows with same encounter and patient combination
	execute immediate 'DELETE FROM ' || tempConceptTableName || ' t1 WHERE rowid >
					   (SELECT  min(rowid) FROM ' || tempConceptTableName || ' t2
					     WHERE t1.concept_cd = t2.concept_cd
                                            AND t1.concept_path = t2.concept_path
                                            )';

	   execute immediate ' UPDATE concept_dimension  set  (concept_cd,
                        name_char,concept_blob,
                        update_date,download_date,
                        import_date,sourcesystem_cd,
			     	UPLOAD_ID) = (select temp.concept_cd, temp.name_char,temp.concept_blob,temp.update_date,temp.DOWNLOAD_DATE,sysdate,temp.SOURCESYSTEM_CD,
			     	' || UPLOAD_ID  || ' from ' || tempConceptTableName || '  temp   where
					temp.concept_path = concept_dimension.concept_path and temp.update_date >= concept_dimension.update_date)
					where exists (select 1 from ' || tempConceptTableName || ' temp  where temp.concept_path = concept_dimension.concept_path
					and temp.update_date >= concept_dimension.update_date) ';




    --Create new patient(patient_mapping) if temp table patient_ide does not exists
	-- in patient_mapping table.
	execute immediate 'insert into concept_dimension  (concept_cd,concept_path,name_char,concept_blob,update_date,download_date,import_date,sourcesystem_cd,upload_id)
			    select  concept_cd, concept_path,
                        name_char,concept_blob,
                        update_date,download_date,
                        sysdate,sourcesystem_cd,
                         ' || upload_id || '  from ' || tempConceptTableName || '  temp
					where not exists (select concept_cd from concept_dimension cd where cd.concept_path = temp.concept_path)

	';

EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- INSERT_EID_MAP_FROMTEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INSERT_EID_MAP_FROMTEMP (tempEidTableName IN VARCHAR,  upload_id IN NUMBER,
   errorMsg OUT VARCHAR )
is
 existingEncounterNum varchar2(32);
 maxEncounterNum number;

 TYPE distinctEIdCurTyp IS REF CURSOR;
distinctEidCur   distinctEIdCurTyp;
 sql_stmt  varchar2(400);

disEncounterId varchar2(100);
disEncounterIdSource varchar2(100);

BEGIN
 sql_stmt := ' SELECT distinct encounter_id,encounter_id_source from ' || tempEidTableName ||' ';

  execute immediate ' delete  from ' || tempEidTableName ||  ' t1  where
rowid > (select min(rowid) from ' || tempEidTableName || ' t2
where t1.encounter_map_id = t2.encounter_map_id
and t1.encounter_map_id_source = t2.encounter_map_id_source
and t1.encounter_id = t2.encounter_id
and t1.encounter_id_source = t2.encounter_id_source) ';

 LOCK TABLE  encounter_mapping IN EXCLUSIVE MODE NOWAIT;
 select max(encounter_num) into maxEncounterNum from encounter_mapping ;

if maxEncounterNum is null then
  maxEncounterNum := 0;
end if;

  open distinctEidCur for sql_stmt ;

   loop
     FETCH distinctEidCur INTO disEncounterId, disEncounterIdSource;
      EXIT WHEN distinctEidCur%NOTFOUND;
       -- dbms_output.put_line(disEncounterId);

  if  disEncounterIdSource = 'HIVE'  THEN
   begin
    --check if hive number exist, if so assign that number to reset of map_id's within that pid
    select encounter_num into existingEncounterNum from encounter_mapping where encounter_num = disEncounterId and encounter_ide_source = 'HIVE';
    EXCEPTION
       when NO_DATA_FOUND THEN
           existingEncounterNum := null;
    end;
   if existingEncounterNum is not null then
        execute immediate ' update ' || tempEidTableName ||' set encounter_num = encounter_id, process_status_flag = ''P''
        where encounter_id = :x and not exists (select 1 from encounter_mapping em where em.encounter_ide = encounter_map_id
        and em.encounter_ide_source = encounter_map_id_source)' using disEncounterId;

   else
        -- generate new patient_num i.e. take max(_num) + 1
        if maxEncounterNum < disEncounterId then
            maxEncounterNum := disEncounterId;
        end if ;
        execute immediate ' update ' || tempEidTableName ||' set encounter_num = encounter_id, process_status_flag = ''P'' where
        encounter_id =  :x and encounter_id_source = ''HIVE'' and not exists (select 1 from encounter_mapping em where em.encounter_ide = encounter_map_id
        and em.encounter_ide_source = encounter_map_id_source)' using disEncounterId;

   end if;

   -- test if record fectched
   -- dbms_output.put_line(' HIVE ');

 else
    begin
       select encounter_num into existingEncounterNum from encounter_mapping where encounter_ide = disEncounterId and
        encounter_ide_source = disEncounterIdSource ;

       -- test if record fetched.
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
           existingEncounterNum := null;
       end;
       if existingEncounterNum is not  null then
            execute immediate ' update ' || tempEidTableName ||' set encounter_num = :x , process_status_flag = ''P''
            where encounter_id = :y and not exists (select 1 from encounter_mapping em where em.encounter_ide = encounter_map_id
        and em.encounter_ide_source = encounter_map_id_source)' using existingEncounterNum, disEncounterId;
       else

            maxEncounterNum := maxEncounterNum + 1 ;
			--TODO : add update colunn
             execute immediate ' insert into ' || tempEidTableName ||' (encounter_map_id,encounter_map_id_source,encounter_id,encounter_id_source,encounter_num,process_status_flag
             ,encounter_map_id_status,update_date,download_date,import_date,sourcesystem_cd)
             values(:x,''HIVE'',:y,''HIVE'',:z,''P'',''A'',sysdate,sysdate,sysdate,''edu.harvard.i2b2.crc'')' using maxEncounterNum,maxEncounterNum,maxEncounterNum;
            execute immediate ' update ' || tempEidTableName ||' set encounter_num =  :x , process_status_flag = ''P''
            where encounter_id = :y and  not exists (select 1 from
            encounter_mapping em where em.encounter_ide = encounter_map_id
            and em.encounter_ide_source = encounter_map_id_source)' using maxEncounterNum, disEncounterId;

       end if ;

      -- dbms_output.put_line(' NOT HIVE ');
 end if;

END LOOP;
close distinctEidCur ;
commit;
 -- do the mapping update if the update date is old
   execute immediate ' merge into encounter_mapping
      using ' || tempEidTableName ||' temp
      on (temp.encounter_map_id = encounter_mapping.ENCOUNTER_IDE
  		  and temp.encounter_map_id_source = encounter_mapping.ENCOUNTER_IDE_SOURCE
	   ) when matched then
  		update set ENCOUNTER_NUM = temp.encounter_id,
    	patient_ide   =   temp.patient_map_id ,
    	patient_ide_source  =	temp.patient_map_id_source ,
    	encounter_ide_status	= temp.encounter_map_id_status  ,
    	update_date = temp.update_date,
    	download_date  = temp.download_date ,
		import_date = sysdate ,
    	sourcesystem_cd  = temp.sourcesystem_cd ,
		upload_id = ' || upload_id ||'
    	where  temp.encounter_id_source = ''HIVE'' and temp.process_status_flag is null  and
        nvl(encounter_mapping.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY''))<= nvl(temp.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY'')) ' ;

-- insert new mapping records i.e flagged P
execute immediate ' insert into encounter_mapping (encounter_ide,encounter_ide_source,encounter_ide_status,encounter_num,patient_ide,patient_ide_source,update_date,download_date,import_date,sourcesystem_cd,upload_id)
    select encounter_map_id,encounter_map_id_source,encounter_map_id_status,encounter_num,patient_map_id,patient_map_id_source,update_date,download_date,sysdate,sourcesystem_cd,' || upload_id || ' from ' || tempEidTableName || '
    where process_status_flag = ''P'' ' ;
commit;
EXCEPTION
   WHEN OTHERS THEN
      if distinctEidCur%isopen then
          close distinctEidCur;
      end if;
      rollback;
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
end;
/

--
-- INSERT_ENCOUNTERVISIT_FROMTEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE          "INSERT_ENCOUNTERVISIT_FROMTEMP" (tempTableName IN VARCHAR, upload_id IN NUMBER,
  errorMsg OUT VARCHAR)
IS
maxEncounterNum number;
BEGIN

     --Delete duplicate rows with same encounter and patient combination
	execute immediate 'DELETE FROM ' || tempTableName || ' t1 WHERE rowid >
					   (SELECT  min(rowid) FROM ' || tempTableName || ' t2
					     WHERE t1.encounter_id = t2.encounter_id
                                            AND t1.encounter_id_source = t2.encounter_id_source
                                            AND nvl(t1.patient_id,'''') = nvl(t2.patient_id,'''')
                                            AND nvl(t1.patient_id_source,'''') = nvl(t2.patient_id_source,''''))';

	 LOCK TABLE  encounter_mapping IN EXCLUSIVE MODE NOWAIT;
    -- select max(encounter_num) into maxEncounterNum from encounter_mapping ;

	 --Create new patient(patient_mapping) if temp table patient_ide does not exists
	-- in patient_mapping table.
     execute immediate ' insert into encounter_mapping (encounter_ide,encounter_ide_source,encounter_num,patient_ide,patient_ide_source,encounter_ide_status, upload_id)
     	(select distinctTemp.encounter_id, distinctTemp.encounter_id_source, distinctTemp.encounter_id,  distinctTemp.patient_id,distinctTemp.patient_id_source,''A'',  '|| upload_id ||'
				from
					(select distinct encounter_id, encounter_id_source,patient_id,patient_id_source from ' || tempTableName || '  temp
					where
				     not exists (select encounter_ide from encounter_mapping em where em.encounter_ide = temp.encounter_id and em.encounter_ide_source = temp.encounter_id_source)
					 and encounter_id_source = ''HIVE'' )   distinctTemp) ' ;



	-- update patient_num for temp table
execute immediate ' UPDATE ' ||  tempTableName
 || ' SET encounter_num = (SELECT em.encounter_num
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = '|| tempTableName ||'.encounter_id
                     and em.encounter_ide_source = '|| tempTableName ||'.encounter_id_source
					 and nvl(em.patient_ide_source,'''') = nvl('|| tempTableName ||'.patient_id_source,'''')
				     and nvl(em.patient_ide,'''')= nvl('|| tempTableName ||'.patient_id,'''')
	 	    )
WHERE EXISTS (SELECT em.encounter_num
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = '|| tempTableName ||'.encounter_id
                     and em.encounter_ide_source = '||tempTableName||'.encounter_id_source
					 and nvl(em.patient_ide_source,'''') = nvl('|| tempTableName ||'.patient_id_source,'''')
				     and nvl(em.patient_ide,'''')= nvl('|| tempTableName ||'.patient_id,''''))';

	 execute immediate ' UPDATE visit_dimension  set  (	START_DATE,END_DATE,INOUT_CD,LOCATION_CD,VISIT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD, UPLOAD_ID )
			= (select temp.START_DATE,temp.END_DATE,temp.INOUT_CD,temp.LOCATION_CD,temp.VISIT_BLOB,temp.update_date,temp.DOWNLOAD_DATE,sysdate,temp.SOURCESYSTEM_CD,
			     	' || UPLOAD_ID  || ' from ' || tempTableName || '  temp   where
					temp.encounter_num = visit_dimension.encounter_num and temp.update_date >= visit_dimension.update_date)
					where exists (select 1 from ' || tempTableName || ' temp  where temp.encounter_num = visit_dimension.encounter_num
					and temp.update_date >= visit_dimension.update_date) ';

   execute immediate 'insert into visit_dimension  (encounter_num,patient_num,START_DATE,END_DATE,INOUT_CD,LOCATION_CD,VISIT_BLOB,UPDATE_DATE,DOWNLOAD_DATE,IMPORT_DATE,SOURCESYSTEM_CD, UPLOAD_ID)
	               select temp.encounter_num, pm.patient_num,
					temp.START_DATE,temp.END_DATE,temp.INOUT_CD,temp.LOCATION_CD,temp.VISIT_BLOB,
					temp.update_date,
					temp.download_date,
					sysdate, -- import date
					temp.sourcesystem_cd,
		            '|| upload_id ||'
			from
				' || tempTableName || '  temp , patient_mapping pm
			where
                 temp.encounter_num is not null and
		      	 not exists (select encounter_num from visit_dimension vd where vd.encounter_num = temp.encounter_num) and
				 pm.patient_ide = temp.patient_id and pm.patient_ide_source = temp.patient_id_source
	 ';
commit;

EXCEPTION
	WHEN OTHERS THEN
		rollback;
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- INSERT_MODIFIER_FROMTEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE  "INSERT_MODIFIER_FROMTEMP" (tempModifierTableName IN VARCHAR, upload_id IN NUMBER, errorMsg OUT VARCHAR )
IS

BEGIN
	--Delete duplicate rows
	execute immediate 'DELETE FROM ' || tempModifierTableName || ' t1 WHERE rowid >
					   (SELECT  min(rowid) FROM ' || tempModifierTableName || ' t2
					     WHERE t1.modifier_cd = t2.modifier_cd
                                            AND t1.modifier_path = t2.modifier_path
                                            )';

	   execute immediate ' UPDATE modifier_dimension  set  (modifier_cd,
                        name_char,modifier_blob,
                        update_date,download_date,
                        import_date,sourcesystem_cd,
			     	UPLOAD_ID) = (select temp.modifier_cd, temp.name_char,temp.modifier_blob,temp.update_date,temp.DOWNLOAD_DATE,sysdate,temp.SOURCESYSTEM_CD,
			     	' || UPLOAD_ID  || ' from ' || tempModifierTableName || '  temp   where
					temp.modifier_path = modifier_dimension.modifier_path and temp.update_date >= modifier_dimension.update_date)
					where exists (select 1 from ' || tempModifierTableName || ' temp  where temp.modifier_path = modifier_dimension.modifier_path
					and temp.update_date >= modifier_dimension.update_date) ';




    --Create new modifier if temp table modifier_path does not exists
	-- in modifier dimension table.
	execute immediate 'insert into modifier_dimension  (modifier_cd,modifier_path,name_char,modifier_blob,update_date,download_date,import_date,sourcesystem_cd,upload_id)
			    select  modifier_cd, modifier_path,
                        name_char,modifier_blob,
                        update_date,download_date,
                        sysdate,sourcesystem_cd,
                         ' || upload_id || '  from ' || tempModifierTableName || '  temp
					where not exists (select modifier_cd from modifier_dimension cd where cd.modifier_path = temp.modifier_path)

	';
EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- INSERT_PATIENT_MAP_FROMTEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE          "INSERT_PATIENT_MAP_FROMTEMP" (tempPatientTableName IN VARCHAR,  upload_id IN NUMBER,
   errorMsg OUT VARCHAR )
IS

BEGIN

	--Create new patient mapping entry for HIVE patient's if they are not already mapped in mapping table
	execute immediate 'insert into patient_mapping (
		select distinct temp.patient_id, temp.patient_id_source,''A'',temp.patient_id ,' || upload_id || '
		from ' || tempPatientTableName ||'  temp
		where temp.patient_id_source = ''HIVE'' and
   		not exists (select patient_ide from patient_mapping pm where pm.patient_num = temp.patient_id and pm.patient_ide_source = temp.patient_id_source)
		)';

    --Create new visit for above inserted encounter's
	--If Visit table's encounter and patient num does match temp table,
	--then new visit information is created.
	execute immediate 'MERGE  INTO patient_dimension pd
		   USING ( select case when (ptemp.patient_id_source=''HIVE'') then to_number(ptemp.patient_id)
                                       else pmap.patient_num end patient_num,
                                  ptemp.VITAL_STATUS_CD,
                                  ptemp.BIRTH_DATE,
                                  ptemp.DEATH_DATE,
                                  ptemp.SEX_CD ,
                                  ptemp.AGE_IN_YEARS_NUM,
                                  ptemp.LANGUAGE_CD,
                                  ptemp.RACE_CD,
                                  ptemp.MARITAL_STATUS_CD,
                                  ptemp.RELIGION_CD,
                                  ptemp.ZIP_CD,
								  ptemp.STATECITYZIP_PATH ,
								  ptemp.PATIENT_BLOB,
								  ptemp.UPDATE_DATE,
								  ptemp.DOWNLOAD_DATE,
								  ptemp.IMPORT_DATE,
								  ptemp.SOURCESYSTEM_CD

                   from ' || tempPatientTableName || '  ptemp , patient_mapping pmap
                   where   ptemp.patient_id = pmap.patient_ide(+)
                   and ptemp.patient_id_source = pmap.patient_ide_source(+)
           ) temp
		   on (
				pd.patient_num = temp.patient_num
		    )
			when matched then
			 	update  set
			 		pd.VITAL_STATUS_CD= temp.VITAL_STATUS_CD,
                    pd.BIRTH_DATE= temp.BIRTH_DATE,
                    pd.DEATH_DATE= temp.DEATH_DATE,
                    pd.SEX_CD= temp.SEX_CD,
                    pd.AGE_IN_YEARS_NUM=temp.AGE_IN_YEARS_NUM,
                    pd.LANGUAGE_CD=temp.LANGUAGE_CD,
                    pd.RACE_CD=temp.RACE_CD,
                    pd.MARITAL_STATUS_CD=temp.MARITAL_STATUS_CD,
                    pd.RELIGION_CD=temp.RELIGION_CD,
                    pd.ZIP_CD=temp.ZIP_CD,
					pd.STATECITYZIP_PATH =temp.STATECITYZIP_PATH,
					pd.PATIENT_BLOB=temp.PATIENT_BLOB,
					pd.UPDATE_DATE=temp.UPDATE_DATE,
					pd.DOWNLOAD_DATE=temp.DOWNLOAD_DATE,
					pd.SOURCESYSTEM_CD=temp.SOURCESYSTEM_CD,
					pd.UPLOAD_ID = '||upload_id||'
                    where temp.update_date > pd.update_date
			 when not matched then
			 	insert (
					PATIENT_NUM,
					VITAL_STATUS_CD,
                    BIRTH_DATE,
                    DEATH_DATE,
                    SEX_CD,
                    AGE_IN_YEARS_NUM,
                    LANGUAGE_CD,
                    RACE_CD,
                    MARITAL_STATUS_CD,
                    RELIGION_CD,
                    ZIP_CD,
					STATECITYZIP_PATH,
					PATIENT_BLOB,
					UPDATE_DATE,
					DOWNLOAD_DATE,
					SOURCESYSTEM_CD,
					import_date,
	                upload_id
 					)
			 	values (
 					temp.PATIENT_NUM,
					temp.VITAL_STATUS_CD,
                    temp.BIRTH_DATE,
                    temp.DEATH_DATE,
                    temp.SEX_CD,
                    temp.AGE_IN_YEARS_NUM,
                    temp.LANGUAGE_CD,
                    temp.RACE_CD,
                    temp.MARITAL_STATUS_CD,
                    temp.RELIGION_CD,
                    temp.ZIP_CD,
					temp.STATECITYZIP_PATH,
					temp.PATIENT_BLOB,
					temp.UPDATE_DATE,
					temp.DOWNLOAD_DATE,
					temp.SOURCESYSTEM_CD,
					sysdate,
	     			'||upload_id||'
 				)';


EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- INSERT_PID_MAP_FROMTEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE INSERT_PID_MAP_FROMTEMP (tempPidTableName IN VARCHAR,  upload_id IN NUMBER,
   errorMsg OUT VARCHAR)
is
 existingPatientNum varchar2(32);
 maxPatientNum number;

 TYPE distinctPidCurTyp IS REF CURSOR;
distinctPidCur   distinctPidCurTyp;
 sql_stmt  varchar2(400);

disPatientId varchar2(100);
disPatientIdSource varchar2(100);

BEGIN
 sql_stmt := ' SELECT distinct patient_id,patient_id_source from ' || tempPidTableName ||' ';

  --delete the data if they miss
  execute immediate ' delete  from ' || tempPidTableName ||  ' t1  where
rowid > (select min(rowid) from ' || tempPidTableName || ' t2
where t1.patient_map_id = t2.patient_map_id
and t1.patient_map_id_source = t2.patient_map_id_source) ';

 LOCK TABLE  patient_mapping IN EXCLUSIVE MODE NOWAIT;
 select max(patient_num) into maxPatientNum from patient_mapping ;
 -- set max patient num to zero of the value is null
 if maxPatientNum is null then
  maxPatientNum := 0;
end if;

  open distinctPidCur for sql_stmt ;

   loop

     FETCH distinctPidCur INTO disPatientId, disPatientIdSource;
      EXIT WHEN distinctPidCur%NOTFOUND;
        -- dbms_output.put_line(disPatientId);

  if  disPatientIdSource = 'HIVE'  THEN
   begin
    --check if hive number exist, if so assign that number to reset of map_id's within that pid
    select patient_num into existingPatientNum from patient_mapping where patient_num = disPatientId and patient_ide_source = 'HIVE';
    EXCEPTION
       when NO_DATA_FOUND THEN
           existingPatientNum := null;
    end;
   if existingPatientNum is not null then
        execute immediate ' update ' || tempPidTableName ||' set patient_num = patient_id, process_status_flag = ''P''
        where patient_id = :x and not exists (select 1 from patient_mapping pm where pm.patient_ide = patient_map_id
        and pm.patient_ide_source = patient_map_id_source)' using disPatientId;
   else
        -- generate new patient_num i.e. take max(patient_num) + 1
        if maxPatientNum < disPatientId then
            maxPatientNum := disPatientId;
        end if ;
        execute immediate ' update ' || tempPidTableName ||' set patient_num = patient_id, process_status_flag = ''P'' where
        patient_id = :x and patient_id_source = ''HIVE'' and not exists (select 1 from patient_mapping pm where pm.patient_ide = patient_map_id
        and pm.patient_ide_source = patient_map_id_source)' using disPatientId;
   end if;

   -- test if record fectched
   -- dbms_output.put_line(' HIVE ');

 else
    begin
       select patient_num into existingPatientNum from patient_mapping where patient_ide = disPatientId and
        patient_ide_source = disPatientIdSource ;

       -- test if record fetched.
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
           existingPatientNum := null;
       end;
       if existingPatientNum is not null then
            execute immediate ' update ' || tempPidTableName ||' set patient_num = :x , process_status_flag = ''P''
            where patient_id = :y and not exists (select 1 from patient_mapping pm where pm.patient_ide = patient_map_id
        and pm.patient_ide_source = patient_map_id_source)' using  existingPatientNum,disPatientId;
       else

            maxPatientNum := maxPatientNum + 1 ;
             execute immediate 'insert into ' || tempPidTableName ||' (patient_map_id,patient_map_id_source,patient_id,patient_id_source,patient_num,process_status_flag
             ,patient_map_id_status,update_date,download_date,import_date,sourcesystem_cd)
             values(:x,''HIVE'',:y,''HIVE'',:z,''P'',''A'',sysdate,sysdate,sysdate,''edu.harvard.i2b2.crc'')' using maxPatientNum,maxPatientNum,maxPatientNum;
            execute immediate 'update ' || tempPidTableName ||' set patient_num =  :x , process_status_flag = ''P''
             where patient_id = :y and  not exists (select 1 from
            patient_mapping pm where pm.patient_ide = patient_map_id
            and pm.patient_ide_source = patient_map_id_source)' using maxPatientNum, disPatientId  ;

       end if ;

      -- dbms_output.put_line(' NOT HIVE ');
 end if;

END LOOP;
close distinctPidCur ;
commit;

-- do the mapping update if the update date is old
   execute immediate ' merge into patient_mapping
      using ' || tempPidTableName ||' temp
      on (temp.patient_map_id = patient_mapping.patient_IDE
  		  and temp.patient_map_id_source = patient_mapping.patient_IDE_SOURCE
	   ) when matched then
  		update set patient_num = temp.patient_id,
    	patient_ide_status	= temp.patient_map_id_status  ,
    	update_date = temp.update_date,
    	download_date  = temp.download_date ,
		import_date = sysdate ,
    	sourcesystem_cd  = temp.sourcesystem_cd ,
		upload_id = ' || upload_id ||'
    	where  temp.patient_id_source = ''HIVE'' and temp.process_status_flag is null  and
        nvl(patient_mapping.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY''))<= nvl(temp.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY'')) ' ;

-- insert new mapping records i.e flagged P
execute immediate ' insert into patient_mapping (patient_ide,patient_ide_source,patient_ide_status,patient_num,update_date,download_date,import_date,sourcesystem_cd,upload_id)
    select patient_map_id,patient_map_id_source,patient_map_id_status,patient_num,update_date,download_date,sysdate,sourcesystem_cd,' || upload_id ||' from '|| tempPidTableName || '
    where process_status_flag = ''P'' ' ;
commit;
EXCEPTION
   WHEN OTHERS THEN
      if distinctPidCur%isopen then
          close distinctPidCur;
      end if;
      rollback;
      raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
end;
/

--
-- INSERT_PROVIDER_FROMTEMP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE  "INSERT_PROVIDER_FROMTEMP" (tempProviderTableName IN VARCHAR, upload_id IN NUMBER,
   errorMsg OUT VARCHAR)

IS

BEGIN
	--Delete duplicate rows with same encounter and patient combination
	execute immediate 'DELETE FROM ' || tempProviderTableName || ' t1 WHERE rowid >
					   (SELECT  min(rowid) FROM ' || tempProviderTableName || ' t2
					     WHERE t1.provider_id = t2.provider_id
                                            AND t1.provider_path = t2.provider_path
                                            )';



 execute immediate ' UPDATE provider_dimension  set  (provider_id,
                        name_char,provider_blob,
                        update_date,download_date,
                        import_date,sourcesystem_cd,
			     	UPLOAD_ID) = (select temp.provider_id, temp.name_char,temp.provider_blob,temp.update_date,temp.DOWNLOAD_DATE,sysdate,temp.SOURCESYSTEM_CD,
			     	' || UPLOAD_ID  || ' from ' || tempProviderTableName || '  temp   where
					temp.provider_path = provider_dimension.provider_path and temp.update_date >= provider_dimension.update_date)
					where exists (select 1 from ' || tempProviderTableName || ' temp  where temp.provider_path = provider_dimension.provider_path
					and temp.update_date >= provider_dimension.update_date) ';


    --Create new patient(patient_mapping) if temp table patient_ide does not exists
	-- in patient_mapping table.
	execute immediate 'insert into provider_dimension  (provider_id,provider_path,name_char,provider_blob,update_date,download_date,import_date,sourcesystem_cd,upload_id)
			    select  provider_id,provider_path,
                        name_char,provider_blob,
                        update_date,download_date,
                        sysdate,sourcesystem_cd, ' || upload_id || '

                         from ' || tempProviderTableName || '  temp
					where not exists (select provider_id from provider_dimension pd where pd.provider_path = temp.provider_path )';

					EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- REMOVE_TEMP_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE REMOVE_TEMP_TABLE(tempTableName VARCHAR)
IS
BEGIN
	execute immediate 'drop table ' || tempTableName || ' cascade constraints';

EXCEPTION
	WHEN OTHERS THEN
		dbms_output.put_line(SQLCODE|| ' - ' ||SQLERRM);
END;
/

--
-- SYNC_CLEAR_CONCEPT_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE  "SYNC_CLEAR_CONCEPT_TABLE" (tempConceptTableName in VARCHAR, backupConceptTableName IN VARCHAR, uploadId in NUMBER, errorMsg OUT VARCHAR )
IS

interConceptTableName  varchar2(400);

BEGIN
	interConceptTableName := backupConceptTableName || '_inter';

		--Delete duplicate rows with same encounter and patient combination
	execute immediate 'DELETE FROM ' || tempConceptTableName || ' t1 WHERE rowid >
					   (SELECT  min(rowid) FROM ' || tempConceptTableName || ' t2
					     WHERE t1.concept_cd = t2.concept_cd
                                            AND t1.concept_path = t2.concept_path
                                            )';

    execute immediate 'create table ' ||  interConceptTableName || ' (
    CONCEPT_CD          VARCHAR2(50) NOT NULL,
	CONCEPT_PATH    	VARCHAR2(700) NOT NULL,
	NAME_CHAR       	VARCHAR2(2000) NULL,
	CONCEPT_BLOB        CLOB NULL,
	UPDATE_DATE         DATE NULL,
	DOWNLOAD_DATE       DATE NULL,
	IMPORT_DATE         DATE NULL,
	SOURCESYSTEM_CD     VARCHAR2(50) NULL,
	UPLOAD_ID       	NUMBER(38,0) NULL,
    CONSTRAINT '|| interConceptTableName ||'_pk  PRIMARY KEY(CONCEPT_PATH)
	 )';

    --Create new patient(patient_mapping) if temp table patient_ide does not exists
	-- in patient_mapping table.
	execute immediate 'insert into '|| interConceptTableName ||'  (concept_cd,concept_path,name_char,concept_blob,update_date,download_date,import_date,sourcesystem_cd,upload_id)
			    select  concept_cd, substr(concept_path,1,700),
                        name_char,concept_blob,
                        update_date,download_date,
                        sysdate,sourcesystem_cd,
                         ' || uploadId || '  from ' || tempConceptTableName || '  temp ';
	--backup the concept_dimension table before creating a new one
	execute immediate 'alter table concept_dimension rename to ' || backupConceptTableName  ||'' ;

	-- add index on upload_id
    execute immediate 'CREATE INDEX ' || interConceptTableName || '_uid_idx ON ' || interConceptTableName || '(UPLOAD_ID)';

    -- add index on upload_id
    execute immediate 'CREATE INDEX ' || interConceptTableName || '_cd_idx ON ' || interConceptTableName || '(concept_cd)';


    --backup the concept_dimension table before creating a new one
	execute immediate 'alter table ' || interConceptTableName  || ' rename to concept_dimension' ;

EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- SYNC_CLEAR_MODIFIER_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE  "SYNC_CLEAR_MODIFIER_TABLE" (tempModifierTableName in VARCHAR, backupModifierTableName IN VARCHAR, uploadId in NUMBER, errorMsg OUT VARCHAR )
IS

interModifierTableName  varchar2(400);

BEGIN
	interModifierTableName := backupModifierTableName || '_inter';

	--Delete duplicate rows with same modifier_path and modifier cd
	execute immediate 'DELETE FROM ' || tempModifierTableName || ' t1 WHERE rowid >
					   (SELECT  min(rowid) FROM ' || tempModifierTableName || ' t2
					     WHERE t1.modifier_cd = t2.modifier_cd
                                            AND t1.modifier_path = t2.modifier_path
                                            )';

    execute immediate 'create table ' ||  interModifierTableName || ' (
        MODIFIER_CD          VARCHAR2(50) NOT NULL,
	MODIFIER_PATH    	VARCHAR2(700) NOT NULL,
	NAME_CHAR       	VARCHAR2(2000) NULL,
	MODIFIER_BLOB        CLOB NULL,
	UPDATE_DATE         DATE NULL,
	DOWNLOAD_DATE       DATE NULL,
	IMPORT_DATE         DATE NULL,
	SOURCESYSTEM_CD     VARCHAR2(50) NULL,
	UPLOAD_ID       	NUMBER(38,0) NULL,
    CONSTRAINT '|| interModifierTableName ||'_pk  PRIMARY KEY(MODIFIER_PATH)
	 )';

    --Create new patient(patient_mapping) if temp table patient_ide does not exists
	-- in patient_mapping table.
	execute immediate 'insert into '|| interModifierTableName ||'  (modifier_cd,modifier_path,name_char,modifier_blob,update_date,download_date,import_date,sourcesystem_cd,upload_id)
			    select  modifier_cd, substr(modifier_path,1,700),
                        name_char,modifier_blob,
                        update_date,download_date,
                        sysdate,sourcesystem_cd,
                         ' || uploadId || '  from ' || tempModifierTableName || '  temp ';
	--backup the modifier_dimension table before creating a new one
	execute immediate 'alter table modifier_dimension rename to ' || backupModifierTableName  ||'' ;

	-- add index on upload_id
    execute immediate 'CREATE INDEX ' || interModifierTableName || '_uid_idx ON ' || interModifierTableName || '(UPLOAD_ID)';

    -- add index on upload_id
    execute immediate 'CREATE INDEX ' || interModifierTableName || '_cd_idx ON ' || interModifierTableName || '(modifier_cd)';


       --backup the modifier_dimension table before creating a new one
	execute immediate 'alter table ' || interModifierTableName  || ' rename to modifier_dimension' ;

EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- SYNC_CLEAR_PROVIDER_TABLE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE  "SYNC_CLEAR_PROVIDER_TABLE" (tempProviderTableName in VARCHAR, backupProviderTableName IN VARCHAR, uploadId in NUMBER, errorMsg OUT VARCHAR )
IS

interProviderTableName  varchar2(400);

BEGIN
	interProviderTableName := backupProviderTableName || '_inter';

		--Delete duplicate rows with same encounter and patient combination
	execute immediate 'DELETE FROM ' || tempProviderTableName || ' t1 WHERE rowid >
					   (SELECT  min(rowid) FROM ' || tempProviderTableName || ' t2
					     WHERE t1.provider_id = t2.provider_id
                                            AND t1.provider_path = t2.provider_path
                                            )';

    execute immediate 'create table ' ||  interProviderTableName || ' (
    PROVIDER_ID         VARCHAR2(50) NOT NULL,
	PROVIDER_PATH       VARCHAR2(700) NOT NULL,
	NAME_CHAR       	VARCHAR2(850) NULL,
	PROVIDER_BLOB       CLOB NULL,
	UPDATE_DATE     	DATE NULL,
	DOWNLOAD_DATE       DATE NULL,
	IMPORT_DATE         DATE NULL,
	SOURCESYSTEM_CD     VARCHAR2(50) NULL,
	UPLOAD_ID        	NUMBER(38,0) NULL ,
    CONSTRAINT  ' || interProviderTableName || '_pk PRIMARY KEY(PROVIDER_PATH,provider_id)
	 )';

    --Create new patient(patient_mapping) if temp table patient_ide does not exists
	-- in patient_mapping table.
	execute immediate 'insert into ' ||  interProviderTableName || ' (provider_id,provider_path,name_char,provider_blob,update_date,download_date,import_date,sourcesystem_cd,upload_id)
			    select  provider_id,provider_path,
                        name_char,provider_blob,
                        update_date,download_date,
                        sysdate,sourcesystem_cd, ' || uploadId || '
	                     from ' || tempProviderTableName || '  temp ';

	--backup the concept_dimension table before creating a new one
	execute immediate 'alter table provider_dimension rename to ' || backupProviderTableName  ||'' ;

	-- add index on provider_id, name_char
    execute immediate 'CREATE INDEX ' || interProviderTableName || '_id_idx ON ' || interProviderTableName  || '(Provider_Id,name_char)';
    execute immediate 'CREATE INDEX ' || interProviderTableName || '_uid_idx ON ' || interProviderTableName  || '(UPLOAD_ID)';

	--backup the concept_dimension table before creating a new one
	execute immediate 'alter table ' || interProviderTableName  || ' rename to provider_dimension' ;

EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- UPDATE_OBSERVATION_FACT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE          UPDATE_OBSERVATION_FACT (upload_temptable_name IN VARCHAR, upload_id IN NUMBER, appendFlag IN NUMBER,
   errorMsg OUT VARCHAR)
IS
BEGIN

--Delete duplicate records(encounter_ide,patient_ide,concept_cd,start_date,modifier_cd,provider_id)
execute immediate 'DELETE FROM ' || upload_temptable_name ||'  t1
  where rowid > (select min(rowid) from ' || upload_temptable_name ||' t2
    where t1.encounter_id = t2.encounter_id
          and
          t1.encounter_id_source = t2.encounter_id_source
          and
          t1.patient_id = t2.patient_id
          and
          t1.patient_id_source = t2.patient_id_source
          and
          t1.concept_cd = t2.concept_cd
          and
          t1.start_date = t2.start_date
          and
          nvl(t1.modifier_cd,''xyz'') = nvl(t2.modifier_cd,''xyz'')
		  and
		  t1.instance_num = t2.instance_num
          and
          t1.provider_id = t2.provider_id)';


--Delete records having null in start_date
execute immediate 'DELETE FROM ' || upload_temptable_name ||'  t1
 where t1.start_date is null';


--One time lookup on encounter_ide to get encounter_num
execute immediate 'UPDATE ' ||  upload_temptable_name
 || ' SET encounter_num = (SELECT em.encounter_num
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = ' || upload_temptable_name||'.encounter_id
                     and em.encounter_ide_source = '|| upload_temptable_name||'.encounter_id_source
	 	    )
WHERE EXISTS (SELECT em.encounter_num
		     FROM encounter_mapping em
		     WHERE em.encounter_ide = '|| upload_temptable_name||'.encounter_id
                     and em.encounter_ide_source = '||upload_temptable_name||'.encounter_id_source)';

--One time lookup on patient_ide to get patient_num
execute immediate 'UPDATE ' ||  upload_temptable_name
 || ' SET patient_num = (SELECT pm.patient_num
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = '|| upload_temptable_name||'.patient_id
                     and pm.patient_ide_source = '|| upload_temptable_name||'.patient_id_source
	 	    )
WHERE EXISTS (SELECT pm.patient_num
		     FROM patient_mapping pm
		     WHERE pm.patient_ide = '|| upload_temptable_name||'.patient_id
                     and pm.patient_ide_source = '||upload_temptable_name||'.patient_id_source)';

IF (appendFlag = 0) THEN
--Archive records which are to be deleted in observation_fact table
execute immediate 'INSERT ALL INTO  archive_observation_fact
		SELECT obsfact.*, ' || upload_id ||' archive_upload_id
		FROM observation_fact obsfact
		WHERE obsfact.encounter_num IN
			(SELECT temp_obsfact.encounter_num
			FROM  ' ||upload_temptable_name ||' temp_obsfact
                        group by temp_obsfact.encounter_num
            )';

--Delete above archived row from observation_fact
execute immediate 'DELETE  observation_fact
					WHERE EXISTS (
					SELECT archive.encounter_num
					FROM archive_observation_fact  archive
					where archive.archive_upload_id = '||upload_id ||'
                                         AND archive.encounter_num=observation_fact.encounter_num
										 AND archive.concept_cd = observation_fact.concept_cd
										 AND archive.start_date = observation_fact.start_date
                    )';
END IF;

-- if the append is true, then do the update else do insert all
IF (appendFlag = 0) THEN

--Transfer all rows from temp_obsfact to observation_fact
execute immediate 'INSERT ALL INTO observation_fact(encounter_num,concept_cd, patient_num,provider_id, start_date,modifier_cd,instance_num,valtype_cd,tval_char,nval_num,valueflag_cd,
quantity_num,confidence_num,observation_blob,units_cd,end_date,location_cd, update_date,download_date,import_date,sourcesystem_cd,
upload_id)
SELECT encounter_num,concept_cd, patient_num,provider_id, start_date,modifier_cd,instance_num,valtype_cd,tval_char,nval_num,valueflag_cd,
quantity_num,confidence_num,observation_blob,units_cd,end_date,location_cd, update_date,download_date,sysdate import_date,sourcesystem_cd,
temp.upload_id
FROM ' || upload_temptable_name ||' temp
where temp.patient_num is not null and  temp.encounter_num is not null';

ELSE
execute immediate ' UPDATE observation_fact f set (valtype_cd,
    tval_char,
    nval_num,
    valueflag_cd,
    quantity_num,
    confidence_num,
    observation_blob,
    units_cd,
    end_date,
    location_cd,
    update_date,
    download_date,
    import_date,
    sourcesystem_cd,
    upload_id ) =  ( select
    temp.valtype_cd,
    temp.tval_char,
    temp.nval_num,
    temp.valueflag_cd,
    temp.quantity_num,
    temp.confidence_num,
    temp.observation_blob,
    temp.units_cd,
    temp.end_date,
    temp.location_cd,
    temp.update_date,
    temp.download_date,
    temp.import_date,
    temp.sourcesystem_cd,
    temp.upload_id
   from ' || upload_temptable_name ||' temp where temp.patient_num is not null and
                     temp.encounter_num is not null and
                     temp.encounter_num = f.encounter_num
                    and temp.patient_num = f.patient_num
                    and temp.concept_cd = f.concept_cd
                    and temp.start_date = f.start_date
                    and temp.provider_id = f.provider_id
                    and temp.modifier_cd = f.modifier_cd
                    and temp.instance_num = f.instance_num
and nvl(f.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY''))<= nvl(temp.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY''))
)  where exists (select 1 from ' || upload_temptable_name ||' temp where temp.patient_num is not null and
                     temp.encounter_num is not null and
                     temp.encounter_num = f.encounter_num
                    and temp.patient_num = f.patient_num
                    and temp.concept_cd = f.concept_cd
                    and temp.start_date = f.start_date
                    and temp.provider_id = f.provider_id
                    and temp.modifier_cd = f.modifier_cd
                    and temp.instance_num = f.instance_num
and nvl(f.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY''))<= nvl(temp.update_date,to_date(''01-JAN-1900'',''DD-MON-YYYY''))
)';
execute immediate 'delete from ' || upload_temptable_name ||' temp where exists (select 1 from OBSERVATION_FACT f where temp.patient_num is not null and
                     temp.encounter_num is not null and
                     temp.encounter_num = f.encounter_num
                    and temp.patient_num = f.patient_num
                    and temp.concept_cd = f.concept_cd
                    and temp.start_date = f.start_date
                    and temp.provider_id = f.provider_id
                    and temp.modifier_cd = f.modifier_cd
                    and temp.instance_num = f.instance_num)';


execute immediate ' insert into observation_fact (encounter_num,
					concept_cd,
		 			patient_num,
		 			provider_id,
 					start_date,
		 			modifier_cd,
					instance_num,
 					valtype_cd,
		 			tval_char,
 					nval_num,
		 			valueflag_cd,
 					quantity_num,
		 			confidence_num,
 					observation_blob,
		 			units_cd,
 					end_date,
		 			location_cd,
 					update_date,
		 			download_date,
 					import_date,
		 			sourcesystem_cd,
 					upload_id)
			 	select
 					temp.encounter_num,
		 			temp.concept_cd,
		 			temp.patient_num,
 					temp.provider_id,
		 			temp.start_date,
 					temp.modifier_cd,
					temp.instance_num,
		 			temp.valtype_cd,
 					temp.tval_char,
		 			temp.nval_num,
		 			temp.valueflag_cd,
		 			temp.quantity_num,
 					temp.confidence_num,
		 			temp.observation_blob,
		 			temp.units_cd,
		 			temp.end_date,
		 			temp.location_cd,
		 			temp.update_date,
		 			temp.download_date,
		 			temp.import_date,
 					temp.sourcesystem_cd,
		 			temp.upload_id
 				from  ' || upload_temptable_name ||' temp where  temp.patient_num is not null and
                     temp.encounter_num is not null';
END IF;

EXCEPTION
	WHEN OTHERS THEN
		raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;
/

--
-- UTIL_GRANT_ALL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE              "UTIL_GRANT_ALL"
(username	varchar2 := 'DATATRUST'
,V_WHATTYPE IN VARCHAR2 DEFAULT 'PROCEDURES,FUNCTIONS,TABLES,VIEWS,PACKAGES,SEQUENCES')
AUTHID CURRENT_USER
AS
/*************************************************************************
* Copyright 2008-2012 Janssen Research and Development, LLC.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************/

    v_user      varchar2(2000) := SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA');
	extTable	int;

  begin

	IF UPPER(V_WHATTYPE) LIKE '%TABLE%' THEN
    dbms_output.put_line('Owner ' || v_user  || '   Grantee ' || username);
    dbms_output.put_line('Tables');

     for L_TABLE in (select table_name from user_tables where table_name not like '%EXTRNL%') LOOP

		select count(*) into extTable
		from all_external_tables
		where owner = v_user
		  and table_name = L_TABLE.table_name;
		
       --if L_TABLE.table_name like '%EXTRNL%' then
	    if extTable > 0 then
          --grant select only to External tables
          execute immediate 'grant select on ' || L_TABLE.table_name || ' to ' || username;

       else
          --Grant full permissions on regular tables
          execute immediate 'grant select, insert, update, delete on ' || L_TABLE.table_name || ' to ' || username;
          --DBMS_OUTPUT.put_line('grant select, insert, update, delete on ' || L_TABLE.table_name || ' to ' || username);
       end if;

     END LOOP; --TABLE LOOP
     end if;

	IF UPPER(V_WHATTYPE) LIKE '%VIEW%' THEN
    dbms_output.put_line('Owner ' || v_user  || '   Grantee ' || username);
    dbms_output.put_line('Views');

     for L_VIEW in (select view_name from user_views ) LOOP
          execute immediate 'grant select on ' || L_VIEW.view_name || ' to ' || username;

     END LOOP; --TABLE LOOP
 end if;

 IF UPPER(V_WHATTYPE) LIKE '%PROCEDURE%' or UPPER(V_WHATTYPE) LIKE '%FUNCTION%' or UPPER(V_WHATTYPE) LIKE '%PACKAGE%'  THEN
    dbms_output.put_line(chr(10) || 'Procedures, functions and packages');

    for L_PROCEDURE in (select object_name from user_objects where object_type in ('PROCEDURE', 'FUNCTION', 'PACKAGE') )
     LOOP

       execute immediate 'grant execute on ' || L_PROCEDURE.object_name || ' to ' || username;
      -- DBMS_OUTPUT.put_line('grant execute on ' || L_PROCEDURE.object_name || ' to ' || username);

     END LOOP; --PROCEDURE LOOP
  end if;

 IF UPPER(V_WHATTYPE) LIKE '%SEQUENCE%'  THEN
    dbms_output.put_line(chr(10) || 'Sequence');

    for L_SEQUENCE in (select object_name from user_objects where object_type = 'SEQUENCE' )
     LOOP

       execute immediate 'grant select on ' || L_SEQUENCE.object_name || ' to ' || username;
      -- DBMS_OUTPUT.put_line('grant select on ' || L_SEQUENCE.object_name || ' to ' || username);

     END LOOP; --SEQUENCE LOOP
  end if;

END;
/

--
-- TRG_ENCOUNTER_NUM  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_ENCOUNTER_NUM 
	before insert on "OBSERVATION_FACT_TEMP"    
	for each row
begin     
	  if inserting then       
		if :NEW."ENCOUNTER_NUM" is null then          
		  select SEQ_ENCOUNTER_NUM.nextval into :NEW."ENCOUNTER_NUM" from dual;       
		end if;    
	  end if; 
	end;
/


--
-- CDMMAPPER  (Table) 
--
CREATE TABLE CDMMAPPER
(
  ID            NUMBER(19)                      NOT NULL,
  VERSION       NUMBER(19)                      NOT NULL,
  META_DATA_ID  NUMBER(19)                      NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE,
  CONSTRAINT FK2FFF6D6DF3960060 
  FOREIGN KEY (META_DATA_ID) 
  REFERENCES META_DATA_MAPPER (ID)
  ENABLE VALIDATE
);


--
-- I2B2PARSERS  (Table) 
--
CREATE TABLE I2B2PARSERS
(
  ID                         NUMBER(19)         NOT NULL,
  VERSION                    NUMBER(19)         NOT NULL,
  I2B2MAPPER_PARSE_ID        NUMBER(19)         NOT NULL,
  I2B2PARSE_EVENT_MAPPER_ID  NUMBER(19)         NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE,
  CONSTRAINT FKA50EF35B97BD018 
  FOREIGN KEY (I2B2MAPPER_PARSE_ID) 
  REFERENCES I2B2MAPPER_PARSE (ID)
  ENABLE VALIDATE,
  CONSTRAINT FKA50EF35BEE338E3D 
  FOREIGN KEY (I2B2PARSE_EVENT_MAPPER_ID) 
  REFERENCES I2B2PARSE_EVENT_MAPPER (ID)
  ENABLE VALIDATE
);


--
-- QT_QUERY_INSTANCE  (Table) 
--
CREATE TABLE QT_QUERY_INSTANCE
(
  QUERY_INSTANCE_ID  NUMBER(5),
  QUERY_MASTER_ID    NUMBER(5),
  USER_ID            VARCHAR2(50)          NOT NULL,
  GROUP_ID           VARCHAR2(50)          NOT NULL,
  BATCH_MODE         VARCHAR2(50),
  START_DATE         DATE                       NOT NULL,
  END_DATE           DATE,
  DELETE_FLAG        VARCHAR2(3),
  STATUS_TYPE_ID     NUMBER(5),
  MESSAGE            CLOB,
  PRIMARY KEY
  (QUERY_INSTANCE_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_QI_MID 
  FOREIGN KEY (QUERY_MASTER_ID) 
  REFERENCES QT_QUERY_MASTER (QUERY_MASTER_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_QI_STID 
  FOREIGN KEY (STATUS_TYPE_ID) 
  REFERENCES QT_QUERY_STATUS_TYPE (STATUS_TYPE_ID)
  ENABLE VALIDATE
);


--
-- QT_QUERY_RESULT_INSTANCE  (Table) 
--
CREATE TABLE QT_QUERY_RESULT_INSTANCE
(
  RESULT_INSTANCE_ID  NUMBER(5),
  QUERY_INSTANCE_ID   NUMBER(5),
  RESULT_TYPE_ID      NUMBER(3)                 NOT NULL,
  SET_SIZE            NUMBER(10),
  START_DATE          DATE                      NOT NULL,
  END_DATE            DATE,
  DELETE_FLAG         VARCHAR2(3),
  STATUS_TYPE_ID      NUMBER(3)                 NOT NULL,
  MESSAGE             CLOB,
  DESCRIPTION         VARCHAR2(200),
  REAL_SET_SIZE       NUMBER(10),
  OBFUSC_METHOD       VARCHAR2(500),
  PRIMARY KEY
  (RESULT_INSTANCE_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_QRI_RID 
  FOREIGN KEY (QUERY_INSTANCE_ID) 
  REFERENCES QT_QUERY_INSTANCE (QUERY_INSTANCE_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_QRI_RTID 
  FOREIGN KEY (RESULT_TYPE_ID) 
  REFERENCES QT_QUERY_RESULT_TYPE (RESULT_TYPE_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_QRI_STID 
  FOREIGN KEY (STATUS_TYPE_ID) 
  REFERENCES QT_QUERY_STATUS_TYPE (STATUS_TYPE_ID)
  ENABLE VALIDATE
);


--
-- QT_XML_RESULT  (Table) 
--
CREATE TABLE QT_XML_RESULT
(
  XML_RESULT_ID       NUMBER(5),
  RESULT_INSTANCE_ID  NUMBER(5),
  XML_VALUE           CLOB,
  PRIMARY KEY
  (XML_RESULT_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_XMLR_RIID 
  FOREIGN KEY (RESULT_INSTANCE_ID) 
  REFERENCES QT_QUERY_RESULT_INSTANCE (RESULT_INSTANCE_ID)
  ENABLE VALIDATE
);


--
-- QUERY  (Table) 
--
CREATE TABLE QUERY
(
  ID                        NUMBER(19)          NOT NULL,
  VERSION                   NUMBER(19)          NOT NULL,
  IS_SUB_CONSTRAINT_EXISTS  NUMBER(1)           NOT NULL,
  QUERY_NAME                VARCHAR2(255 CHAR)  NOT NULL,
  SUB_QUERY_CONSTRAINT_ID   NUMBER(19)          NOT NULL,
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE,
  CONSTRAINT FK66F18C8F711A759 
  FOREIGN KEY (SUB_QUERY_CONSTRAINT_ID) 
  REFERENCES SUB_QUERY_CONSTRAINT (ID)
  ENABLE VALIDATE
);


--
-- QT_IDX_QI_MSTARTID  (Index) 
--
CREATE INDEX QT_IDX_QI_MSTARTID ON QT_QUERY_INSTANCE
(QUERY_MASTER_ID, START_DATE);


--
-- QT_IDX_QI_UGID  (Index) 
--
CREATE INDEX QT_IDX_QI_UGID ON QT_QUERY_INSTANCE
(USER_ID, GROUP_ID);


--
-- QT_PATIENT_ENC_COLLECTION  (Table) 
--
CREATE TABLE QT_PATIENT_ENC_COLLECTION
(
  PATIENT_ENC_COLL_ID  NUMBER(10),
  RESULT_INSTANCE_ID   NUMBER(5),
  SET_INDEX            NUMBER(10),
  PATIENT_NUM          NUMBER(10),
  ENCOUNTER_NUM        NUMBER(10),
  PRIMARY KEY
  (PATIENT_ENC_COLL_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_PESC_RI 
  FOREIGN KEY (RESULT_INSTANCE_ID) 
  REFERENCES QT_QUERY_RESULT_INSTANCE (RESULT_INSTANCE_ID)
  ENABLE VALIDATE
);


--
-- QT_PATIENT_SET_COLLECTION  (Table) 
--
CREATE TABLE QT_PATIENT_SET_COLLECTION
(
  PATIENT_SET_COLL_ID  NUMBER(10),
  RESULT_INSTANCE_ID   NUMBER(5),
  SET_INDEX            NUMBER(10),
  PATIENT_NUM          NUMBER(10),
  PRIMARY KEY
  (PATIENT_SET_COLL_ID)
  ENABLE VALIDATE,
  CONSTRAINT QT_FK_PSC_RI 
  FOREIGN KEY (RESULT_INSTANCE_ID) 
  REFERENCES QT_QUERY_RESULT_INSTANCE (RESULT_INSTANCE_ID)
  ENABLE VALIDATE
);


--
-- QT_PATIENT_COLLECTION_IDX1  (Index) 
--
CREATE INDEX QT_PATIENT_COLLECTION_IDX1 ON QT_PATIENT_SET_COLLECTION
(RESULT_INSTANCE_ID, PATIENT_NUM);


--
-- TR_QT_PSC_PSC_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TR_QT_PSC_PSC_ID 
   before insert ON QT_PATIENT_SET_COLLECTION 
   for each row
begin  
   if inserting then 
      if :NEW."PATIENT_SET_COLL_ID" is null then 
         select QT_SQ_QPR_PCID.nextval into :NEW."PATIENT_SET_COLL_ID" from dual; 
      end if; 
   end if; 
end;
/


GRANT ALTER, DELETE, INDEX, INSERT, REFERENCES, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON "BIN$GdNH5fwn8Y7gUAB/AQAGCQ==$0" TO BIOMART_USER;

GRANT SELECT ON QT_QUERY_MASTER TO CDM_ADMIN;

GRANT DELETE, INSERT, SELECT, UPDATE ON ARCHIVE_OBSERVATION_FACT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON ASYNC_JOB TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CDM_COHORT_MASTER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CODE_LOOKUP TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CONCEPT_COUNTS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CONCEPT_DIMENSION TO TM_CZ;

GRANT SELECT ON CONCEPT_ID TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON DATAMART_REPORT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON DX TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON ENCOUNTER_MAPPING TO TM_CZ;

GRANT SELECT ON ENCOUNTER_NUM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON EVENT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON GLOBAL_TEMP_FACT_PARAM_TABLE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON GLOBAL_TEMP_PARAM_TABLE TO TM_CZ;

GRANT SELECT ON HIBERNATE_SEQUENCE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON HILOSEQUENCES TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON I2B2MAPPER_PARSE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON I2B2PARSE_DOMAIN1111 TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON I2B2PARSE_EVENT_MAPPER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON I2B2PATIENT_SET TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON I2B2REQUEST_ITEM_DETAILS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON I2B2REQUEST_PANEL TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON ITEM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON JMS_ROLES TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON JMS_SUBSCRIPTIONS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON JMS_USERS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON MASTER_QUERY_GLOBAL_TEMP TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON META_DATA_MAPPER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON MODIFIER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON MODIFIER_DIMENSION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON MODIFIER_METADATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON MODIFIER_VALUE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON OBSERVATION_FACT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON OBSERVATION_FACT_TEMP TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON PANEL TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON PATIENT_DIMENSION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON PATIENT_MAPPING TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON PATIENT_TRIAL TO TM_CZ;

GRANT SELECT ON PROTOCOL_ID_SEQ TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON PROVIDER_DIMENSION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_ANALYSIS_PLUGIN TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_ANALYSIS_PLUGIN_RESULT_TYPE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_BREAKDOWN_PATH TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_PDO_QUERY_MASTER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_PRIVILEGE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_QUERY_MASTER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_QUERY_RESULT_TYPE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_QUERY_STATUS_TYPE TO TM_CZ;

GRANT SELECT ON QT_SQ_PQM_QMID TO TM_CZ;

GRANT SELECT ON QT_SQ_QI_QIID TO TM_CZ;

GRANT SELECT ON QT_SQ_QM_QMID TO TM_CZ;

GRANT SELECT ON QT_SQ_QPER_PECID TO TM_CZ;

GRANT SELECT ON QT_SQ_QPR_PCID TO TM_CZ;

GRANT SELECT ON QT_SQ_QRI_QRIID TO TM_CZ;

GRANT SELECT ON QT_SQ_QR_QRID TO TM_CZ;

GRANT SELECT ON QT_SQ_QS_QSID TO TM_CZ;

GRANT SELECT ON QT_SQ_QXR_XRID TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QUERY_GLOBAL_TEMP TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON RESPONSE TO TM_CZ;

GRANT SELECT ON SEQ_ENCOUNTER_NUM TO TM_CZ;

GRANT SELECT ON SEQ_PATIENT_NUM TO TM_CZ;

GRANT SELECT ON SEQ_SUBJECT_REFERENCE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON SET_TYPE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON SET_UPLOAD_STATUS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON SOURCE_MASTER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON SPAN TO TM_CZ;

GRANT SELECT ON SQ_UPLOADSTATUS_UPLOADID TO TM_CZ;

GRANT SELECT ON SQ_UP_ENCDIM_ENCOUNTERNUM TO TM_CZ;

GRANT SELECT ON SQ_UP_PATDIM_PATIENTNUM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON SUB_QUERY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON SUB_QUERY_CONSTRAINT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON TARGET_TBL_MAPPER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON UNIT_MAPPER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON UPLOAD_STATUS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON VISIT_DIMENSION TO TM_CZ;

GRANT SELECT ON QT_QUERY_INSTANCE TO CDM_ADMIN;

GRANT SELECT ON QT_QUERY_RESULT_INSTANCE TO CDM_ADMIN WITH GRANT OPTION;

GRANT DELETE, INSERT, SELECT, UPDATE ON CDMMAPPER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON I2B2PARSERS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_QUERY_INSTANCE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_QUERY_RESULT_INSTANCE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_XML_RESULT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QUERY TO TM_CZ;

GRANT SELECT ON QT_PATIENT_SET_COLLECTION TO CDM_ADMIN;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_PATIENT_ENC_COLLECTION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON QT_PATIENT_SET_COLLECTION TO TM_CZ;