--
-- Create Schema Script 
--   Database Version          : 11.2.0.1.0 
--   Database Compatible Level : 11.2.0.0.0 
--   Script Compatible Level   : 11.2.0.0.0 
--   Toad Version              : 12.1.0.22 
--   DB Connect String         : 10.118.255.5:1521/ORCL5 
--   Schema                    : BIOMART 
--   Script Created by         : BIOMART_USER 
--   Script Created at         : 7/17/2015 3:15:09 PM 
--   Physical Location         :  
--   Notes                     :  
--

-- Object Counts: 
--   Functions: 16      Lines of Code: 449 
--   Indexes: 110       Columns: 146        
--   Materialized Views: 2 
--   Object Privileges: 180 
--   Procedures: 1      Lines of Code: 91 
--   Sequences: 5 
--   Tables: 90         Columns: 1304       Constraints: 239    
--   Triggers: 56 
--   Views: 36          Columns: 339        


--
-- BIO_AD_HOC_PROPERTY  (Table) 
--
CREATE TABLE BIO_AD_HOC_PROPERTY
(
  AD_HOC_PROPERTY_ID  NUMBER(22)                NOT NULL,
  BIO_DATA_ID         NUMBER(22),
  PROPERTY_KEY        VARCHAR2(100 BYTE),
  PROPERTY_VALUE      VARCHAR2(4000 BYTE),
  CONSTRAINT BIO_AD_HOC_PROPERTY_PK
  PRIMARY KEY
  (AD_HOC_PROPERTY_ID)
  ENABLE VALIDATE
);


--
-- BIO_ANALYSIS_ATTRIBUTE  (Table) 
--
CREATE TABLE BIO_ANALYSIS_ATTRIBUTE
(
  STUDY_ID                   VARCHAR2(255),
  BIO_ASSAY_ANALYSIS_ID      NUMBER(18)         NOT NULL,
  TERM_ID                    NUMBER(22),
  SOURCE_CD                  VARCHAR2(255),
  BIO_ANALYSIS_ATTRIBUTE_ID  NUMBER             NOT NULL
);


--
-- BIO_ANALYSIS_ATTRIBUTE_LINEAGE  (Table) 
--
CREATE TABLE BIO_ANALYSIS_ATTRIBUTE_LINEAGE
(
  BIO_ANALYSIS_ATT_LINEAGE_ID  NUMBER           NOT NULL,
  BIO_ANALYSIS_ATTRIBUTE_ID    NUMBER           NOT NULL,
  ANCESTOR_TERM_ID             NUMBER           NOT NULL,
  ANCESTOR_SEARCH_KEYWORD_ID   NUMBER           NOT NULL
);


--
-- BIO_ASSAY_ANALYSIS_EQTL  (Table) 
--
CREATE TABLE BIO_ASSAY_ANALYSIS_EQTL
(
  BIO_ASY_ANALYSIS_EQTL_ID  NUMBER(22)          NOT NULL,
  BIO_ASSAY_ANALYSIS_ID     NUMBER(22)          NOT NULL,
  RS_ID                     NVARCHAR2(50),
  GENE                      VARCHAR2(50),
  P_VALUE_CHAR              VARCHAR2(100),
  P_VALUE                   BINARY_DOUBLE,
  LOG_P_VALUE               BINARY_DOUBLE,
  CIS_TRANS                 VARCHAR2(10),
  DISTANCE_FROM_GENE        VARCHAR2(10),
  ETL_ID                    NUMBER(18),
  EXT_DATA                  VARCHAR2(4000)
);


--
-- BIO_ASSAY_ANALYSIS_EXT  (Table) 
--
CREATE TABLE BIO_ASSAY_ANALYSIS_EXT
(
  BIO_ASSAY_ANALYSIS_EXT_ID  NUMBER(18),
  BIO_ASSAY_ANALYSIS_ID      NUMBER(18),
  VENDOR                     VARCHAR2(500),
  VENDOR_TYPE                VARCHAR2(500),
  GENOME_VERSION             VARCHAR2(500),
  TISSUE                     VARCHAR2(500),
  CELL_TYPE                  VARCHAR2(500),
  POPULATION                 VARCHAR2(500),
  RESEARCH_UNIT              VARCHAR2(500),
  SAMPLE_SIZE                VARCHAR2(500),
  MODEL_NAME                 VARCHAR2(100),
  MODEL_DESC                 VARCHAR2(500)
);


--
-- BIO_ASSAY_ANALYSIS_GWAS  (Table) 
--
CREATE TABLE BIO_ASSAY_ANALYSIS_GWAS
(
  BIO_ASY_ANALYSIS_GWAS_ID  NUMBER(18)          NOT NULL,
  BIO_ASSAY_ANALYSIS_ID     NUMBER(18)          NOT NULL,
  RS_ID                     NVARCHAR2(50),
  P_VALUE_CHAR              VARCHAR2(100),
  P_VALUE                   BINARY_DOUBLE,
  LOG_P_VALUE               BINARY_DOUBLE,
  ETL_ID                    NUMBER(18),
  EXT_DATA                  VARCHAR2(4000)
);


--
-- BIO_ASSAY_DATA_ANNOTATION  (Table) 
--
CREATE TABLE BIO_ASSAY_DATA_ANNOTATION
(
  BIO_ASSAY_FEATURE_GROUP_ID  NUMBER(18),
  BIO_MARKER_ID               NUMBER(18)        NOT NULL,
  DATA_TABLE                  CHAR(5)
);


--
-- BIO_ASSAY_FEATURE_GROUP  (Table) 
--
CREATE TABLE BIO_ASSAY_FEATURE_GROUP
(
  BIO_ASSAY_FEATURE_GROUP_ID  NUMBER(18)        NOT NULL,
  FEATURE_GROUP_NAME          VARCHAR2(100) NOT NULL,
  FEATURE_GROUP_TYPE          VARCHAR2(50) NOT NULL,
  CONSTRAINT BIO_ASY_FEATURE_GRP_PK
  PRIMARY KEY
  (BIO_ASSAY_FEATURE_GROUP_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_PLATFORM  (Table) 
--
CREATE TABLE BIO_ASSAY_PLATFORM
(
  BIO_ASSAY_PLATFORM_ID  NUMBER(18)             NOT NULL,
  PLATFORM_NAME          NVARCHAR2(200),
  PLATFORM_VERSION       NVARCHAR2(200),
  PLATFORM_DESCRIPTION   NVARCHAR2(2000),
  PLATFORM_ARRAY         VARCHAR2(50),
  PLATFORM_ACCESSION     VARCHAR2(20),
  PLATFORM_ORGANISM      VARCHAR2(200),
  PLATFORM_VENDOR        VARCHAR2(200),
  PLATFORM_TYPE          VARCHAR2(255),
  PLATFORM_TECHNOLOGY    NVARCHAR2(200),
  CONSTRAINT BIO_ASSAY_PLATFORM_PK
  PRIMARY KEY
  (BIO_ASSAY_PLATFORM_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASY_ANALYSIS_DATA_EXT  (Table) 
--
CREATE TABLE BIO_ASY_ANALYSIS_DATA_EXT
(
  BIO_ASY_ANALYSIS_DATA_ID  NUMBER(22),
  EXT_TYPE                  VARCHAR2(20),
  EXT_DATA                  VARCHAR2(4000)
);


--
-- BIO_ASY_ANALYSIS_DATA_IDX  (Table) 
--
CREATE TABLE BIO_ASY_ANALYSIS_DATA_IDX
(
  BIO_ASY_ANALYSIS_DATA_IDX_ID  NUMBER(18),
  EXT_TYPE                      VARCHAR2(100),
  FIELD_NAME                    VARCHAR2(100),
  FIELD_IDX                     NUMBER(18),
  DISPLAY_NAME                  VARCHAR2(100),
  DISPLAY_IDX                   NUMBER(38)
);


--
-- BIO_ASY_ANALYSIS_EQTL_TOP50  (Table) 
--
CREATE TABLE BIO_ASY_ANALYSIS_EQTL_TOP50
(
  BIO_ASSAY_ANALYSIS_ID  NUMBER(18)             NOT NULL,
  ANALYSIS               VARCHAR2(500),
  CHROM                  VARCHAR2(4),
  POS                    NUMBER(10),
  RSGENE                 VARCHAR2(200),
  RSID                   VARCHAR2(50),
  PVALUE                 BINARY_DOUBLE,
  LOGPVALUE              BINARY_DOUBLE,
  EXTDATA                VARCHAR2(4000),
  RNUM                   NUMBER
);


--
-- BIO_ASY_ANALYSIS_GWAS_TOP50  (Table) 
--
CREATE TABLE BIO_ASY_ANALYSIS_GWAS_TOP50
(
  BIO_ASSAY_ANALYSIS_ID  NUMBER(18)             NOT NULL,
  ANALYSIS               VARCHAR2(500),
  CHROM                  VARCHAR2(4),
  POS                    NUMBER(10),
  RSGENE                 VARCHAR2(200),
  RSID                   VARCHAR2(50),
  PVALUE                 BINARY_DOUBLE,
  LOGPVALUE              BINARY_DOUBLE,
  EXTDATA                VARCHAR2(4000),
  RNUM                   NUMBER
);


--
-- BIO_ASY_ANALYSIS_PLTFM  (Table) 
--
CREATE TABLE BIO_ASY_ANALYSIS_PLTFM
(
  BIO_ASY_ANALYSIS_PLTFM_ID  NUMBER(18)         NOT NULL,
  PLATFORM_NAME              NVARCHAR2(200),
  PLATFORM_VERSION           NVARCHAR2(200),
  PLATFORM_DESCRIPTION       NVARCHAR2(1000),
  CONSTRAINT BIO_ASSAY_ANALYSIS_PLATFORM_PK
  PRIMARY KEY
  (BIO_ASY_ANALYSIS_PLTFM_ID)
  ENABLE VALIDATE
);


--
-- BIO_CGDCP_DATA  (Table) 
--
CREATE TABLE BIO_CGDCP_DATA
(
  EVIDENCE_CODE             NVARCHAR2(200),
  NEGATION_INDICATOR        CHAR(1 CHAR),
  CELL_LINE_ID              NUMBER(18),
  NCI_DISEASE_CONCEPT_CODE  NVARCHAR2(200),
  NCI_ROLE_CODE             NVARCHAR2(200),
  NCI_DRUG_CONCEPT_CODE     NVARCHAR2(200),
  BIO_DATA_ID               NUMBER(18)          NOT NULL,
  CONSTRAINT BIO_CANCER_GENE_CURATION_FACT_
  PRIMARY KEY
  (BIO_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_CLINICAL_TRIAL_DESIGN  (Table) 
--
CREATE TABLE BIO_CLINICAL_TRIAL_DESIGN
(
  REF_ID                          VARCHAR2(4000),
  REF_RECORD_ID                   VARCHAR2(4000),
  REF_BACK_REFERENCE              VARCHAR2(4000),
  REF_ARTICLE_PMID                VARCHAR2(4000),
  REF_PROTOCOL_ID                 VARCHAR2(4000),
  REF_TITLE                       VARCHAR2(4000),
  STUDY_TYPE                      VARCHAR2(4000),
  COMMON_NAME                     VARCHAR2(4000),
  ICD10                           VARCHAR2(4000),
  MESH                            VARCHAR2(4000),
  DISEASE_TYPE                    VARCHAR2(4000),
  PHYSIOLOGY_NAME                 VARCHAR2(4000),
  TRIAL_STATUS                    VARCHAR2(4000),
  TRIAL_PHASE                     VARCHAR2(4000),
  NATURE_OF_TRIAL                 VARCHAR2(4000),
  RANDOMIZATION                   VARCHAR2(4000),
  BLINDED_TRIAL                   VARCHAR2(4000),
  TRIAL_TYPE                      VARCHAR2(4000),
  RUN_N_PERIOD                    VARCHAR2(4000),
  TREATMENT_PERIOD                VARCHAR2(4000),
  WASHOUT_PERIOD                  VARCHAR2(4000),
  OPEN_LABEL_EXTENSION            VARCHAR2(4000),
  SPONSOR                         VARCHAR2(4000),
  TRIAL_NBR_OF_PATIENTS_STUDIED   VARCHAR2(4000),
  SOURCE_TYPE                     VARCHAR2(4000),
  TRIAL_AGE                       VARCHAR2(4000),
  DISEASE_SEVERITY                VARCHAR2(4000),
  DIFFICULT_TO_TREAT              VARCHAR2(4000),
  ASTHMA_DIAGNOSIS                VARCHAR2(4000),
  INHALED_STEROID_DOSE            VARCHAR2(4000),
  LABA                            VARCHAR2(4000),
  OCS                             VARCHAR2(4000),
  XOLAIR                          VARCHAR2(4000),
  LTRA_INHIBITORS                 VARCHAR2(4000),
  ASTHMA_PHENOTYPE                VARCHAR2(4000),
  FEV1                            VARCHAR2(4000),
  FEV1_REVERSIBILITY              VARCHAR2(4000),
  TLC                             VARCHAR2(4000),
  FEV1_FVC                        VARCHAR2(4000),
  FVC                             VARCHAR2(4000),
  DLCO                            VARCHAR2(4000),
  SGRQ                            VARCHAR2(4000),
  HRCT                            VARCHAR2(4000),
  BIOPSY                          VARCHAR2(4000),
  DYSPNEA_ON_EXERTION             VARCHAR2(4000),
  CONCOMITANT_MED                 VARCHAR2(4000),
  TRIAL_SMOKERS_PCT               VARCHAR2(4000),
  TRIAL_FORMER_SMOKERS_PCT        VARCHAR2(4000),
  TRIAL_NEVER_SMOKERS_PCT         VARCHAR2(4000),
  TRIAL_PACK_YEARS                VARCHAR2(4000),
  EXCLUSION_CRITERIA              VARCHAR2(4000),
  MINIMAL_SYMPTOMS                VARCHAR2(4000),
  RESCUE_MEDICATION_USE           VARCHAR2(4000),
  CONTROL_DETAILS                 VARCHAR2(4000),
  BLINDING_PROCEDURE              VARCHAR2(4000),
  NUMBER_OF_ARMS                  VARCHAR2(4000),
  DESCRIPTION                     VARCHAR2(4000),
  ARM                             VARCHAR2(4000),
  ARM_NBR_OF_PATIENTS_STUDIED     VARCHAR2(4000),
  ARM_CLASSIFICATION_TYPE         VARCHAR2(4000),
  ARM_CLASSIFICATION_VALUE        VARCHAR2(4000),
  ARM_ASTHMA_DURATION             VARCHAR2(4000),
  ARM_GEOGRAPHIC_REGION           VARCHAR2(4000),
  ARM_AGE                         VARCHAR2(4000),
  ARM_GENDER                      VARCHAR2(4000),
  ARM_SMOKERS_PCT                 VARCHAR2(4000),
  ARM_FORMER_SMOKERS_PCT          VARCHAR2(4000),
  ARM_NEVER_SMOKERS_PCT           VARCHAR2(4000),
  ARM_PACK_YEARS                  VARCHAR2(4000),
  MINORITY_PARTICIPATION          VARCHAR2(4000),
  BASELINE_SYMPTOM_SCORE          VARCHAR2(4000),
  BASELINE_RESCUE_MEDICATION_USE  VARCHAR2(4000),
  CLINICAL_VARIABLE               VARCHAR2(4000),
  CLINICAL_VARIABLE_PCT           VARCHAR2(4000),
  CLINICAL_VARIABLE_VALUE         VARCHAR2(4000),
  PRIOR_MED_DRUG_NAME             VARCHAR2(4000),
  PRIOR_MED_PCT                   VARCHAR2(4000),
  PRIOR_MED_VALUE                 VARCHAR2(4000),
  BIOMARKER_NAME                  VARCHAR2(4000),
  BIOMARKER_PCT                   VARCHAR2(4000),
  BIOMARKERVALUE                  VARCHAR2(4000),
  CELLINFO_TYPE                   VARCHAR2(4000),
  CELLINFO_COUNT                  VARCHAR2(4000),
  CELLINFO_SOURCE                 VARCHAR2(4000),
  PULMONARY_PATHOLOGY_NAME        VARCHAR2(4000),
  PULMPATH_PATIENT_PCT            VARCHAR2(4000),
  PULMPATH_VALUE_UNIT             VARCHAR2(4000),
  PULMPATH_METHOD                 VARCHAR2(4000),
  RUNIN_OCS                       VARCHAR2(4000),
  RUNIN_ICS                       VARCHAR2(4000),
  RUNIN_LABA                      VARCHAR2(4000),
  RUNIN_LTRA                      VARCHAR2(4000),
  RUNIN_CORTICOSTEROIDS           VARCHAR2(4000),
  RUNIN_ANTI_FIBROTICS            VARCHAR2(4000),
  RUNIN_IMMUNOSUPPRESSIVE         VARCHAR2(4000),
  RUNIN_CYTOTOXIC                 VARCHAR2(4000),
  RUNIN_DESCRIPTION               VARCHAR2(4000),
  TRTMT_OCS                       VARCHAR2(4000),
  TRTMT_ICS                       VARCHAR2(4000),
  TRTMT_LABA                      VARCHAR2(4000),
  TRTMT_LTRA                      VARCHAR2(4000),
  TRTMT_CORTICOSTEROIDS           VARCHAR2(4000),
  TRTMT_ANTI_FIBROTICS            VARCHAR2(4000),
  TRTMT_IMMUNOSUPPRESSIVE         VARCHAR2(4000),
  TRTMT_CYTOTOXIC                 VARCHAR2(4000),
  TRTMT_DESCRIPTION               VARCHAR2(4000),
  DRUG_INHIBITOR_COMMON_NAME      VARCHAR2(4000),
  DRUG_INHIBITOR_STANDARD_NAME    VARCHAR2(4000),
  DRUG_INHIBITOR_CAS_ID           VARCHAR2(4000),
  DRUG_INHIBITOR_DOSE             VARCHAR2(4000),
  DRUG_INHIBITOR_ROUTE_OF_ADMIN   VARCHAR2(4000),
  DRUG_INHIBITOR_TRTMT_REGIME     VARCHAR2(4000),
  COMPARATOR_NAME                 VARCHAR2(4000),
  COMPARATOR_DOSE                 VARCHAR2(4000),
  COMPARATOR_TIME_PERIOD          VARCHAR2(4000),
  COMPARATOR_ROUTE_OF_ADMIN       VARCHAR2(4000),
  TREATMENT_REGIME                VARCHAR2(4000),
  PLACEBO                         VARCHAR2(4000),
  EXPERIMENT_DESCRIPTION          VARCHAR2(4000),
  PRIMARY_ENDPOINT_TYPE           VARCHAR2(4000),
  PRIMARY_ENDPOINT_DEFINITION     VARCHAR2(4000),
  PRIMARY_ENDPOINT_TIME_PERIOD    VARCHAR2(4000),
  PRIMARY_ENDPOINT_CHANGE         VARCHAR2(4000),
  PRIMARY_ENDPOINT_P_VALUE        VARCHAR2(4000),
  PRIMARY_ENDPOINT_STAT_TEST      VARCHAR2(4000),
  SECONDARY_TYPE                  VARCHAR2(4000),
  SECONDARY_TYPE_DEFINITION       VARCHAR2(4000),
  SECONDARY_TYPE_TIME_PERIOD      VARCHAR2(4000),
  SECONDARY_TYPE_CHANGE           VARCHAR2(4000),
  SECONDARY_TYPE_P_VALUE          VARCHAR2(4000),
  SECONDARY_TYPE_STAT_TEST        VARCHAR2(4000),
  CLINICAL_VARIABLE_NAME          VARCHAR2(4000),
  PCT_CHANGE_FROM_BASELINE        VARCHAR2(4000),
  ABS_CHANGE_FROM_BASELINE        VARCHAR2(4000),
  RATE_OF_CHANGE_FROM_BASELINE    VARCHAR2(4000),
  AVERAGE_OVER_TREATMENT_PERIOD   VARCHAR2(4000),
  WITHIN_GROUP_CHANGES            VARCHAR2(4000),
  STAT_MEASURE_P_VALUE            VARCHAR2(4000),
  DEFINITION_OF_THE_EVENT         VARCHAR2(4000),
  NUMBER_OF_EVENTS                VARCHAR2(4000),
  EVENT_RATE                      VARCHAR2(4000),
  TIME_TO_EVENT                   VARCHAR2(4000),
  EVENT_PCT_REDUCTION             VARCHAR2(4000),
  EVENT_P_VALUE                   VARCHAR2(4000),
  EVENT_DESCRIPTION               VARCHAR2(4000),
  DISCONTINUATION_RATE            VARCHAR2(4000),
  RESPONSE_RATE                   VARCHAR2(4000),
  DOWNSTREAM_SIGNALING_EFFECTS    VARCHAR2(4000),
  BENEFICIAL_EFFECTS              VARCHAR2(4000),
  ADVERSE_EFFECTS                 VARCHAR2(4000),
  PK_PD_PARAMETER                 VARCHAR2(4000),
  PK_PD_VALUE                     VARCHAR2(4000),
  EFFECT_DESCRIPTION              VARCHAR2(4000),
  BIOMOLECULE_NAME                VARCHAR2(4000),
  BIOMOLECULE_ID                  VARCHAR2(4000),
  BIOMOLECULE_TYPE                VARCHAR2(4000),
  BIOMARKER                       VARCHAR2(4000),
  BIOMARKER_TYPE                  VARCHAR2(4000),
  BASELINE_EXPR_PCT               VARCHAR2(4000),
  BASELINE_EXPR_NUMBER            VARCHAR2(4000),
  BASELINE_EXPR_VALUE_FOLD_MEAN   VARCHAR2(4000),
  BASELINE_EXPR_SD                VARCHAR2(4000),
  BASELINE_EXPR_SEM               VARCHAR2(4000),
  BASELINE_EXPR_UNIT              VARCHAR2(4000),
  EXPR_AFTER_TRTMT_PCT            VARCHAR2(4000),
  EXPR_AFTER_TRTMT_NUMBER         VARCHAR2(4000),
  EXPR_AFTERTRTMT_VALUEFOLD_MEAN  VARCHAR2(4000),
  EXPR_AFTER_TRTMT_SD             VARCHAR2(4000),
  EXPR_AFTER_TRTMT_SEM            VARCHAR2(4000),
  EXPR_AFTER_TRTMT_UNIT           VARCHAR2(4000),
  EXPR_CHG_SOURCE_TYPE            VARCHAR2(4000),
  EXPR_CHG_TECHNIQUE              VARCHAR2(4000),
  EXPR_CHG_DESCRIPTION            VARCHAR2(4000),
  CLINICAL_CORRELATION            VARCHAR2(4000),
  STATISTICAL_TEST                VARCHAR2(4000),
  STATISTICAL_COEFFICIENT_VALUE   VARCHAR2(4000),
  STATISTICAL_TEST_P_VALUE        VARCHAR2(4000),
  STATISTICAL_TEST_DESCRIPTION    VARCHAR2(4000)
);


--
-- BIO_COMPOUND  (Table) 
--
CREATE TABLE BIO_COMPOUND
(
  BIO_COMPOUND_ID   NUMBER(18)                  NOT NULL,
  CNTO_NUMBER       NVARCHAR2(200),
  JNJ_NUMBER        NVARCHAR2(200),
  CAS_REGISTRY      NVARCHAR2(400),
  CODE_NAME         NVARCHAR2(300),
  GENERIC_NAME      NVARCHAR2(200),
  BRAND_NAME        NVARCHAR2(200),
  CHEMICAL_NAME     NVARCHAR2(1000),
  MECHANISM         NVARCHAR2(400),
  PRODUCT_CATEGORY  NVARCHAR2(200),
  DESCRIPTION       NVARCHAR2(1000),
  ETL_ID_RETIRED    NUMBER(18),
  ETL_ID            VARCHAR2(50),
  SOURCE_CD         NVARCHAR2(100),
  CONSTRAINT COMPOUNDDIM_PK
  PRIMARY KEY
  (BIO_COMPOUND_ID)
  ENABLE VALIDATE
);


--
-- BIO_CONCEPT_CODE  (Table) 
--
CREATE TABLE BIO_CONCEPT_CODE
(
  BIO_CONCEPT_CODE     NVARCHAR2(200),
  CODE_NAME            VARCHAR2(200),
  CODE_DESCRIPTION     NVARCHAR2(1000),
  CODE_TYPE_NAME       NVARCHAR2(200),
  BIO_CONCEPT_CODE_ID  NUMBER(18)               NOT NULL,
  CONSTRAINT BIO_CONCEPT_CODE_PK
  PRIMARY KEY
  (BIO_CONCEPT_CODE_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_CONCEPT_CODE_UK
  UNIQUE (BIO_CONCEPT_CODE, CODE_TYPE_NAME)
  ENABLE VALIDATE
);

COMMENT ON TABLE BIO_CONCEPT_CODE IS 'this table is used to store concept types organized around a common category in the biomart';

COMMENT ON COLUMN BIO_CONCEPT_CODE.BIO_CONCEPT_CODE IS 'should be an upper case code that serves as the primary key';

COMMENT ON COLUMN BIO_CONCEPT_CODE.CODE_NAME IS 'display value for UI purposes';

COMMENT ON COLUMN BIO_CONCEPT_CODE.CODE_DESCRIPTION IS 'longer descriptive name for the code';

COMMENT ON COLUMN BIO_CONCEPT_CODE.CODE_TYPE_NAME IS 'serves as a category to group related concepts which should be uppercase';

COMMENT ON COLUMN BIO_CONCEPT_CODE.BIO_CONCEPT_CODE_ID IS 'table primary key needed for hibernate purposes (use the code as the reference)';


--
-- BIO_CONTENT_REPOSITORY  (Table) 
--
CREATE TABLE BIO_CONTENT_REPOSITORY
(
  BIO_CONTENT_REPO_ID  NUMBER(18)               NOT NULL,
  LOCATION             NVARCHAR2(510),
  ACTIVE_Y_N           CHAR(1 CHAR),
  REPOSITORY_TYPE      NVARCHAR2(200)           NOT NULL,
  LOCATION_TYPE        NVARCHAR2(200),
  CONSTRAINT EXTERNAL_FILE_REPOSITORY_PK
  PRIMARY KEY
  (BIO_CONTENT_REPO_ID)
  ENABLE VALIDATE
);


--
-- BIO_CURATION_DATASET  (Table) 
--
CREATE TABLE BIO_CURATION_DATASET
(
  BIO_CURATION_DATASET_ID    NUMBER(18)         NOT NULL,
  BIO_ASY_ANALYSIS_PLTFM_ID  NUMBER(18),
  BIO_SOURCE_IMPORT_ID       NUMBER(18),
  BIO_CURATION_TYPE          NVARCHAR2(200)     NOT NULL,
  CREATE_DATE                DATE,
  CREATOR                    NUMBER(18),
  BIO_CURATION_NAME          VARCHAR2(500),
  DATA_TYPE                  VARCHAR2(100),
  CONSTRAINT BIO_EXTERNAL_ANALYSIS_PK
  PRIMARY KEY
  (BIO_CURATION_DATASET_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_EXT_ANL_PLTFM_FK 
  FOREIGN KEY (BIO_ASY_ANALYSIS_PLTFM_ID) 
  REFERENCES BIO_ASY_ANALYSIS_PLTFM (BIO_ASY_ANALYSIS_PLTFM_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_ATTRIBUTE  (Table) 
--
CREATE TABLE BIO_DATA_ATTRIBUTE
(
  BIO_DATA_ATTRIBUTE_ID  NUMBER(18)             NOT NULL,
  PROPERTY_CODE          NVARCHAR2(200)         NOT NULL,
  PROPERTY_VALUE         NVARCHAR2(200),
  BIO_DATA_ID            NUMBER(18)             NOT NULL,
  PROPERTY_UNIT          NVARCHAR2(100),
  CONSTRAINT BIO_DATA_ATTR_PK
  PRIMARY KEY
  (BIO_DATA_ATTRIBUTE_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_COMPOUND  (Table) 
--
CREATE TABLE BIO_DATA_COMPOUND
(
  BIO_DATA_ID      NUMBER(18)                   NOT NULL,
  BIO_COMPOUND_ID  NUMBER(18)                   NOT NULL,
  ETL_SOURCE       VARCHAR2(100),
  CONSTRAINT BIO_DATA_COMPOUND_PK
  PRIMARY KEY
  (BIO_DATA_ID, BIO_COMPOUND_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_DF_CMP_FK 
  FOREIGN KEY (BIO_COMPOUND_ID) 
  REFERENCES BIO_COMPOUND (BIO_COMPOUND_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_CORREL_DESCR  (Table) 
--
CREATE TABLE BIO_DATA_CORREL_DESCR
(
  BIO_DATA_CORREL_DESCR_ID  NUMBER(18)          NOT NULL,
  CORRELATION               NVARCHAR2(510),
  DESCRIPTION               NVARCHAR2(1000),
  TYPE_NAME                 NVARCHAR2(200),
  STATUS                    NVARCHAR2(200),
  SOURCE                    NVARCHAR2(100),
  SOURCE_CODE               NVARCHAR2(200),
  CONSTRAINT BIO_MARKER_RELATIONSHIP_PK
  PRIMARY KEY
  (BIO_DATA_CORREL_DESCR_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_EXT_CODE  (Table) 
--
CREATE TABLE BIO_DATA_EXT_CODE
(
  BIO_DATA_ID           NUMBER(18)              NOT NULL,
  CODE                  VARCHAR2(500)      NOT NULL,
  CODE_SOURCE           NVARCHAR2(200),
  CODE_TYPE             NVARCHAR2(200),
  BIO_DATA_TYPE         VARCHAR2(100),
  BIO_DATA_EXT_CODE_ID  NUMBER(18)              NOT NULL,
  ETL_ID                VARCHAR2(50),
  CONSTRAINT BIO_DATA_EXT_CODE_PK
  PRIMARY KEY
  (BIO_DATA_EXT_CODE_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_LITERATURE  (Table) 
--
CREATE TABLE BIO_DATA_LITERATURE
(
  BIO_DATA_ID              NUMBER(18)           NOT NULL,
  BIO_LIT_REF_DATA_ID      NUMBER(18),
  BIO_CURATION_DATASET_ID  NUMBER(18)           NOT NULL,
  STATEMENT                NCLOB,
  STATEMENT_STATUS         NVARCHAR2(200),
  DATA_TYPE                NVARCHAR2(200),
  CONSTRAINT BIO_DATA_LITERATURE_PK
  PRIMARY KEY
  (BIO_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_LIT_CURATION_DATASET_FK 
  FOREIGN KEY (BIO_CURATION_DATASET_ID) 
  REFERENCES BIO_CURATION_DATASET (BIO_CURATION_DATASET_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_OBSERVATION  (Table) 
--
CREATE TABLE BIO_DATA_OBSERVATION
(
  BIO_DATA_ID         NUMBER(18)                NOT NULL,
  BIO_OBSERVATION_ID  NUMBER(18)                NOT NULL,
  ETL_SOURCE          VARCHAR2(100)
);


--
-- BIO_DATA_OMIC_MARKER  (Table) 
--
CREATE TABLE BIO_DATA_OMIC_MARKER
(
  BIO_DATA_ID    NUMBER(18),
  BIO_MARKER_ID  NUMBER(18)                     NOT NULL,
  DATA_TABLE     VARCHAR2(5)
);


--
-- BIO_DATA_PLATFORM  (Table) 
--
CREATE TABLE BIO_DATA_PLATFORM
(
  BIO_DATA_ID            NUMBER(18)             NOT NULL,
  BIO_ASSAY_PLATFORM_ID  NUMBER(18)             NOT NULL,
  ETL_SOURCE             VARCHAR2(100)
);


--
-- BIO_DATA_UID  (Table) 
--
CREATE TABLE BIO_DATA_UID
(
  BIO_DATA_ID    NUMBER(18)                     NOT NULL,
  UNIQUE_ID      NVARCHAR2(300)                 NOT NULL,
  BIO_DATA_TYPE  NVARCHAR2(100)                 NOT NULL,
  CONSTRAINT BIO_DATA_UID_PK
  PRIMARY KEY
  (BIO_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_DATA_UID_UK
  UNIQUE (UNIQUE_ID)
  ENABLE VALIDATE
);


--
-- BIO_DISEASE  (Table) 
--
CREATE TABLE BIO_DISEASE
(
  BIO_DISEASE_ID     NUMBER(18)                 NOT NULL,
  DISEASE            NVARCHAR2(510)             NOT NULL,
  CCS_CATEGORY       NVARCHAR2(510),
  ICD10_CODE         NVARCHAR2(510),
  MESH_CODE          NVARCHAR2(510),
  ICD9_CODE          NVARCHAR2(510),
  PREFERED_NAME      NVARCHAR2(510),
  ETL_ID_RETIRED     NUMBER(18),
  PRIMARY_SOURCE_CD  VARCHAR2(30),
  ETL_ID             VARCHAR2(50),
  CONSTRAINT DISEASEDIM_PK
  PRIMARY KEY
  (BIO_DISEASE_ID)
  ENABLE VALIDATE
);


--
-- BIO_EXPERIMENT  (Table) 
--
CREATE TABLE BIO_EXPERIMENT
(
  BIO_EXPERIMENT_ID     NUMBER(18),
  BIO_EXPERIMENT_TYPE   NVARCHAR2(200),
  TITLE                 NVARCHAR2(1000),
  DESCRIPTION           VARCHAR2(4000),
  DESIGN                NVARCHAR2(2000),
  START_DATE            DATE,
  COMPLETION_DATE       DATE,
  PRIMARY_INVESTIGATOR  NVARCHAR2(400),
  CONTACT_FIELD         NVARCHAR2(400),
  ETL_ID                NVARCHAR2(100),
  STATUS                VARCHAR2(100),
  OVERALL_DESIGN        NVARCHAR2(2000),
  ACCESSION             NVARCHAR2(100),
  ENTRYDT               DATE,
  UPDATED               DATE,
  INSTITUTION           VARCHAR2(100),
  COUNTRY               VARCHAR2(50),
  BIOMARKER_TYPE        VARCHAR2(255),
  TARGET                VARCHAR2(255),
  ACCESS_TYPE           VARCHAR2(100),
  CONSTRAINT EXPERIMENTDIM_PK
  PRIMARY KEY
  (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_MODEL_DATA  (Table) 
--
CREATE TABLE BIO_LIT_MODEL_DATA
(
  BIO_LIT_MODEL_DATA_ID  NUMBER(18)             NOT NULL,
  ETL_ID                 NVARCHAR2(50),
  MODEL_TYPE             NVARCHAR2(50),
  DESCRIPTION            NVARCHAR2(1000),
  STIMULATION            NVARCHAR2(1000),
  CONTROL_CHALLENGE      NVARCHAR2(500),
  CHALLENGE              NVARCHAR2(1000),
  SENTIZATION            NVARCHAR2(1000),
  ZYGOSITY               NVARCHAR2(250),
  EXPERIMENTAL_MODEL     NVARCHAR2(250),
  ANIMAL_WILD_TYPE       NVARCHAR2(250),
  TISSUE                 NVARCHAR2(250),
  CELL_TYPE              NVARCHAR2(250),
  CELL_LINE              NVARCHAR2(250),
  BODY_SUBSTANCE         NVARCHAR2(250),
  COMPONENT              NVARCHAR2(250),
  GENE_ID                NVARCHAR2(250),
  CONSTRAINT BIO_LIT_MODEL_DATA_PK
  PRIMARY KEY
  (BIO_LIT_MODEL_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_REF_DATA  (Table) 
--
CREATE TABLE BIO_LIT_REF_DATA
(
  BIO_LIT_REF_DATA_ID        NUMBER(18)         NOT NULL,
  ETL_ID                     NVARCHAR2(50),
  COMPONENT                  NVARCHAR2(100),
  COMPONENT_CLASS            NVARCHAR2(250),
  GENE_ID                    NVARCHAR2(50),
  MOLECULE_TYPE              NVARCHAR2(50),
  VARIANT                    NVARCHAR2(250),
  REFERENCE_TYPE             NVARCHAR2(50),
  REFERENCE_ID               NVARCHAR2(250),
  REFERENCE_TITLE            NVARCHAR2(2000),
  BACK_REFERENCES            NVARCHAR2(1000),
  STUDY_TYPE                 NVARCHAR2(250),
  DISEASE                    NVARCHAR2(250),
  DISEASE_ICD10              NVARCHAR2(250),
  DISEASE_MESH               NVARCHAR2(250),
  DISEASE_SITE               NVARCHAR2(250),
  DISEASE_STAGE              NVARCHAR2(250),
  DISEASE_GRADE              NVARCHAR2(250),
  DISEASE_TYPES              NVARCHAR2(250),
  DISEASE_DESCRIPTION        NVARCHAR2(1000),
  PHYSIOLOGY                 NVARCHAR2(250),
  STAT_CLINICAL              NVARCHAR2(500),
  STAT_CLINICAL_CORRELATION  NVARCHAR2(250),
  STAT_TESTS                 NVARCHAR2(500),
  STAT_COEFFICIENT           NVARCHAR2(500),
  STAT_P_VALUE               NVARCHAR2(100),
  STAT_DESCRIPTION           NVARCHAR2(1000),
  CONSTRAINT BIO_LIT_REF_DATA_PK
  PRIMARY KEY
  (BIO_LIT_REF_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_SUM_DATA  (Table) 
--
CREATE TABLE BIO_LIT_SUM_DATA
(
  BIO_LIT_SUM_DATA_ID   NUMBER(18)              NOT NULL,
  ETL_ID                NVARCHAR2(50),
  DISEASE_SITE          NVARCHAR2(250),
  TARGET                NVARCHAR2(50),
  VARIANT               NVARCHAR2(50),
  DATA_TYPE             NVARCHAR2(50),
  ALTERATION_TYPE       NVARCHAR2(100),
  TOTAL_FREQUENCY       NVARCHAR2(50),
  TOTAL_AFFECTED_CASES  NVARCHAR2(50),
  SUMMARY               NVARCHAR2(1000),
  CONSTRAINT BIO_LIT_SUM_DATA_PK
  PRIMARY KEY
  (BIO_LIT_SUM_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_MARKER  (Table) 
--
CREATE TABLE BIO_MARKER
(
  BIO_MARKER_ID           NUMBER(18)            NOT NULL,
  BIO_MARKER_NAME         NVARCHAR2(200),
  BIO_MARKER_DESCRIPTION  NVARCHAR2(1000),
  ORGANISM                NVARCHAR2(200),
  PRIMARY_SOURCE_CODE     NVARCHAR2(200),
  PRIMARY_EXTERNAL_ID     NVARCHAR2(200),
  BIO_MARKER_TYPE         NVARCHAR2(200)        NOT NULL,
  CONSTRAINT BIOMARKER_PK
  PRIMARY KEY
  (BIO_MARKER_ID)
  ENABLE VALIDATE,
  UNIQUE (ORGANISM, PRIMARY_EXTERNAL_ID)
  ENABLE VALIDATE
);


--
-- BIO_OBSERVATION  (Table) 
--
CREATE TABLE BIO_OBSERVATION
(
  BIO_OBSERVATION_ID  NUMBER(18),
  OBS_NAME            NVARCHAR2(200)            NOT NULL,
  OBS_CODE            NVARCHAR2(50),
  OBS_DESCR           NVARCHAR2(1000),
  OBS_TYPE            NVARCHAR2(20),
  OBS_CODE_SOURCE     NVARCHAR2(20),
  ETL_ID              VARCHAR2(50),
  CONSTRAINT OBSERVATIONDIM_PK
  PRIMARY KEY
  (BIO_OBSERVATION_ID)
  ENABLE VALIDATE
);


--
-- BIO_SPECIES_ORGANISM  (Table) 
--
CREATE TABLE BIO_SPECIES_ORGANISM
(
  ID        NUMBER                              NOT NULL,
  SPECIES   VARCHAR2(200),
  ORGANISM  VARCHAR2(200)
);


--
-- BIO_STATS_EXP_MARKER  (Table) 
--
CREATE TABLE BIO_STATS_EXP_MARKER
(
  BIO_MARKER_ID            NUMBER(18)           NOT NULL,
  BIO_EXPERIMENT_ID        NUMBER(18),
  BIO_STATS_EXP_MARKER_ID  NUMBER(18),
  CONSTRAINT BIO_S_E_M_PK
  PRIMARY KEY
  (BIO_MARKER_ID, BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_SUBJECT  (Table) 
--
CREATE TABLE BIO_SUBJECT
(
  BIO_SUBJECT_ID    NUMBER(18)                  NOT NULL,
  SITE_SUBJECT_ID   NUMBER(18),
  SOURCE            NVARCHAR2(200),
  SOURCE_CODE       NVARCHAR2(200),
  STATUS            NVARCHAR2(200),
  ORGANISM          NVARCHAR2(200),
  BIO_SUBJECT_TYPE  NVARCHAR2(200)              NOT NULL,
  CONSTRAINT BIO_SUBJECT_PK
  PRIMARY KEY
  (BIO_SUBJECT_ID)
  ENABLE VALIDATE
);


--
-- BIO_TAXONOMY  (Table) 
--
CREATE TABLE BIO_TAXONOMY
(
  BIO_TAXONOMY_ID  NUMBER(18)                   NOT NULL,
  TAXON_NAME       NVARCHAR2(200)               NOT NULL,
  TAXON_LABEL      NVARCHAR2(200)               NOT NULL,
  NCBI_TAX_ID      NVARCHAR2(200),
  CONSTRAINT BIO_TAXON_PK
  PRIMARY KEY
  (BIO_TAXONOMY_ID)
  ENABLE VALIDATE
);


--
-- CTD2_CLIN_INHIB_EFFECT  (Table) 
--
CREATE TABLE CTD2_CLIN_INHIB_EFFECT
(
  CTD_CIE_SEQ                     NUMBER,
  CTD_STUDY_ID                    NUMBER,
  EVENT_DESCRIPTION_NAME          VARCHAR2(4000),
  EVENT_DEFINITION_NAME           VARCHAR2(4000),
  ADVERSE_EFFECT_NAME             VARCHAR2(4000),
  SIGNAL_EFFECT_NAME              VARCHAR2(4000),
  PHARMACO_PARAMETER_NAME         VARCHAR2(500),
  DISCONTINUATION_RATE_VALUE      VARCHAR2(250),
  BENEFICIAL_EFFECT_NAME          VARCHAR2(4000),
  DRUG_EFFECT                     VARCHAR2(4000),
  CLINICAL_VARIABLE_NAME          VARCHAR2(250),
  QP_SM_PERCENTAGE_CHANGE         VARCHAR2(250),
  QP_SM_ABSOLUTE_CHANGE           VARCHAR2(250),
  QP_SM_RATE_OF_CHANGE            VARCHAR2(250),
  QP_SM_TREATMENT_PERIOD          VARCHAR2(250),
  QP_SM_GROUP_CHANGE              VARCHAR2(250),
  QP_SM_P_VALUE                   VARCHAR2(250),
  CE_SM_NO                        VARCHAR2(250),
  CE_SM_EVENT_RATE                VARCHAR2(250),
  CE_TIME_TO_EVENT                VARCHAR2(250),
  CE_REDUCTION                    VARCHAR2(250),
  CE_P_VALUE                      VARCHAR2(250),
  CLINICAL_CORRELATION            VARCHAR2(2000),
  COEFFICIENT_VALUE               VARCHAR2(250),
  STATISTICS_P_VALUE              VARCHAR2(250),
  STATISTICS_DESCRIPTION          VARCHAR2(4000),
  PRIMARY_ENDPOINT_TYPE           VARCHAR2(250),
  PRIMARY_ENDPOINT_DEFINITION     VARCHAR2(4000),
  PRIMARY_ENDPOINT_TEST_NAME      VARCHAR2(2000),
  PRIMARY_ENDPOINT_TIME_PERIOD    VARCHAR2(2000),
  PRIMARY_ENDPOINT_CHANGE         VARCHAR2(2000),
  PRIMARY_ENDPOINT_P_VALUE        VARCHAR2(2000),
  SECONDARY_ENDPOINT_TYPE         VARCHAR2(2000),
  SECONDARY_ENDPOINT_DEFINITION   VARCHAR2(4000),
  SECONDARY_ENDPOINT_TEST_NAME    VARCHAR2(2000),
  SECONDARY_ENDPOINT_TIME_PERIOD  VARCHAR2(4000),
  SECONDARY_ENDPOINT_CHANGE       VARCHAR2(4000),
  SECONDARY_ENDPOINT_P_VALUE      VARCHAR2(4000)
);


--
-- CTD2_DISEASE  (Table) 
--
CREATE TABLE CTD2_DISEASE
(
  CTD_DISEASE_SEQ      NUMBER,
  CTD_STUDY_ID         NUMBER,
  DISEASE_TYPE_NAME    VARCHAR2(500),
  DISEASE_COMMON_NAME  VARCHAR2(500),
  ICD10_NAME           VARCHAR2(250),
  MESH_NAME            VARCHAR2(250),
  STUDY_TYPE_NAME      VARCHAR2(2000),
  PHYSIOLOGY_NAME      VARCHAR2(500)
);


--
-- CTD2_INHIB_DETAILS  (Table) 
--
CREATE TABLE CTD2_INHIB_DETAILS
(
  CTD_INHIB_SEQ               NUMBER,
  CTD_STUDY_ID                NUMBER,
  COMMON_NAME_NAME            VARCHAR2(500),
  STANDARD_NAME_NAME          VARCHAR2(500),
  EXPERIMENTAL_DETAIL_DOSE    VARCHAR2(4000),
  EXP_DETAIL_EXPOSURE_PERIOD  VARCHAR2(4000),
  EXP_DETAIL_TREATMENT_NAME   VARCHAR2(4000),
  EXP_DETAIL_ADMIN_ROUTE      VARCHAR2(4000),
  EXP_DETAIL_DESCRIPTION      VARCHAR2(4000),
  EXP_DETAIL_PLACEBO          VARCHAR2(250),
  COMPARATOR_NAME_NAME        VARCHAR2(250),
  COMP_TREATMENT_NAME         VARCHAR2(4000),
  COMP_ADMIN_ROUTE            VARCHAR2(4000),
  COMP_DOSE                   VARCHAR2(2000),
  COMP_EXPOSURE_PERIOD        VARCHAR2(2000)
);


--
-- CTD2_STUDY  (Table) 
--
CREATE TABLE CTD2_STUDY
(
  CTD_STUDY_ID             NUMBER,
  REF_ARTICLE_PROTOCOL_ID  VARCHAR2(1000),
  REFERENCE_ID             NUMBER(9)            NOT NULL,
  PUBMED_ID                VARCHAR2(250),
  PUBMED_TITLE             VARCHAR2(2000),
  PROTOCOL_ID              VARCHAR2(1000),
  PROTOCOL_TITLE           VARCHAR2(2000)
);


--
-- CTD2_TRIAL_DETAILS  (Table) 
--
CREATE TABLE CTD2_TRIAL_DETAILS
(
  CTD_TD_SEQ                    NUMBER,
  CTD_STUDY_ID                  NUMBER,
  CONTROL                       VARCHAR2(2000),
  BLINDING_PROCEDURE            VARCHAR2(2000),
  NO_OF_ARMS                    VARCHAR2(2000),
  SPONSOR                       VARCHAR2(2000),
  PATIENT_STUDIED               VARCHAR2(2000),
  SOURCE_TYPE                   VARCHAR2(2000),
  TRIAL_DESCRIPTION             VARCHAR2(4000),
  ARM_NAME                      VARCHAR2(250),
  PATIENT_STUDY                 VARCHAR2(250),
  CLASS_TYPE                    VARCHAR2(250),
  CLASS_VALUE                   VARCHAR2(250),
  ASTHMA_DURATION               VARCHAR2(250),
  REGION                        VARCHAR2(250),
  AGE                           VARCHAR2(100),
  GENDER                        VARCHAR2(100),
  MINOR_PARTICIPATION           VARCHAR2(100),
  SYMPTOM_SCORE                 VARCHAR2(100),
  RESCUE_MEDICATION             VARCHAR2(2000),
  THERAPEUTIC_INTERVENTION      VARCHAR2(255),
  SMOKERS                       VARCHAR2(255),
  FORMER_SMOKERS                VARCHAR2(255),
  NEVER_SMOKERS                 VARCHAR2(255),
  SMOKING_PACK_YEARS            VARCHAR2(255),
  PULM_PATH_NAME                VARCHAR2(255),
  PULM_PATH_PCT                 VARCHAR2(50),
  PULM_PATH_VALUE               VARCHAR2(50),
  PULM_PATH_METHOD              VARCHAR2(255),
  ALLOW_MED_THERAPY_OCS         VARCHAR2(1000),
  ALLOW_MED_THERAPY_ICS         VARCHAR2(1000),
  ALLOW_MED_THERAPY_LABA        VARCHAR2(1000),
  ALLOW_MED_THERAPY_LTRA        VARCHAR2(1000),
  ALLOW_MED_THERAPY_DESC        VARCHAR2(4000),
  ALLOW_MED_THERAPY_CORTSTER    VARCHAR2(1000),
  ALLOW_MED_THERAPY_IMMUNO      VARCHAR2(1000),
  ALLOW_MED_THERAPY_CYTO        VARCHAR2(1000),
  ALLOW_MED_TREAT_OCS           VARCHAR2(1000),
  ALLOW_MED_TREAT_ICS           VARCHAR2(1000),
  ALLOW_MED_TREAT_LABA          VARCHAR2(1000),
  ALLOW_MED_TREAT_LTRA          VARCHAR2(1000),
  ALLOW_MED_TREAT_DESC          VARCHAR2(4000),
  ALLOW_MED_TREAT_CORTSTER      VARCHAR2(1000),
  ALLOW_MED_TREAT_IMMUNO        VARCHAR2(1000),
  ALLOW_MED_TREAT_CYTO          VARCHAR2(1000),
  PAT_CHAR_BASE_CLIN_VAR        VARCHAR2(500),
  PAT_CHAR_BASE_CLIN_VAR_PCT    VARCHAR2(250),
  PAT_CHAR_BASE_CLIN_VAR_VALUE  VARCHAR2(250),
  BIOMARKER_NAME_NAME           VARCHAR2(250),
  PAT_CHAR_BIOMARKER_PCT        VARCHAR2(250),
  PAT_CHAR_BIOMARKER_VALUE      VARCHAR2(250),
  PAT_CHAR_CELLINFO_NAME        VARCHAR2(250),
  PAT_CHAR_CELLINFO_TYPE        VARCHAR2(250),
  PAT_CHAR_CELLINFO_COUNT       VARCHAR2(250),
  PAT_CHAR_PRIORMED_NAME        VARCHAR2(250),
  PAT_CHAR_PRIORMED_PCT         VARCHAR2(500),
  PAT_CHAR_PRIORMED_DOSE        VARCHAR2(250),
  DISEASE_PHENOTYPE_NAME        VARCHAR2(1000),
  DISEASE_SEVERITY_NAME         VARCHAR2(500),
  INCL_AGE                      VARCHAR2(2000),
  INCL_DIFFICULT_TO_TREAT       VARCHAR2(2000),
  INCL_DISEASE_DIAGNOSIS        VARCHAR2(2000),
  INCL_STEROID_DOSE             VARCHAR2(2000),
  INCL_LABA                     VARCHAR2(2000),
  INCL_OCS                      VARCHAR2(2000),
  INCL_XOLAIR                   VARCHAR2(2000),
  INCL_LTRA_INHIBITOR           VARCHAR2(2000),
  INCL_FEV1                     VARCHAR2(2000),
  INCL_FEV1_REVERSIBILITY       VARCHAR2(2000),
  INCL_SMOKING                  VARCHAR2(2000),
  INCL_TLC                      VARCHAR2(2000),
  INCL_FVC                      VARCHAR2(2000),
  INCL_DLCO                     VARCHAR2(2000),
  INCL_SGRQ                     VARCHAR2(2000),
  INCL_HRCT                     VARCHAR2(2000),
  INCL_BIOPSY                   VARCHAR2(2000),
  INCL_DYPSNEA_ON_EXERTION      VARCHAR2(2000),
  INCL_CONCOMITANT_MED          VARCHAR2(2000),
  INCL_FORMER_SMOKERS           VARCHAR2(2000),
  INCL_NEVER_SMOKERS            VARCHAR2(2000),
  INCL_SMOKING_PACK_YEARS       VARCHAR2(2000),
  INCL_FEV_FVC                  VARCHAR2(2000),
  TRIAL_DES_MINIMAL_SYMPTOM     VARCHAR2(2000),
  TRIAL_DES_RESCUE_MED          VARCHAR2(4000),
  TRIAL_DES_EXCLUSION_CRITERIA  VARCHAR2(4000),
  TRIAL_DES_OPEN_LABEL_STATUS   VARCHAR2(250),
  TRIAL_DES_RANDOM_STATUS       VARCHAR2(250),
  TRIAL_DES_NATURE_OF_TRIAL     VARCHAR2(250),
  TRIAL_DES_BLINDED_STATUS      VARCHAR2(250),
  TRIAL_DES_RUN_IN_PERIOD       VARCHAR2(2000),
  TRIAL_DES_TREATMENT           VARCHAR2(2000),
  TRIAL_DES_WASHOUT_PERIOD      VARCHAR2(2000),
  TRIAL_STATUS_NAME             VARCHAR2(2000),
  TRIAL_PHASE_NAME              VARCHAR2(2000)
);


--
-- CTD_ALLOWED_MEDS_TREATMENT  (Table) 
--
CREATE TABLE CTD_ALLOWED_MEDS_TREATMENT
(
  CTD_STUDY_ID             NUMBER,
  TRTMT_OCS                VARCHAR2(4000),
  TRTMT_ICS                VARCHAR2(4000),
  TRTMT_LABA               VARCHAR2(4000),
  TRTMT_LTRA               VARCHAR2(4000),
  TRTMT_CORTICOSTEROIDS    VARCHAR2(4000),
  TRTMT_ANTI_FIBROTICS     VARCHAR2(4000),
  TRTMT_IMMUNOSUPPRESSIVE  VARCHAR2(4000),
  TRTMT_CYTOTOXIC          VARCHAR2(4000)
);


--
-- CTD_BIOMARKER  (Table) 
--
CREATE TABLE CTD_BIOMARKER
(
  CTD_STUDY_ID     NUMBER,
  BIOMARKER_NAME   VARCHAR2(4000),
  BIOMARKER_PCT    VARCHAR2(4000),
  BIOMARKER_VALUE  VARCHAR2(4000)
);


--
-- CTD_DISEASE  (Table) 
--
CREATE TABLE CTD_DISEASE
(
  CTD_STUDY_ID      NUMBER,
  COMMON_NAME       VARCHAR2(4000),
  ICD10             VARCHAR2(4000),
  MESH              VARCHAR2(4000),
  DISEASE_SEVERITY  VARCHAR2(4000)
);


--
-- CTD_DRUG_INHIB  (Table) 
--
CREATE TABLE CTD_DRUG_INHIB
(
  CTD_STUDY_ID                  NUMBER,
  DRUG_INHIBITOR_COMMON_NAME    VARCHAR2(4000),
  DRUG_INHIBITOR_STANDARD_NAME  VARCHAR2(4000),
  DRUG_INHIBITOR_CAS_ID         VARCHAR2(4000)
);


--
-- CTD_FULL  (Table) 
--
CREATE TABLE CTD_FULL
(
  CLINICAL_TRIAL_DESIGN_ID        NUMBER,
  REF_ARTICLE_PROTOCOL_ID         VARCHAR2(4000),
  REF_RECORD_ID                   VARCHAR2(4000),
  REF_BACK_REFERENCE              VARCHAR2(4000),
  REF_ARTICLE_PMID                VARCHAR2(4000),
  REF_PROTOCOL_ID                 VARCHAR2(4000),
  REF_TITLE                       VARCHAR2(4000),
  STUDY_TYPE                      VARCHAR2(4000),
  COMMON_NAME                     VARCHAR2(4000),
  ICD10                           VARCHAR2(4000),
  MESH                            VARCHAR2(4000),
  DISEASE_TYPE                    VARCHAR2(4000),
  PHYSIOLOGY_NAME                 VARCHAR2(4000),
  TRIAL_STATUS                    VARCHAR2(4000),
  TRIAL_PHASE                     VARCHAR2(4000),
  NATURE_OF_TRIAL                 VARCHAR2(4000),
  RANDOMIZATION                   VARCHAR2(4000),
  BLINDED_TRIAL                   VARCHAR2(4000),
  TRIAL_TYPE                      VARCHAR2(4000),
  RUN_IN_PERIOD                   VARCHAR2(4000),
  TREATMENT_PERIOD                VARCHAR2(4000),
  WASHOUT_PERIOD                  VARCHAR2(4000),
  OPEN_LABEL_EXTENSION            VARCHAR2(4000),
  SPONSOR                         VARCHAR2(4000),
  TRIAL_NBR_OF_PATIENTS_STUDIED   VARCHAR2(4000),
  SOURCE_TYPE                     VARCHAR2(4000),
  TRIAL_AGE                       VARCHAR2(4000),
  DISEASE_SEVERITY                VARCHAR2(4000),
  DIFFICULT_TO_TREAT              VARCHAR2(4000),
  ASTHMA_DIAGNOSIS                VARCHAR2(4000),
  INHALED_STEROID_DOSE            VARCHAR2(4000),
  LABA                            VARCHAR2(4000),
  OCS                             VARCHAR2(4000),
  XOLAIR                          VARCHAR2(4000),
  LTRA_INHIBITORS                 VARCHAR2(4000),
  ASTHMA_PHENOTYPE                VARCHAR2(4000),
  FEV1                            VARCHAR2(4000),
  FEV1_REVERSIBILITY              VARCHAR2(4000),
  TLC                             VARCHAR2(4000),
  FEV1_FVC                        VARCHAR2(4000),
  FVC                             VARCHAR2(4000),
  DLCO                            VARCHAR2(4000),
  SGRQ                            VARCHAR2(4000),
  HRCT                            VARCHAR2(4000),
  BIOPSY                          VARCHAR2(4000),
  DYSPNEA_ON_EXERTION             VARCHAR2(4000),
  CONCOMITANT_MED                 VARCHAR2(4000),
  TRIAL_SMOKERS_PCT               VARCHAR2(4000),
  TRIAL_FORMER_SMOKERS_PCT        VARCHAR2(4000),
  TRIAL_NEVER_SMOKERS_PCT         VARCHAR2(4000),
  TRIAL_PACK_YEARS                VARCHAR2(4000),
  EXCLUSION_CRITERIA              CLOB,
  MINIMAL_SYMPTOMS                VARCHAR2(4000),
  RESCUE_MEDICATION_USE           VARCHAR2(4000),
  CONTROL_DETAILS                 VARCHAR2(4000),
  BLINDING_PROCEDURE              VARCHAR2(4000),
  NUMBER_OF_ARMS                  VARCHAR2(4000),
  DESCRIPTION                     CLOB,
  ARM                             VARCHAR2(4000),
  ARM_NBR_OF_PATIENTS_STUDIED     VARCHAR2(4000),
  ARM_CLASSIFICATION_TYPE         VARCHAR2(4000),
  ARM_CLASSIFICATION_VALUE        VARCHAR2(4000),
  ARM_ASTHMA_DURATION             VARCHAR2(4000),
  ARM_GEOGRAPHIC_REGION           VARCHAR2(4000),
  ARM_AGE                         VARCHAR2(4000),
  ARM_GENDER                      VARCHAR2(4000),
  ARM_SMOKERS_PCT                 VARCHAR2(4000),
  ARM_FORMER_SMOKERS_PCT          VARCHAR2(4000),
  ARM_NEVER_SMOKERS_PCT           VARCHAR2(4000),
  ARM_PACK_YEARS                  VARCHAR2(4000),
  MINORITY_PARTICIPATION          VARCHAR2(4000),
  BASELINE_SYMPTOM_SCORE          VARCHAR2(4000),
  BASELINE_RESCUE_MEDICATION_USE  VARCHAR2(4000),
  CLINICAL_VARIABLE               VARCHAR2(4000),
  CLINICAL_VARIABLE_PCT           VARCHAR2(4000),
  CLINICAL_VARIABLE_VALUE         VARCHAR2(4000),
  PRIOR_MED_DRUG_NAME             VARCHAR2(4000),
  PRIOR_MED_PCT                   VARCHAR2(4000),
  PRIOR_MED_VALUE                 VARCHAR2(4000),
  BIOMARKER_NAME                  VARCHAR2(4000),
  BIOMARKER_PCT                   VARCHAR2(4000),
  BIOMARKER_VALUE                 VARCHAR2(4000),
  CELLINFO_TYPE                   VARCHAR2(4000),
  CELLINFO_COUNT                  VARCHAR2(4000),
  CELLINFO_SOURCE                 VARCHAR2(4000),
  PULMONARY_PATHOLOGY_NAME        VARCHAR2(4000),
  PULMPATH_PATIENT_PCT            VARCHAR2(4000),
  PULMPATH_VALUE_UNIT             VARCHAR2(4000),
  PULMPATH_METHOD                 VARCHAR2(4000),
  RUNIN_OCS                       VARCHAR2(4000),
  RUNIN_ICS                       VARCHAR2(4000),
  RUNIN_LABA                      VARCHAR2(4000),
  RUNIN_LTRA                      VARCHAR2(4000),
  RUNIN_CORTICOSTEROIDS           VARCHAR2(4000),
  RUNIN_ANTI_FIBROTICS            VARCHAR2(4000),
  RUNIN_IMMUNOSUPPRESSIVE         VARCHAR2(4000),
  RUNIN_CYTOTOXIC                 VARCHAR2(4000),
  RUNIN_DESCRIPTION               VARCHAR2(4000),
  TRTMT_OCS                       VARCHAR2(4000),
  TRTMT_ICS                       VARCHAR2(4000),
  TRTMT_LABA                      VARCHAR2(4000),
  TRTMT_LTRA                      VARCHAR2(4000),
  TRTMT_CORTICOSTEROIDS           VARCHAR2(4000),
  TRTMT_ANTI_FIBROTICS            VARCHAR2(4000),
  TRTMT_IMMUNOSUPPRESSIVE         VARCHAR2(4000),
  TRTMT_CYTOTOXIC                 VARCHAR2(4000),
  TRTMT_DESCRIPTION               VARCHAR2(4000),
  DRUG_INHIBITOR_COMMON_NAME      VARCHAR2(4000),
  DRUG_INHIBITOR_STANDARD_NAME    VARCHAR2(4000),
  DRUG_INHIBITOR_CAS_ID           VARCHAR2(4000),
  DRUG_INHIBITOR_DOSE             VARCHAR2(4000),
  DRUG_INHIBITOR_ROUTE_OF_ADMIN   VARCHAR2(4000),
  DRUG_INHIBITOR_TRTMT_REGIME     VARCHAR2(4000),
  COMPARATOR_NAME                 VARCHAR2(4000),
  COMPARATOR_DOSE                 VARCHAR2(4000),
  COMPARATOR_TIME_PERIOD          VARCHAR2(4000),
  COMPARATOR_ROUTE_OF_ADMIN       VARCHAR2(4000),
  TREATMENT_REGIME                VARCHAR2(4000),
  PLACEBO                         VARCHAR2(4000),
  EXPERIMENT_DESCRIPTION          VARCHAR2(4000),
  PRIMARY_ENDPOINT_TYPE           VARCHAR2(4000),
  PRIMARY_ENDPOINT_DEFINITION     VARCHAR2(4000),
  PRIMARY_ENDPOINT_CHANGE         VARCHAR2(4000),
  PRIMARY_ENDPOINT_TIME_PERIOD    VARCHAR2(4000),
  PRIMARY_ENDPOINT_STAT_TEST      VARCHAR2(4000),
  PRIMARY_ENDPOINT_P_VALUE        VARCHAR2(4000),
  SECONDARY_TYPE                  VARCHAR2(4000),
  SECONDARY_TYPE_DEFINITION       VARCHAR2(4000),
  SECONDARY_TYPE_CHANGE           VARCHAR2(4000),
  SECONDARY_TYPE_TIME_PERIOD      VARCHAR2(4000),
  SECONDARY_TYPE_P_VALUE          VARCHAR2(4000),
  SECONDARY_TYPE_STAT_TEST        VARCHAR2(4000),
  CLINICAL_VARIABLE_NAME          VARCHAR2(4000),
  PCT_CHANGE_FROM_BASELINE        VARCHAR2(4000),
  ABS_CHANGE_FROM_BASELINE        VARCHAR2(4000),
  RATE_OF_CHANGE_FROM_BASELINE    VARCHAR2(4000),
  AVERAGE_OVER_TREATMENT_PERIOD   VARCHAR2(4000),
  WITHIN_GROUP_CHANGES            VARCHAR2(4000),
  STAT_MEASURE_P_VALUE            VARCHAR2(4000),
  DEFINITION_OF_THE_EVENT         VARCHAR2(4000),
  NUMBER_OF_EVENTS                VARCHAR2(4000),
  EVENT_RATE                      VARCHAR2(4000),
  TIME_TO_EVENT                   VARCHAR2(4000),
  EVENT_PCT_REDUCTION             VARCHAR2(4000),
  EVENT_P_VALUE                   VARCHAR2(4000),
  EVENT_DESCRIPTION               VARCHAR2(4000),
  DISCONTINUATION_RATE            VARCHAR2(4000),
  RESPONSE_RATE                   VARCHAR2(4000),
  DOWNSTREAM_SIGNALING_EFFECTS    VARCHAR2(4000),
  BENEFICIAL_EFFECTS              VARCHAR2(4000),
  ADVERSE_EFFECTS                 VARCHAR2(4000),
  PK_PD_PARAMETER                 VARCHAR2(4000),
  PK_PD_VALUE                     VARCHAR2(4000),
  EFFECT_DESCRIPTION              VARCHAR2(4000),
  BIOMOLECULE_NAME                VARCHAR2(4000),
  BIOMOLECULE_ID                  VARCHAR2(4000),
  BIOMOLECULE_TYPE                VARCHAR2(4000),
  BIOMARKER                       VARCHAR2(4000),
  BIOMARKER_TYPE                  VARCHAR2(4000),
  BASELINE_EXPR_PCT               VARCHAR2(4000),
  BASELINE_EXPR_NUMBER            VARCHAR2(4000),
  BASELINE_EXPR_VALUE_FOLD_MEAN   VARCHAR2(4000),
  BASELINE_EXPR_SD                VARCHAR2(4000),
  BASELINE_EXPR_SEM               VARCHAR2(4000),
  BASELINE_EXPR_UNIT              VARCHAR2(4000),
  EXPR_AFTER_TRTMT_PCT            VARCHAR2(4000),
  EXPR_AFTER_TRTMT_NUMBER         VARCHAR2(4000),
  EXPR_AFTERTRTMT_VALUEFOLD_MEAN  VARCHAR2(4000),
  EXPR_AFTER_TRTMT_SD             VARCHAR2(4000),
  EXPR_AFTER_TRTMT_SEM            VARCHAR2(4000),
  EXPR_AFTER_TRTMT_UNIT           VARCHAR2(4000),
  EXPR_CHG_SOURCE_TYPE            VARCHAR2(4000),
  EXPR_CHG_TECHNIQUE              VARCHAR2(4000),
  EXPR_CHG_DESCRIPTION            VARCHAR2(4000),
  CLINICAL_CORRELATION            VARCHAR2(4000),
  STATISTICAL_TEST                VARCHAR2(4000),
  STATISTICAL_COEFFICIENT_VALUE   VARCHAR2(4000),
  STATISTICAL_TEST_P_VALUE        VARCHAR2(4000),
  STATISTICAL_TEST_DESCRIPTION    VARCHAR2(4000),
  DRUG_INHIBITOR_TIME_PERIOD      VARCHAR2(4000)
);


--
-- CTD_INCLUSION_CRITERIA  (Table) 
--
CREATE TABLE CTD_INCLUSION_CRITERIA
(
  CTD_STUDY_ID          NUMBER,
  INHALED_STEROID_DOSE  VARCHAR2(4000),
  LABA                  VARCHAR2(4000),
  OCS                   VARCHAR2(4000),
  XOLAIR                VARCHAR2(4000),
  LTRA_INHIBITORS       VARCHAR2(4000),
  ASTHMA_PHENOTYPE      VARCHAR2(4000),
  FEV1                  VARCHAR2(4000)
);


--
-- CTD_PRIMARY_ENDPTS  (Table) 
--
CREATE TABLE CTD_PRIMARY_ENDPTS
(
  CTD_STUDY_ID              NUMBER,
  PRIMARY_TYPE              VARCHAR2(4000),
  PRIMARY_TYPE_DEFINITION   VARCHAR2(4000),
  PRIMARY_TYPE_TIME_PERIOD  VARCHAR2(4000),
  PRIMARY_TYPE_CHANGE       VARCHAR2(4000),
  PRIMARY_TYPE_P_VALUE      VARCHAR2(4000),
  ID                        NUMBER(18)
);


--
-- CTD_SEC_ENDPTS  (Table) 
--
CREATE TABLE CTD_SEC_ENDPTS
(
  CTD_STUDY_ID                NUMBER,
  SECONDARY_TYPE              VARCHAR2(4000),
  SECONDARY_TYPE_DEFINITION   VARCHAR2(4000),
  SECONDARY_TYPE_TIME_PERIOD  VARCHAR2(4000),
  SECONDARY_TYPE_CHANGE       VARCHAR2(4000),
  SECONDARY_TYPE_P_VALUE      VARCHAR2(4000),
  ID                          NUMBER(18)
);


--
-- CTD_STUDY  (Table) 
--
CREATE TABLE CTD_STUDY
(
  CTD_STUDY_ID             NUMBER,
  REF_ARTICLE_PROTOCOL_ID  VARCHAR2(4000),
  REF_ARTICLE_PMID         VARCHAR2(4000),
  REF_PROTOCOL_ID          VARCHAR2(4000)
);


--
-- REPORT  (Table) 
--
CREATE TABLE REPORT
(
  REPORT_ID     NUMBER                          NOT NULL,
  NAME          VARCHAR2(200),
  DESCRIPTION   VARCHAR2(1000),
  CREATINGUSER  VARCHAR2(200),
  PUBLIC_FLAG   CHAR(1),
  CREATE_DATE   TIMESTAMP(1)                    DEFAULT Sysdate,
  STUDY         VARCHAR2(200)
);


--
-- REPORT_ITEM  (Table) 
--
CREATE TABLE REPORT_ITEM
(
  REPORT_ITEM_ID  NUMBER                        NOT NULL,
  REPORT_ID       NUMBER                        NOT NULL,
  CODE            VARCHAR2(200),
  CONSTRAINT PK_BIOMART_REPORT_ITEM
  PRIMARY KEY
  (REPORT_ITEM_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_DATA_STATS_SEQ  (Sequence) 
--
CREATE SEQUENCE BIO_ASSAY_DATA_STATS_SEQ
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


--
-- HIBERNATE_SEQUENCE  (Sequence) 
--
CREATE SEQUENCE HIBERNATE_SEQUENCE;


--
-- SEQ_BIO_DATA_FACT_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_BIO_DATA_FACT_ID;


--
-- SEQ_BIO_DATA_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_BIO_DATA_ID;


--
-- SEQ_CLINICAL_TRIAL_DESIGN_ID  (Sequence) 
--
CREATE SEQUENCE SEQ_CLINICAL_TRIAL_DESIGN_ID;


--
-- BIO_ASSAY_ANALYSIS_EQTL_IDX1  (Index) 
--
CREATE INDEX BIO_ASSAY_ANALYSIS_EQTL_IDX1 ON BIO_ASSAY_ANALYSIS_EQTL
(BIO_ASSAY_ANALYSIS_ID);


--
-- BIO_ASSAY_ANALYSIS_EQTL_PK  (Index) 
--
CREATE UNIQUE INDEX BIO_ASSAY_ANALYSIS_EQTL_PK ON BIO_ASSAY_ANALYSIS_EQTL
(BIO_ASY_ANALYSIS_EQTL_ID);


--
-- BIO_ASSAY_ANALYSIS_GWAS_IDX1  (Index) 
--
CREATE INDEX BIO_ASSAY_ANALYSIS_GWAS_IDX1 ON BIO_ASSAY_ANALYSIS_GWAS
(BIO_ASSAY_ANALYSIS_ID);


--
-- BIO_ASSAY_ANALYSIS_GWAS_IDX2  (Index) 
--
CREATE INDEX BIO_ASSAY_ANALYSIS_GWAS_IDX2 ON BIO_ASSAY_ANALYSIS_GWAS
(RS_ID);


--
-- BIO_ASSAY_ANALYSIS_GWAS_PK  (Index) 
--
CREATE UNIQUE INDEX BIO_ASSAY_ANALYSIS_GWAS_PK ON BIO_ASSAY_ANALYSIS_GWAS
(BIO_ASY_ANALYSIS_GWAS_ID);


--
-- BIO_ASY_FEATURE_GRP_NAME_IDX  (Index) 
--
CREATE INDEX BIO_ASY_FEATURE_GRP_NAME_IDX ON BIO_ASSAY_FEATURE_GROUP
(FEATURE_GROUP_NAME, BIO_ASSAY_FEATURE_GROUP_ID)
COMPRESS 1;


--
-- BIO_A_O_FG_ID_IDX  (Index) 
--
CREATE INDEX BIO_A_O_FG_ID_IDX ON BIO_ASSAY_DATA_ANNOTATION
(BIO_ASSAY_FEATURE_GROUP_ID)
COMPRESS 1;


--
-- BIO_CONCEPT_CODE_TYPE_INDEX  (Index) 
--
CREATE INDEX BIO_CONCEPT_CODE_TYPE_INDEX ON BIO_CONCEPT_CODE
(CODE_TYPE_NAME);


--
-- BIO_DATA_E_C_C_IDX  (Index) 
--
CREATE INDEX BIO_DATA_E_C_C_IDX ON BIO_DATA_EXT_CODE
(CODE);


--
-- BIO_DATA_E_C_T_IDX  (Index) 
--
CREATE INDEX BIO_DATA_E_C_T_IDX ON BIO_DATA_EXT_CODE
(CODE_TYPE);


--
-- BIO_DATA_OBSERVATION_PK  (Index) 
--
CREATE UNIQUE INDEX BIO_DATA_OBSERVATION_PK ON BIO_DATA_OBSERVATION
(BIO_DATA_ID, BIO_OBSERVATION_ID);


--
-- BIO_DATA_O_M_DID_IDX  (Index) 
--
CREATE INDEX BIO_DATA_O_M_DID_IDX ON BIO_DATA_OMIC_MARKER
(BIO_DATA_ID);


--
-- BIO_DATA_PLATFORM_PK  (Index) 
--
CREATE UNIQUE INDEX BIO_DATA_PLATFORM_PK ON BIO_DATA_PLATFORM
(BIO_DATA_ID, BIO_ASSAY_PLATFORM_ID);


--
-- BIO_D_E_C_DID_CT_IDX  (Index) 
--
CREATE INDEX BIO_D_E_C_DID_CT_IDX ON BIO_DATA_EXT_CODE
(BIO_DATA_ID, CODE_TYPE);


--
-- BIO_D_FG_M_MARKER2_PK  (Index) 
--
CREATE UNIQUE INDEX BIO_D_FG_M_MARKER2_PK ON BIO_ASSAY_DATA_ANNOTATION
(BIO_MARKER_ID, BIO_ASSAY_FEATURE_GROUP_ID);


--
-- BIO_D_O_M_MARKER2_PK  (Index) 
--
CREATE UNIQUE INDEX BIO_D_O_M_MARKER2_PK ON BIO_DATA_OMIC_MARKER
(BIO_MARKER_ID, BIO_DATA_ID);


--
-- BIO_EXP_ACEN_IDX  (Index) 
--
CREATE INDEX BIO_EXP_ACEN_IDX ON BIO_EXPERIMENT
(ACCESSION);


--
-- BIO_EXP_TYPE_IDX  (Index) 
--
CREATE INDEX BIO_EXP_TYPE_IDX ON BIO_EXPERIMENT
(BIO_EXPERIMENT_TYPE);


--
-- BIO_MKR_EXT_ID  (Index) 
--
CREATE INDEX BIO_MKR_EXT_ID ON BIO_MARKER
(PRIMARY_EXTERNAL_ID);


--
-- BIO_MKR_TYPE_IDX  (Index) 
--
CREATE INDEX BIO_MKR_TYPE_IDX ON BIO_MARKER
(BIO_MARKER_TYPE);


--
-- BIO_STATS_EXP_MK_EXP_IDX  (Index) 
--
CREATE INDEX BIO_STATS_EXP_MK_EXP_IDX ON BIO_STATS_EXP_MARKER
(BIO_EXPERIMENT_ID);


--
-- BIO_STATS_EXP_MK_MK_IDX  (Index) 
--
CREATE INDEX BIO_STATS_EXP_MK_MK_IDX ON BIO_STATS_EXP_MARKER
(BIO_MARKER_ID);


--
-- UTIL_GRANT_ALL  (Procedure) 
--
CREATE OR REPLACE PROCEDURE         "UTIL_GRANT_ALL"
(username	varchar2 := 'DATATRUST'
,V_WHATTYPE IN VARCHAR2 DEFAULT 'PROCEDURES,FUNCTIONS,TABLES,VIEWS,PACKAGES,SEQUENCES')
AUTHID CURRENT_USER
AS
/*************************************************************************
* Copyright 2008-2012 Janssen Research & Development, LLC.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************/

    v_user      varchar2(2000) := SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA');
	extTable	int;

  begin

	IF UPPER(V_WHATTYPE) LIKE '%TABLE%' THEN
    dbms_output.put_line('Owner ' || v_user  || '   Grantee ' || username);
    dbms_output.put_line('Tables');

     for L_TABLE in (select table_name from user_tables where table_name not like '%EXTRNL%') LOOP

		select count(*) into extTable
		from all_external_tables
		where owner = v_user
		  and table_name = L_TABLE.table_name;
		
       --if L_TABLE.table_name like '%EXTRNL%' then
	    if extTable > 0 then
          --grant select only to External tables
          execute immediate 'grant select on ' || L_TABLE.table_name || ' to ' || username;

       else
          --Grant full permissions on regular tables
          execute immediate 'grant select, insert, update, delete on ' || L_TABLE.table_name || ' to ' || username;
          --DBMS_OUTPUT.put_line('grant select, insert, update, delete on ' || L_TABLE.table_name || ' to ' || username);
       end if;

     END LOOP; --TABLE LOOP
     end if;

	IF UPPER(V_WHATTYPE) LIKE '%VIEW%' THEN
    dbms_output.put_line('Owner ' || v_user  || '   Grantee ' || username);
    dbms_output.put_line('Views');

     for L_VIEW in (select view_name from user_views ) LOOP
          execute immediate 'grant select on ' || L_VIEW.view_name || ' to ' || username;

     END LOOP; --TABLE LOOP
 end if;

 IF UPPER(V_WHATTYPE) LIKE '%PROCEDURE%' or UPPER(V_WHATTYPE) LIKE '%FUNCTION%' or UPPER(V_WHATTYPE) LIKE '%PACKAGE%'  THEN
    dbms_output.put_line(chr(10) || 'Procedures, functions and packages');

    for L_PROCEDURE in (select object_name from user_objects where object_type in ('PROCEDURE', 'FUNCTION', 'PACKAGE') )
     LOOP

       execute immediate 'grant execute on ' || L_PROCEDURE.object_name || ' to ' || username;
      -- DBMS_OUTPUT.put_line('grant execute on ' || L_PROCEDURE.object_name || ' to ' || username);

     END LOOP; --PROCEDURE LOOP
  end if;

 IF UPPER(V_WHATTYPE) LIKE '%SEQUENCE%'  THEN
    dbms_output.put_line(chr(10) || 'Sequence');

    for L_SEQUENCE in (select object_name from user_objects where object_type = 'SEQUENCE' )
     LOOP

       execute immediate 'grant select on ' || L_SEQUENCE.object_name || ' to ' || username;
      -- DBMS_OUTPUT.put_line('grant select on ' || L_SEQUENCE.object_name || ' to ' || username);

     END LOOP; --SEQUENCE LOOP
  end if;

END; 
/


--
-- BIOMARKER_GENE_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIOMARKER_GENE_UID" (
  GENE_ID VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'GENE:' || nvl(GENE_ID, 'ERROR');
END biomarker_gene_uid; 
/


--
-- BIOMARKER_PATHWAY_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIOMARKER_PATHWAY_UID" (
  P_SOURCE IN VARCHAR2 ,
  PATHWAY_ID  IN VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'PATHWAY:'|| P_SOURCE || ':' || nvl(PATHWAY_ID, 'ERROR');
END biomarker_pathway_uid;
/


--
-- BIO_ASSAY_ANALYSIS_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_ASSAY_ANALYSIS_UID" (
  ANALYSIS_NAME VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'BAA:' || nvl(ANALYSIS_NAME, 'ERROR');
END bio_assay_analysis_uid;
/


--
-- BIO_ASSAY_PLATFORM_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_ASSAY_PLATFORM_UID" (
  PLATFORM_NAME VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'BAP:' || nvl(PLATFORM_NAME, 'ERROR');
END bio_assay_platform_uid; 
/


--
-- BIO_ASY_ANALYSIS_PLTFM_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_ASY_ANALYSIS_PLTFM_UID" (
  PLATFORM_NAME VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'BAAP:' || nvl(PLATFORM_NAME, 'ERROR');
END bio_asy_analysis_pltfm_uid; 
/


--
-- BIO_COMPOUND_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_COMPOUND_UID" 
( CAS_REGISTRY IN VARCHAR2,
  JNJ_NUMBER IN VARCHAR2,
  CNTO_NUMBER IN VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Function to create compound_uid.

  RETURN 'COM:' || nvl(CAS_REGISTRY, nvl(JNJ_NUMBER, nvl(CNTO_NUMBER, 'ERROR')));
END BIO_COMPOUND_UID; 
/


--
-- BIO_CURATION_DATASET_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_CURATION_DATASET_UID" (
  BIO_CURATION_TYPE VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'BCD:' || nvl(BIO_CURATION_TYPE, 'ERROR');
END BIO_CURATION_DATASET_UID; 
/


--
-- BIO_DISEASE_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_DISEASE_UID" (
  MESH_CODE VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates bio_disease_uid.

  RETURN 'DIS:' || nvl(MESH_CODE, 'ERROR');
END BIO_DISEASE_UID; 
/


--
-- BIO_EXPERIMENT_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_EXPERIMENT_UID" (
  PRIMARY_ID VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'EXP:' || nvl(PRIMARY_ID, 'ERROR');
END bio_experiment_uid; 
/


--
-- BIO_JUB_ONCOL_DATA_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_JUB_ONCOL_DATA_UID" (
  RECORD_ID NUMBER,
  BIO_CURATION_NAME VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'BJOD:' || nvl(TO_CHAR(RECORD_ID), 'ERROR') || ':' || nvl(BIO_CURATION_NAME, 'ERROR');
END BIO_JUB_ONCOL_DATA_UID;
/


--
-- BIO_JUB_ONCOL_SUM_DATA_UID  (Function) 
--
CREATE OR REPLACE FUNCTION           "BIO_JUB_ONCOL_SUM_DATA_UID" (
  RECORD_ID NUMBER,
  BIO_CURATION_NAME VARCHAR2
) RETURN VARCHAR2 AS
BEGIN
  -- $Id$
  -- Creates uid for bio_experiment.

  RETURN 'BJOS:' || nvl(TO_CHAR(RECORD_ID), 'ERROR') || ':' || nvl(BIO_CURATION_NAME, 'ERROR');
END BIO_JUB_ONCOL_SUM_DATA_UID;
/


--
-- FRACT_ERROR_DIST  (Function) 
--
CREATE OR REPLACE FUNCTION           "FRACT_ERROR_DIST" 
( normInput IN NUMBER
) RETURN NUMBER AS

 -------------------------------------------------------------------------------
  -- implementation of fractional error distribution
  -- JWS@20090601 - First rev.
  -------------------------------------------------------------------------------
  -- temp var
  t1 NUMBER:= 1.0 / (1.0 + 0.5 * ABS(normInput));
  
  -- exponent input to next equation
  exponent_input NUMBER:= -normInput*normInput - 1.26551223 + 
                           t1*(1.00002368 + t1*(0.37409196 + t1*(0.09678418 + t1*(-0.18628806 + t1*(0.27886807 + t1*(-1.13520398 + t1*(1.48851587 + t1*(-0.82215223 + t1*(0.17087277)))))))));
  -- Horner's method
  ans NUMBER:= 1 - t1 * EXP(exponent_input);

  fractError NUMBER;

BEGIN
  -- handle sign
  IF normInput>0 THEN fractError:= ans; ELSE fractError:= -ans; END IF;
  return fractError;

END FRACT_ERROR_DIST; 
/


--
-- STRING_AGG  (Function) 
--
CREATE OR REPLACE FUNCTION           "STRING_AGG" (p_input VARCHAR2)
RETURN VARCHAR2
PARALLEL_ENABLE AGGREGATE USING t_string_agg; 
/


--
-- TAB_TO_STRING  (Function) 
--
CREATE OR REPLACE FUNCTION           "TAB_TO_STRING" (p_varchar2_tab  IN  t_varchar2_tab,
                                          p_delimiter     IN  VARCHAR2 DEFAULT ',') RETURN VARCHAR2 IS
  l_string     VARCHAR2(32767);
BEGIN
  FOR i IN p_varchar2_tab.FIRST .. p_varchar2_tab.LAST LOOP
    IF i != p_varchar2_tab.FIRST THEN
      l_string := l_string || p_delimiter;
    END IF;
    l_string := l_string || p_varchar2_tab(i);
  END LOOP;
  RETURN l_string;
END tab_to_string;
/


--
-- CTD_ARM_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_ARM_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, ARM, ARM_NBR_OF_PATIENTS_STUDIED, ARM_CLASSIFICATION_TYPE, 
 ARM_CLASSIFICATION_VALUE, ARM_ASTHMA_DURATION, ARM_GEOGRAPHIC_REGION, ARM_AGE, ARM_GENDER, 
 ARM_SMOKERS_PCT, ARM_FORMER_SMOKERS_PCT, ARM_NEVER_SMOKERS_PCT, ARM_PACK_YEARS, MINORITY_PARTICIPATION, 
 BASELINE_SYMPTOM_SCORE, BASELINE_RESCUE_MEDICATION_USE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."ARM",v."ARM_NBR_OF_PATIENTS_STUDIED",v."ARM_CLASSIFICATION_TYPE",v."ARM_CLASSIFICATION_VALUE",v."ARM_ASTHMA_DURATION",v."ARM_GEOGRAPHIC_REGION",v."ARM_AGE",v."ARM_GENDER",v."ARM_SMOKERS_PCT",v."ARM_FORMER_SMOKERS_PCT",v."ARM_NEVER_SMOKERS_PCT",v."ARM_PACK_YEARS",v."MINORITY_PARTICIPATION",v."BASELINE_SYMPTOM_SCORE",v."BASELINE_RESCUE_MEDICATION_USE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			ARM,
			ARM_NBR_OF_PATIENTS_STUDIED,
			ARM_CLASSIFICATION_TYPE,
			ARM_CLASSIFICATION_VALUE,
			ARM_ASTHMA_DURATION,
			ARM_GEOGRAPHIC_REGION,
			ARM_AGE,
			ARM_GENDER,
			ARM_SMOKERS_PCT,
			ARM_FORMER_SMOKERS_PCT,
			ARM_NEVER_SMOKERS_PCT,
			ARM_PACK_YEARS,
			MINORITY_PARTICIPATION,
			BASELINE_SYMPTOM_SCORE,
			BASELINE_RESCUE_MEDICATION_USE
from ctd_full
where ARM is not null
order by REF_ARTICLE_PROTOCOL_ID, ARM, to_number(ARM_NBR_OF_PATIENTS_STUDIED)
) v;


--
-- CTD_BIOMARKER_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_BIOMARKER_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, BIOMARKER_NAME, BIOMARKER_PCT, BIOMARKER_VALUE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."BIOMARKER_NAME",v."BIOMARKER_PCT",v."BIOMARKER_VALUE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			BIOMARKER_NAME,
			BIOMARKER_PCT,
			BIOMARKER_VALUE
from ctd_full
where BIOMARKER_NAME is not null
order by REF_ARTICLE_PROTOCOL_ID, BIOMARKER_NAME
) v;


--
-- CTD_CELL_INFO_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_CELL_INFO_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, CELLINFO_TYPE, CELLINFO_COUNT, CELLINFO_SOURCE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."CELLINFO_TYPE",v."CELLINFO_COUNT",v."CELLINFO_SOURCE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			CELLINFO_TYPE,
			CELLINFO_COUNT,
			CELLINFO_SOURCE
from ctd_full
where CELLINFO_TYPE is not null
order by REF_ARTICLE_PROTOCOL_ID, CELLINFO_TYPE
) v;


--
-- CTD_CLINICAL_CHARS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_CLINICAL_CHARS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, CLINICAL_VARIABLE, CLINICAL_VARIABLE_PCT, CLINICAL_VARIABLE_VALUE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."CLINICAL_VARIABLE",v."CLINICAL_VARIABLE_PCT",v."CLINICAL_VARIABLE_VALUE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			CLINICAL_VARIABLE,
			CLINICAL_VARIABLE_PCT,
			CLINICAL_VARIABLE_VALUE
from ctd_full
where CLINICAL_VARIABLE is not null 
order by REF_ARTICLE_PROTOCOL_ID, CLINICAL_VARIABLE
) v;


--
-- CTD_DRUG_EFFECTS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_DRUG_EFFECTS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, DISCONTINUATION_RATE, RESPONSE_RATE, DOWNSTREAM_SIGNALING_EFFECTS, 
 BENEFICIAL_EFFECTS, ADVERSE_EFFECTS, PK_PD_PARAMETER, PK_PD_VALUE, EFFECT_DESCRIPTION)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."DISCONTINUATION_RATE",v."RESPONSE_RATE",v."DOWNSTREAM_SIGNALING_EFFECTS",v."BENEFICIAL_EFFECTS",v."ADVERSE_EFFECTS",v."PK_PD_PARAMETER",v."PK_PD_VALUE",v."EFFECT_DESCRIPTION"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			DISCONTINUATION_RATE,
			RESPONSE_RATE,
			DOWNSTREAM_SIGNALING_EFFECTS,
			BENEFICIAL_EFFECTS,
			ADVERSE_EFFECTS,
			PK_PD_PARAMETER,
			PK_PD_VALUE,
			EFFECT_DESCRIPTION
from ctd_full
order by REF_ARTICLE_PROTOCOL_ID, BENEFICIAL_EFFECTS, ADVERSE_EFFECTS
) v;


--
-- CTD_DRUG_INHIBITOR_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_DRUG_INHIBITOR_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, DRUG_INHIBITOR_COMMON_NAME, DRUG_INHIBITOR_STANDARD_NAME, DRUG_INHIBITOR_CAS_ID)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."DRUG_INHIBITOR_COMMON_NAME",v."DRUG_INHIBITOR_STANDARD_NAME",v."DRUG_INHIBITOR_CAS_ID"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
  	DRUG_INHIBITOR_COMMON_NAME,
	DRUG_INHIBITOR_STANDARD_NAME,
	DRUG_INHIBITOR_CAS_ID
from ctd_full
order by REF_ARTICLE_PROTOCOL_ID, DRUG_INHIBITOR_COMMON_NAME
) v;


--
-- CTD_EVENTS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_EVENTS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, DEFINITION_OF_THE_EVENT, NUMBER_OF_EVENTS, EVENT_RATE, 
 TIME_TO_EVENT, EVENT_PCT_REDUCTION, EVENT_P_VALUE, EVENT_DESCRIPTION)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."DEFINITION_OF_THE_EVENT",v."NUMBER_OF_EVENTS",v."EVENT_RATE",v."TIME_TO_EVENT",v."EVENT_PCT_REDUCTION",v."EVENT_P_VALUE",v."EVENT_DESCRIPTION"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			DEFINITION_OF_THE_EVENT,
			NUMBER_OF_EVENTS,
			EVENT_RATE,
			TIME_TO_EVENT,
			EVENT_PCT_REDUCTION,
			EVENT_P_VALUE,
			EVENT_DESCRIPTION
from ctd_full
where DEFINITION_OF_THE_EVENT is not null or EVENT_DESCRIPTION is not null
order by REF_ARTICLE_PROTOCOL_ID, DEFINITION_OF_THE_EVENT
) v;


--
-- CTD_EXPERIMENTS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_EXPERIMENTS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, DRUG_INHIBITOR_COMMON_NAME, DRUG_INHIBITOR_DOSE, DRUG_INHIBITOR_TIME_PERIOD, 
 DRUG_INHIBITOR_ROUTE_OF_ADMIN, DRUG_INHIBITOR_TRTMT_REGIME, COMPARATOR_NAME, COMPARATOR_DOSE, COMPARATOR_TIME_PERIOD, 
 COMPARATOR_ROUTE_OF_ADMIN, TREATMENT_REGIME, PLACEBO, EXPERIMENT_DESCRIPTION)
AS 
SELECT   ROWNUM AS ID,
            v."REF_ARTICLE_PROTOCOL_ID",
            v."DRUG_INHIBITOR_COMMON_NAME",
            v."DRUG_INHIBITOR_DOSE",
            v."DRUG_INHIBITOR_TIME_PERIOD",
            v."DRUG_INHIBITOR_ROUTE_OF_ADMIN",
            v."DRUG_INHIBITOR_TRTMT_REGIME",
            v."COMPARATOR_NAME",
            v."COMPARATOR_DOSE",
            v."COMPARATOR_TIME_PERIOD",
            v."COMPARATOR_ROUTE_OF_ADMIN",
            v."TREATMENT_REGIME",
            v."PLACEBO",
            v."EXPERIMENT_DESCRIPTION"
     FROM   (  SELECT   DISTINCT REF_ARTICLE_PROTOCOL_ID,
                                 DRUG_INHIBITOR_COMMON_NAME,
                                 DRUG_INHIBITOR_TIME_PERIOD,
                                 DRUG_INHIBITOR_DOSE,
                                 DRUG_INHIBITOR_ROUTE_OF_ADMIN,
                                 DRUG_INHIBITOR_TRTMT_REGIME,
                                 COMPARATOR_NAME,
                                 COMPARATOR_DOSE,
                                 COMPARATOR_TIME_PERIOD,
                                 COMPARATOR_ROUTE_OF_ADMIN,
                                 TREATMENT_REGIME,
                                 PLACEBO,
                                 EXPERIMENT_DESCRIPTION
                 FROM   ctd_full
             ORDER BY   REF_ARTICLE_PROTOCOL_ID,
                        DRUG_INHIBITOR_COMMON_NAME,
                        DRUG_INHIBITOR_TRTMT_REGIME) v;


--
-- CTD_EXPR_AFTER_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_EXPR_AFTER_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, BIOMOLECULE_NAME, EXPR_AFTER_TRTMT_PCT, EXPR_AFTER_TRTMT_NUMBER, 
 EXPR_AFTERTRTMT_VALUEFOLD_MEAN, EXPR_AFTER_TRTMT_SD, EXPR_AFTER_TRTMT_SEM, EXPR_AFTER_TRTMT_UNIT)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."BIOMOLECULE_NAME",v."EXPR_AFTER_TRTMT_PCT",v."EXPR_AFTER_TRTMT_NUMBER",v."EXPR_AFTERTRTMT_VALUEFOLD_MEAN",v."EXPR_AFTER_TRTMT_SD",v."EXPR_AFTER_TRTMT_SEM",v."EXPR_AFTER_TRTMT_UNIT"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			BIOMOLECULE_NAME,
			EXPR_AFTER_TRTMT_PCT,
			EXPR_AFTER_TRTMT_NUMBER,
			EXPR_AFTERTRTMT_VALUEFOLD_MEAN,
			EXPR_AFTER_TRTMT_SD,
			EXPR_AFTER_TRTMT_SEM,
			EXPR_AFTER_TRTMT_UNIT
from ctd_full
where BIOMOLECULE_NAME is not null or EXPR_AFTERTRTMT_VALUEFOLD_MEAN is not null
order by REF_ARTICLE_PROTOCOL_ID, BIOMOLECULE_NAME
) v;


--
-- CTD_EXPR_BASELINE_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_EXPR_BASELINE_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, BIOMOLECULE_NAME, BASELINE_EXPR_PCT, BASELINE_EXPR_NUMBER, 
 BASELINE_EXPR_VALUE_FOLD_MEAN, BASELINE_EXPR_SD, BASELINE_EXPR_SEM, BASELINE_EXPR_UNIT)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."BIOMOLECULE_NAME",v."BASELINE_EXPR_PCT",v."BASELINE_EXPR_NUMBER",v."BASELINE_EXPR_VALUE_FOLD_MEAN",v."BASELINE_EXPR_SD",v."BASELINE_EXPR_SEM",v."BASELINE_EXPR_UNIT"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			BIOMOLECULE_NAME,
			BASELINE_EXPR_PCT,
			BASELINE_EXPR_NUMBER,
			BASELINE_EXPR_VALUE_FOLD_MEAN,
			BASELINE_EXPR_SD,
			BASELINE_EXPR_SEM,
			BASELINE_EXPR_UNIT
from ctd_full
where BIOMOLECULE_NAME is not null or  BASELINE_EXPR_VALUE_FOLD_MEAN is not null
order by REF_ARTICLE_PROTOCOL_ID, BIOMOLECULE_NAME
) v;


--
-- CTD_EXPR_BIO_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_EXPR_BIO_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, BIOMOLECULE_NAME, BIOMOLECULE_ID, BIOMOLECULE_TYPE, 
 BIOMARKER, BIOMARKER_TYPE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."BIOMOLECULE_NAME",v."BIOMOLECULE_ID",v."BIOMOLECULE_TYPE",v."BIOMARKER",v."BIOMARKER_TYPE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			BIOMOLECULE_NAME,
			BIOMOLECULE_ID,
			BIOMOLECULE_TYPE,
			BIOMARKER,
			BIOMARKER_TYPE
from ctd_full
where BIOMOLECULE_NAME is not null or BIOMOLECULE_ID is not null
order by REF_ARTICLE_PROTOCOL_ID, BIOMOLECULE_NAME
) v;


--
-- CTD_EXPR_SOURCE_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_EXPR_SOURCE_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, EXPR_CHG_SOURCE_TYPE, EXPR_CHG_TECHNIQUE, EXPR_CHG_DESCRIPTION)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."EXPR_CHG_SOURCE_TYPE",v."EXPR_CHG_TECHNIQUE",v."EXPR_CHG_DESCRIPTION"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
      			EXPR_CHG_SOURCE_TYPE,
			EXPR_CHG_TECHNIQUE,
			EXPR_CHG_DESCRIPTION
from ctd_full
where EXPR_CHG_SOURCE_TYPE is not null or EXPR_CHG_DESCRIPTION is not null
order by REF_ARTICLE_PROTOCOL_ID, EXPR_CHG_SOURCE_TYPE
) v;


--
-- CTD_FULL_CLINICAL_ENDPTS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_FULL_CLINICAL_ENDPTS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, PRIMARY_ENDPOINT_TYPE, PRIMARY_ENDPOINT_DEFINITION, PRIMARY_ENDPOINT_CHANGE, 
 PRIMARY_ENDPOINT_TIME_PERIOD, PRIMARY_ENDPOINT_P_VALUE, PRIMARY_ENDPOINT_STAT_TEST, SECONDARY_TYPE, SECONDARY_TYPE_DEFINITION, 
 SECONDARY_TYPE_CHANGE, SECONDARY_TYPE_TIME_PERIOD, SECONDARY_TYPE_P_VALUE, SECONDARY_TYPE_STAT_TEST)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."PRIMARY_ENDPOINT_TYPE",v."PRIMARY_ENDPOINT_DEFINITION",v."PRIMARY_ENDPOINT_CHANGE",v."PRIMARY_ENDPOINT_TIME_PERIOD",v."PRIMARY_ENDPOINT_P_VALUE",v."PRIMARY_ENDPOINT_STAT_TEST",v."SECONDARY_TYPE",v."SECONDARY_TYPE_DEFINITION",v."SECONDARY_TYPE_CHANGE",v."SECONDARY_TYPE_TIME_PERIOD",v."SECONDARY_TYPE_P_VALUE",v."SECONDARY_TYPE_STAT_TEST"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			PRIMARY_ENDPOINT_TYPE,
			PRIMARY_ENDPOINT_DEFINITION,
			PRIMARY_ENDPOINT_CHANGE,
			PRIMARY_ENDPOINT_TIME_PERIOD,
			PRIMARY_ENDPOINT_P_VALUE,
			PRIMARY_ENDPOINT_STAT_TEST,
			SECONDARY_TYPE,
			SECONDARY_TYPE_DEFINITION,
			SECONDARY_TYPE_CHANGE,
			SECONDARY_TYPE_TIME_PERIOD,
			SECONDARY_TYPE_P_VALUE,
			SECONDARY_TYPE_STAT_TEST
from CTD_FULL
order by REF_ARTICLE_PROTOCOL_ID
) v;


--
-- CTD_FULL_SEARCH_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_FULL_SEARCH_VIEW
(FACT_ID, REF_ARTICLE_PROTOCOL_ID, MESH, COMMON_NAME, DRUG_INHIBITOR_STANDARD_NAME, 
 PRIMARY_ENDPOINT_TYPE, SECONDARY_TYPE, BIOMARKER_NAME, DISEASE_SEVERITY, INHALED_STEROID_DOSE, 
 FEV1, PRIMARY_ENDPOINT_TIME_PERIOD, PRIMARY_ENDPOINT_CHANGE, PRIMARY_ENDPOINT_P_VALUE)
AS 
select rownum as fact_id, t."REF_ARTICLE_PROTOCOL_ID",t."MESH",t."COMMON_NAME",t."DRUG_INHIBITOR_STANDARD_NAME",t."PRIMARY_ENDPOINT_TYPE",t."SECONDARY_TYPE",t."BIOMARKER_NAME",t."DISEASE_SEVERITY",t."INHALED_STEROID_DOSE",t."FEV1",t."PRIMARY_ENDPOINT_TIME_PERIOD",t."PRIMARY_ENDPOINT_CHANGE",t."PRIMARY_ENDPOINT_P_VALUE"
from 
(
SELECT distinct ref_Article_Protocol_Id, mesh, common_Name, drug_Inhibitor_Standard_Name,
	   primary_Endpoint_Type, secondary_Type, biomarker_Name, disease_Severity,
	   inhaled_Steroid_Dose, fev1, primary_Endpoint_Time_Period, primary_Endpoint_Change,  primary_Endpoint_P_Value     
FROM BIOMART.CTD_FULL
) t;


--
-- CTD_PRIMARY_ENDPTS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_PRIMARY_ENDPTS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, PRIMARY_ENDPOINT_TYPE, PRIMARY_ENDPOINT_DEFINITION, PRIMARY_ENDPOINT_CHANGE, 
 PRIMARY_ENDPOINT_TIME_PERIOD, PRIMARY_ENDPOINT_P_VALUE, PRIMARY_ENDPOINT_STAT_TEST)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."PRIMARY_ENDPOINT_TYPE",v."PRIMARY_ENDPOINT_DEFINITION",v."PRIMARY_ENDPOINT_CHANGE",v."PRIMARY_ENDPOINT_TIME_PERIOD",v."PRIMARY_ENDPOINT_P_VALUE",v."PRIMARY_ENDPOINT_STAT_TEST"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			PRIMARY_ENDPOINT_TYPE,
			PRIMARY_ENDPOINT_DEFINITION,
			PRIMARY_ENDPOINT_CHANGE,
			PRIMARY_ENDPOINT_TIME_PERIOD,
			PRIMARY_ENDPOINT_P_VALUE,
			PRIMARY_ENDPOINT_STAT_TEST
from CTD_FULL
where PRIMARY_ENDPOINT_TYPE is not null or PRIMARY_ENDPOINT_DEFINITION is not null
order by REF_ARTICLE_PROTOCOL_ID, PRIMARY_ENDPOINT_TYPE
) v;


--
-- CTD_PRIOR_MED_USE_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_PRIOR_MED_USE_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, PRIOR_MED_DRUG_NAME, PRIOR_MED_PCT, PRIOR_MED_VALUE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."PRIOR_MED_DRUG_NAME",v."PRIOR_MED_PCT",v."PRIOR_MED_VALUE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			PRIOR_MED_DRUG_NAME,
			PRIOR_MED_PCT,
			PRIOR_MED_VALUE
from ctd_full
where PRIOR_MED_DRUG_NAME is not null
order by REF_ARTICLE_PROTOCOL_ID, PRIOR_MED_DRUG_NAME
) v;


--
-- CTD_PULMONARY_PATH_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_PULMONARY_PATH_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, PULMONARY_PATHOLOGY_NAME, PULMPATH_PATIENT_PCT, PULMPATH_VALUE_UNIT, 
 PULMPATH_METHOD)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."PULMONARY_PATHOLOGY_NAME",v."PULMPATH_PATIENT_PCT",v."PULMPATH_VALUE_UNIT",v."PULMPATH_METHOD"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			PULMONARY_PATHOLOGY_NAME,
			PULMPATH_PATIENT_PCT,
			PULMPATH_VALUE_UNIT,
			PULMPATH_METHOD
from ctd_full
where PULMONARY_PATHOLOGY_NAME is not null
order by REF_ARTICLE_PROTOCOL_ID, PULMONARY_PATHOLOGY_NAME
) v;


--
-- CTD_QUANT_PARAMS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_QUANT_PARAMS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, CLINICAL_VARIABLE_NAME, PCT_CHANGE_FROM_BASELINE, ABS_CHANGE_FROM_BASELINE, 
 RATE_OF_CHANGE_FROM_BASELINE, AVERAGE_OVER_TREATMENT_PERIOD, WITHIN_GROUP_CHANGES, STAT_MEASURE_P_VALUE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."CLINICAL_VARIABLE_NAME",v."PCT_CHANGE_FROM_BASELINE",v."ABS_CHANGE_FROM_BASELINE",v."RATE_OF_CHANGE_FROM_BASELINE",v."AVERAGE_OVER_TREATMENT_PERIOD",v."WITHIN_GROUP_CHANGES",v."STAT_MEASURE_P_VALUE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			CLINICAL_VARIABLE_NAME,
			PCT_CHANGE_FROM_BASELINE,
			ABS_CHANGE_FROM_BASELINE,
			RATE_OF_CHANGE_FROM_BASELINE,
			AVERAGE_OVER_TREATMENT_PERIOD,
			WITHIN_GROUP_CHANGES,
			STAT_MEASURE_P_VALUE
from ctd_full
where CLINICAL_VARIABLE_NAME is not null
order by REF_ARTICLE_PROTOCOL_ID
) v;


--
-- CTD_REFERENCE_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_REFERENCE_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, REF_ARTICLE_PMID, REF_PROTOCOL_ID, REF_TITLE, 
 REF_RECORD_ID, REF_BACK_REFERENCE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."REF_ARTICLE_PMID",v."REF_PROTOCOL_ID",v."REF_TITLE",v."REF_RECORD_ID",v."REF_BACK_REFERENCE"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			REF_ARTICLE_PMID,
			REF_PROTOCOL_ID,
			REF_TITLE,			
     			REF_RECORD_ID,
			REF_BACK_REFERENCE
from ctd_full
order by REF_ARTICLE_PROTOCOL_ID, REF_RECORD_ID
) v;


--
-- CTD_RUNIN_THERAPIES_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_RUNIN_THERAPIES_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, RUNIN_OCS, RUNIN_ICS, RUNIN_LABA, 
 RUNIN_LTRA, RUNIN_CORTICOSTEROIDS, RUNIN_ANTI_FIBROTICS, RUNIN_IMMUNOSUPPRESSIVE, RUNIN_CYTOTOXIC, 
 RUNIN_DESCRIPTION)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."RUNIN_OCS",v."RUNIN_ICS",v."RUNIN_LABA",v."RUNIN_LTRA",v."RUNIN_CORTICOSTEROIDS",v."RUNIN_ANTI_FIBROTICS",v."RUNIN_IMMUNOSUPPRESSIVE",v."RUNIN_CYTOTOXIC",v."RUNIN_DESCRIPTION"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			RUNIN_OCS,
			RUNIN_ICS,
			RUNIN_LABA,
			RUNIN_LTRA,
			RUNIN_CORTICOSTEROIDS,
			RUNIN_ANTI_FIBROTICS,
			RUNIN_IMMUNOSUPPRESSIVE,
			RUNIN_CYTOTOXIC,
			RUNIN_DESCRIPTION
from ctd_full
where RUNIN_OCS is not null or RUNIN_DESCRIPTION is not null or RUNIN_IMMUNOSUPPRESSIVE is not null
order by REF_ARTICLE_PROTOCOL_ID, RUNIN_DESCRIPTION, RUNIN_DESCRIPTION
) v;


--
-- CTD_SECONDARY_ENDPTS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_SECONDARY_ENDPTS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, SECONDARY_TYPE, SECONDARY_TYPE_DEFINITION, SECONDARY_TYPE_CHANGE, 
 SECONDARY_TYPE_TIME_PERIOD, SECONDARY_TYPE_P_VALUE, SECONDARY_TYPE_STAT_TEST)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."SECONDARY_TYPE",v."SECONDARY_TYPE_DEFINITION",v."SECONDARY_TYPE_CHANGE",v."SECONDARY_TYPE_TIME_PERIOD",v."SECONDARY_TYPE_P_VALUE",v."SECONDARY_TYPE_STAT_TEST"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			SECONDARY_TYPE,
			SECONDARY_TYPE_DEFINITION,
			SECONDARY_TYPE_CHANGE,
			SECONDARY_TYPE_TIME_PERIOD,
			SECONDARY_TYPE_P_VALUE,
			SECONDARY_TYPE_STAT_TEST
from CTD_FULL
where SECONDARY_TYPE is not null or SECONDARY_TYPE_DEFINITION is not null
order by REF_ARTICLE_PROTOCOL_ID, SECONDARY_TYPE
) v;


--
-- CTD_STATS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_STATS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, CLINICAL_CORRELATION, STATISTICAL_TEST, STATISTICAL_COEFFICIENT_VALUE, 
 STATISTICAL_TEST_P_VALUE, STATISTICAL_TEST_DESCRIPTION)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."CLINICAL_CORRELATION",v."STATISTICAL_TEST",v."STATISTICAL_COEFFICIENT_VALUE",v."STATISTICAL_TEST_P_VALUE",v."STATISTICAL_TEST_DESCRIPTION"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			CLINICAL_CORRELATION,
			STATISTICAL_TEST,
			STATISTICAL_COEFFICIENT_VALUE,
			STATISTICAL_TEST_P_VALUE,
			STATISTICAL_TEST_DESCRIPTION
from ctd_full
where STATISTICAL_TEST_DESCRIPTION is not null or STATISTICAL_TEST is not null
order by REF_ARTICLE_PROTOCOL_ID, STATISTICAL_TEST
) v;


--
-- CTD_STUDY_DETAILS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_STUDY_DETAILS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, STUDY_TYPE, COMMON_NAME, ICD10, 
 MESH, DISEASE_TYPE, PHYSIOLOGY_NAME)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."STUDY_TYPE",v."COMMON_NAME",v."ICD10",v."MESH",v."DISEASE_TYPE",v."PHYSIOLOGY_NAME"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
      STUDY_TYPE,
			COMMON_NAME,
			ICD10,
			MESH,
			DISEASE_TYPE,
			PHYSIOLOGY_NAME
from ctd_full
where COMMON_NAME is not null
order by REF_ARTICLE_PROTOCOL_ID, COMMON_NAME
) v;


--
-- CTD_TD_DESIGN_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_TD_DESIGN_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, NATURE_OF_TRIAL, RANDOMIZATION, BLINDED_TRIAL, 
 TRIAL_TYPE, RUN_IN_PERIOD, TREATMENT_PERIOD, WASHOUT_PERIOD, OPEN_LABEL_EXTENSION)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."NATURE_OF_TRIAL",v."RANDOMIZATION",v."BLINDED_TRIAL",v."TRIAL_TYPE",v."RUN_IN_PERIOD",v."TREATMENT_PERIOD",v."WASHOUT_PERIOD",v."OPEN_LABEL_EXTENSION"
  from (
  select distinct REF_ARTICLE_PROTOCOL_ID,
        NATURE_OF_TRIAL,
        RANDOMIZATION,
        BLINDED_TRIAL,
        TRIAL_TYPE,
        RUN_IN_PERIOD,
        TREATMENT_PERIOD,
        WASHOUT_PERIOD,
        OPEN_LABEL_EXTENSION
  from ctd_full
  where TRIAL_TYPE is not null or NATURE_OF_TRIAL is not null
  order by REF_ARTICLE_PROTOCOL_ID, NATURE_OF_TRIAL, TRIAL_TYPE
  ) v;


--
-- CTD_TD_EXCL_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_TD_EXCL_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, EXCLUSION_CRITERIA1, EXCLUSION_CRITERIA2, MINIMAL_SYMPTOMS, 
 RESCUE_MEDICATION_USE, CONTROL_DETAILS, BLINDING_PROCEDURE, NUMBER_OF_ARMS, DESCRIPTION1, 
 DESCRIPTION2)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."EXCLUSION_CRITERIA1",v."EXCLUSION_CRITERIA2",v."MINIMAL_SYMPTOMS",v."RESCUE_MEDICATION_USE",v."CONTROL_DETAILS",v."BLINDING_PROCEDURE",v."NUMBER_OF_ARMS",v."DESCRIPTION1",v."DESCRIPTION2"
from (
  select distinct REF_ARTICLE_PROTOCOL_ID,
     	dbms_lob.substr(EXCLUSION_CRITERIA, 4000, 1) as EXCLUSION_CRITERIA1, 
	dbms_lob.substr(EXCLUSION_CRITERIA, 2000, 4001) as EXCLUSION_CRITERIA2,       
	MINIMAL_SYMPTOMS,
	RESCUE_MEDICATION_USE,
	CONTROL_DETAILS,
	BLINDING_PROCEDURE,
	NUMBER_OF_ARMS,
      	dbms_lob.substr(DESCRIPTION, 4000, 1) as DESCRIPTION1,
	dbms_lob.substr(DESCRIPTION, 2000, 4001) as DESCRIPTION2  
  from ctd_full
  where BLINDING_PROCEDURE is not null or NUMBER_OF_ARMS is not null
  order by REF_ARTICLE_PROTOCOL_ID
  ) v;


--
-- CTD_TD_INCLUSION_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_TD_INCLUSION_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, TRIAL_AGE, DISEASE_SEVERITY, DIFFICULT_TO_TREAT, 
 ASTHMA_DIAGNOSIS, INHALED_STEROID_DOSE, LABA, OCS, XOLAIR, 
 LTRA_INHIBITORS, ASTHMA_PHENOTYPE, FEV1, FEV1_REVERSIBILITY, TLC, 
 FEV1_FVC, FVC, DLCO, SGRQ, HRCT, 
 BIOPSY, DYSPNEA_ON_EXERTION, CONCOMITANT_MED)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."TRIAL_AGE",v."DISEASE_SEVERITY",v."DIFFICULT_TO_TREAT",v."ASTHMA_DIAGNOSIS",v."INHALED_STEROID_DOSE",v."LABA",v."OCS",v."XOLAIR",v."LTRA_INHIBITORS",v."ASTHMA_PHENOTYPE",v."FEV1",v."FEV1_REVERSIBILITY",v."TLC",v."FEV1_FVC",v."FVC",v."DLCO",v."SGRQ",v."HRCT",v."BIOPSY",v."DYSPNEA_ON_EXERTION",v."CONCOMITANT_MED"
  from (
  select distinct REF_ARTICLE_PROTOCOL_ID,
        TRIAL_AGE,
        DISEASE_SEVERITY,
        DIFFICULT_TO_TREAT,
        ASTHMA_DIAGNOSIS,
        INHALED_STEROID_DOSE,
        LABA,
        OCS,
        XOLAIR,
        LTRA_INHIBITORS,
        ASTHMA_PHENOTYPE,
        FEV1,
        FEV1_REVERSIBILITY,
        TLC,
        FEV1_FVC,
        FVC,
        DLCO,
        SGRQ,
        HRCT,
        BIOPSY,
        DYSPNEA_ON_EXERTION,
        CONCOMITANT_MED
  from ctd_full
  where FEV1 is not null or  DISEASE_SEVERITY is not null or TRIAL_AGE is not null
  order by REF_ARTICLE_PROTOCOL_ID, DISEASE_SEVERITY, FEV1
  ) v;


--
-- CTD_TD_SMOKER_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_TD_SMOKER_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, TRIAL_SMOKERS_PCT, TRIAL_FORMER_SMOKERS_PCT, TRIAL_NEVER_SMOKERS_PCT, 
 TRIAL_PACK_YEARS)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."TRIAL_SMOKERS_PCT",v."TRIAL_FORMER_SMOKERS_PCT",v."TRIAL_NEVER_SMOKERS_PCT",v."TRIAL_PACK_YEARS"
  from (
  select distinct REF_ARTICLE_PROTOCOL_ID,
        TRIAL_SMOKERS_PCT,
        TRIAL_FORMER_SMOKERS_PCT,
        TRIAL_NEVER_SMOKERS_PCT,
        TRIAL_PACK_YEARS	
  from ctd_full
  where TRIAL_SMOKERS_PCT is not null or TRIAL_NEVER_SMOKERS_PCT is not null
  order by REF_ARTICLE_PROTOCOL_ID, TRIAL_SMOKERS_PCT
  ) v;


--
-- CTD_TD_SPONSOR_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_TD_SPONSOR_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, SPONSOR, TRIAL_NBR_OF_PATIENTS_STUDIED, SOURCE_TYPE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."SPONSOR",v."TRIAL_NBR_OF_PATIENTS_STUDIED",v."SOURCE_TYPE"
  from (
  select distinct REF_ARTICLE_PROTOCOL_ID,
      SPONSOR,
      TRIAL_NBR_OF_PATIENTS_STUDIED,
      SOURCE_TYPE
  from ctd_full
  where SPONSOR is not null or TRIAL_NBR_OF_PATIENTS_STUDIED  is not null
  order by REF_ARTICLE_PROTOCOL_ID, SPONSOR, TRIAL_NBR_OF_PATIENTS_STUDIED
  ) v;


--
-- CTD_TD_STATUS_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_TD_STATUS_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, TRIAL_STATUS, TRIAL_PHASE)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."TRIAL_STATUS",v."TRIAL_PHASE"
  from (
  select distinct REF_ARTICLE_PROTOCOL_ID,
        TRIAL_STATUS,
        TRIAL_PHASE   
  from ctd_full
  where TRIAL_STATUS is not null or TRIAL_PHASE is not null
  order by REF_ARTICLE_PROTOCOL_ID
  ) v;


--
-- CTD_TREATMENT_PHASES_VIEW  (View) 
--
CREATE OR REPLACE FORCE VIEW CTD_TREATMENT_PHASES_VIEW
(ID, REF_ARTICLE_PROTOCOL_ID, TRTMT_OCS, TRTMT_ICS, TRTMT_LABA, 
 TRTMT_LTRA, TRTMT_CORTICOSTEROIDS, TRTMT_ANTI_FIBROTICS, TRTMT_IMMUNOSUPPRESSIVE, TRTMT_CYTOTOXIC, 
 TRTMT_DESCRIPTION)
AS 
select rownum as ID, v."REF_ARTICLE_PROTOCOL_ID",v."TRTMT_OCS",v."TRTMT_ICS",v."TRTMT_LABA",v."TRTMT_LTRA",v."TRTMT_CORTICOSTEROIDS",v."TRTMT_ANTI_FIBROTICS",v."TRTMT_IMMUNOSUPPRESSIVE",v."TRTMT_CYTOTOXIC",v."TRTMT_DESCRIPTION"
from 
(
select distinct REF_ARTICLE_PROTOCOL_ID,
			TRTMT_OCS,
			TRTMT_ICS,
			TRTMT_LABA,
			TRTMT_LTRA,
			TRTMT_CORTICOSTEROIDS,
			TRTMT_ANTI_FIBROTICS,
			TRTMT_IMMUNOSUPPRESSIVE,
			TRTMT_CYTOTOXIC,
			TRTMT_DESCRIPTION
from ctd_full
where TRTMT_OCS is not null or TRTMT_DESCRIPTION is not null or TRTMT_IMMUNOSUPPRESSIVE is not null
order by REF_ARTICLE_PROTOCOL_ID, TRTMT_DESCRIPTION, TRTMT_OCS
) v;


--
-- VW_FACETED_SEARCH_DISEASE  (View) 
--
CREATE OR REPLACE FORCE VIEW VW_FACETED_SEARCH_DISEASE
(BIO_ASSAY_ANALYSIS_ID, SOLR_HIERARCHY)
AS 
SELECT z.bio_assay_analysis_id ,
    REPLACE(trim(leading '/'
  FROM solr_hierarchy),'//','/') AS solr_hierarchy
  FROM
    (SELECT y.bio_assay_analysis_id ,
      listagg(y.path,'/') within GROUP (
    ORDER BY y.path) AS solr_hierarchy
    FROM
      (SELECT x.bio_assay_analysis_id,
        x.top_node,
        MAX(x.path) AS path
      FROM
        ( SELECT DISTINCT bdd.bio_data_id AS bio_assay_analysis_id ,
          SUBSTR(mp.path,2,11)            AS top_node ,
          mp.path                         AS path
        FROM biomart.bio_data_disease bdd ,
          biomart.bio_disease bd ,
          (SELECT mc.ui AS unique_id,
            mc.mh       AS mesh_name,
            mc.mn       AS child_number ,
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END AS parent_number ,
            SYS_CONNECT_BY_PATH('DIS:'
            || mc.ui, '/') AS path
          FROM biomart.mesh mc
            START WITH instr(mc.mn,'.') = 0
            CONNECT BY prior mc.mn      =
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END
          ) mc ,
          (SELECT mc.ui AS unique_id,
            mc.mh       AS mesh_name,
            mc.mn       AS child_number ,
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END AS parent_number ,
            SYS_CONNECT_BY_PATH('DIS:'
            || mc.ui, '/') AS path
          FROM biomart.mesh mc
            START WITH instr(mc.mn,'.') = 0
            CONNECT BY prior mc.mn      =
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END
          ) mp
        WHERE bdd.bio_disease_id = bd.bio_disease_id
          --and bdd.etl_source like 'TEST%'
        AND bd.mesh_code = mc.unique_id
        AND mc.child_number LIKE mp.child_number
          || '%'
        ) x
      GROUP BY x.bio_assay_analysis_id,
        x.top_node
      ORDER BY x.bio_assay_analysis_id
      ) y
    GROUP BY y.bio_assay_analysis_id
    ) z
  ORDER BY bio_assay_analysis_id;


--
-- VW_FACETED_SEARCH_DISEASE_HX  (View) 
--
CREATE OR REPLACE FORCE VIEW VW_FACETED_SEARCH_DISEASE_HX
(BIO_ASSAY_ANALYSIS_ID, SOLR_HIERARCHY)
AS 
SELECT z.bio_assay_analysis_id ,
    REPLACE(trim(leading '/'
  FROM solr_hierarchy),'//','/') AS solr_hierarchy
  FROM
    (SELECT y.bio_assay_analysis_id ,
      listagg(y.path,'/') within GROUP (
    ORDER BY y.path) AS solr_hierarchy
    FROM
      (SELECT x.bio_assay_analysis_id,
        x.top_node,
        MAX(x.path) AS path
      FROM
        ( SELECT DISTINCT bdd.bio_data_id AS bio_assay_analysis_id ,
          SUBSTR(mp.path,2,11)            AS top_node ,
          mp.path                         AS path
        FROM biomart.bio_data_disease bdd ,
          biomart.bio_disease bd ,
          (SELECT mc.ui AS unique_id,
            mc.mh       AS mesh_name,
            mc.mn       AS child_number ,
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END AS parent_number ,
            SYS_CONNECT_BY_PATH('DIS:'
            || mc.ui, '/') AS path
          FROM biomart.mesh mc
            START WITH instr(mc.mn,'.') = 0
            CONNECT BY prior mc.mn      =
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END
          ) mc ,
          (SELECT mc.ui AS unique_id,
            mc.mh       AS mesh_name,
            mc.mn       AS child_number ,
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END AS parent_number ,
            SYS_CONNECT_BY_PATH('DIS:'
            || mc.ui, '/') AS path
          FROM biomart.mesh mc
            START WITH instr(mc.mn,'.') = 0
            CONNECT BY prior mc.mn      =
            CASE
              WHEN instr(mc.mn,'.') = 0
              THEN NULL
              ELSE SUBSTR(mc.mn,1,instr(mc.mn,'.',-1)-1)
            END
          ) mp
        WHERE bdd.bio_disease_id = bd.bio_disease_id
          --and bdd.etl_source like 'TEST%'
        AND bd.mesh_code = mc.unique_id
        AND mc.child_number LIKE mp.child_number
          || '%'
        ) x
      GROUP BY x.bio_assay_analysis_id,
        x.top_node
      ORDER BY x.bio_assay_analysis_id
      ) y
    GROUP BY y.bio_assay_analysis_id
    ) z
  ORDER BY bio_assay_analysis_id;


--
-- LOGON_TRIGGER  (Trigger) 
--
CREATE OR REPLACE TRIGGER LOGON_TRIGGER 
AFTER LOGON ON DATABASE
DECLARE
v_user_identifier varchar2(64);
BEGIN
SELECT SYS_CONTEXT('USERENV', 'OS_USER')
       ||':'||
       SYS_CONTEXT('USERENV', 'IP_ADDRESS')
  INTO v_user_identifier
  FROM dual;
DBMS_SESSION.SET_IDENTIFIER(v_user_identifier);
END;
/


--
-- TGR_BIO_SPECIES_ORGANISM_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TGR_BIO_SPECIES_ORGANISM_ID 
  before insert ON BIO_SPECIES_ORGANISM for each row
begin 
    If Inserting 
      Then If :New.id Is Null 
        Then Select Seq_Bio_Data_Id.Nextval Into :New.id From Dual; 
      End If; 
    end if;
end;
/


--
-- TMP_TRG_BIO_CONCEPT_CODE_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TMP_TRG_BIO_CONCEPT_CODE_ID before insert on "BIO_CONCEPT_CODE"    for each row
begin     if inserting then       if :NEW."BIO_CONCEPT_CODE_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CONCEPT_CODE_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_AD_HOC_PROP_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_AD_HOC_PROP_ID before
  INSERT ON BIO_AD_HOC_PROPERTY FOR EACH row
BEGIN IF inserting THEN IF :NEW."AD_HOC_PROPERTY_ID" IS NULL THEN
  SELECT SEQ_BIO_DATA_ID.nextval INTO :NEW."AD_HOC_PROPERTY_ID" FROM dual;
END IF;
END IF;
END;
/


--
-- TRG_BIO_ANALYSIS_ATTRIBUTE_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ANALYSIS_ATTRIBUTE_ID 
  before insert ON BIO_ANALYSIS_ATTRIBUTE
  for each row
declare
  -- local variables here
begin
  if inserting then       
    if :NEW.BIO_ANALYSIS_ATTRIBUTE_ID is null then
      select SEQ_BIO_DATA_ID.nextval into :NEW.BIO_ANALYSIS_ATTRIBUTE_ID from dual;
    end if;
    
  end if;   
  
end TRG_BIO_ANALYSIS_ATTRIBUTE_ID;
/


--
-- TRG_BIO_ANALYSIS_ATT_BAAL  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ANALYSIS_ATT_BAAL 
  after insert ON BIO_ANALYSIS_ATTRIBUTE
  for each row
DISABLE
declare
  -- local variables here
begin
  if inserting then       
    -- create a new record in the lineage table for each ancestor of this term (including self)
    insert into BIO_ANALYSIS_ATTRIBUTE_LINEAGE 
    (BIO_ANALYSIS_ATTRIBUTE_ID, ANCESTOR_TERM_ID, ANCESTOR_SEARCH_KEYWORD_ID)
    SELECT :NEW.BIO_ANALYSIS_ATTRIBUTE_ID, skl.ancestor_id, skl.search_keyword_id 
    FROM searchapp.solr_keywords_lineage skl
    WHERE skl.term_id = :NEW.TERM_ID;
  end if;   
  
end TRG_BIO_ANALYSIS_ATT_BAAL;
/


--
-- TRG_BIO_ASSAY_F_G_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASSAY_F_G_ID before insert on "BIO_ASSAY_FEATURE_GROUP"    for each row
begin     if inserting then       if :NEW."BIO_ASSAY_FEATURE_GROUP_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASSAY_FEATURE_GROUP_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_ASSAY_PLATFORM_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASSAY_PLATFORM_ID before insert on "BIO_ASSAY_PLATFORM"    for each row
begin     if inserting then       if :NEW."BIO_ASSAY_PLATFORM_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASSAY_PLATFORM_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_ASY_ANALYSIS_EQTL_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASY_ANALYSIS_EQTL_ID before insert ON BIO_ASSAY_ANALYSIS_EQTL for each row
begin     
  if inserting then       
    if :NEW."BIO_ASY_ANALYSIS_EQTL_ID" is null then          
      select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASY_ANALYSIS_EQTL_ID" from dual;
    end if;
  end if;
end;
/


--
-- TRG_BIO_ASY_ANALYSIS_GWAS_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASY_ANALYSIS_GWAS_ID 
before insert ON BIO_ASSAY_ANALYSIS_GWAS for each row
begin     
  if inserting then       
    if :NEW."BIO_ASY_ANALYSIS_GWAS_ID" is null then          
      select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASY_ANALYSIS_GWAS_ID" from dual;
    end if;
  end if;
end;
/


--
-- TRG_BIO_ASY_ANALYSIS_PLTFM_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASY_ANALYSIS_PLTFM_ID before insert on "BIO_ASY_ANALYSIS_PLTFM"    for each row
begin     if inserting then       if :NEW."BIO_ASY_ANALYSIS_PLTFM_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASY_ANALYSIS_PLTFM_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_ASY_ANLSIS_DATA_IDX_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASY_ANLSIS_DATA_IDX_ID 
  before insert on "BIO_ASY_ANALYSIS_DATA_IDX"    
  for each row
begin     
  if inserting then       
  if :NEW."BIO_ASY_ANALYSIS_DATA_IDX_ID" is null then          
  select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASY_ANALYSIS_DATA_IDX_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_ASY_ANYS_DATA_IDX  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASY_ANYS_DATA_IDX before insert ON BIO_ASY_ANALYSIS_DATA_IDX for each row
begin     
  if inserting then       
    if :NEW."BIO_ASY_ANALYSIS_DATA_IDX_ID" is null then          
      select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASY_ANALYSIS_DATA_IDX_ID" from dual;
    end if;
  end if;
end;
/


--
-- TRG_BIO_COMPOUND_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_COMPOUND_ID before insert on "BIO_COMPOUND"    for each row
begin     if inserting then       if :NEW."BIO_COMPOUND_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_COMPOUND_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_CONTENT_REPO_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_CONTENT_REPO_ID before insert on "BIO_CONTENT_REPOSITORY"    for each row
begin     if inserting then       if :NEW."BIO_CONTENT_REPO_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CONTENT_REPO_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_CURATION_DATASET_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_CURATION_DATASET_ID before insert on "BIO_CURATION_DATASET"    for each row
begin     if inserting then       if :NEW."BIO_CURATION_DATASET_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CURATION_DATASET_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_DATA_ATTR_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_DATA_ATTR_ID before insert on "BIO_DATA_ATTRIBUTE"    for each row
begin     if inserting then       if :NEW."BIO_DATA_ATTRIBUTE_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_DATA_ATTRIBUTE_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_DATA_EXT_CODE_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_DATA_EXT_CODE_ID before insert on "BIO_DATA_EXT_CODE"    for each row
begin     if inserting then       if :NEW."BIO_DATA_EXT_CODE_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_DATA_EXT_CODE_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_DISEASE_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_DISEASE_ID before insert on "BIO_DISEASE"    for each row
begin     if inserting then       if :NEW."BIO_DISEASE_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_DISEASE_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_EXPERIMENT_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_EXPERIMENT_ID before insert on "BIO_EXPERIMENT"    for each row
begin     if inserting then       if :NEW."BIO_EXPERIMENT_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_EXPERIMENT_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_LIT_MODEL_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_MODEL_DATA_ID 
before insert on "BIO_LIT_MODEL_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_MODEL_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_MODEL_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- TRG_BIO_LIT_REF_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_REF_DATA_ID 
before insert on "BIO_LIT_REF_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_REF_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_REF_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- TRG_BIO_LIT_SUM_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_SUM_DATA_ID 
before insert on "BIO_LIT_SUM_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_SUM_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_SUM_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- TRG_BIO_MARKER_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_MARKER_ID before insert on "BIO_MARKER"    for each row
begin     if inserting then       if :NEW."BIO_MARKER_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_MARKER_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_MKR_CORREL_DESCR_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_MKR_CORREL_DESCR_ID before insert on "BIO_DATA_CORREL_DESCR"    for each row
begin     if inserting then       if :NEW."BIO_DATA_CORREL_DESCR_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_DATA_CORREL_DESCR_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_OBSERVATION_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_OBSERVATION_ID 
before insert on BIO_OBSERVATION
for each row
begin
  if inserting then
     if :NEW.BIO_OBSERVATION_ID is null then
        select SEQ_BIO_DATA_ID.nextval into :NEW.BIO_OBSERVATION_ID from dual;
     end if;
  end if;
end;
/


--
-- TRG_BIO_SUBJECT_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_SUBJECT_ID before insert on "BIO_SUBJECT"    for each row
begin     if inserting then       if :NEW."BIO_SUBJECT_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_SUBJECT_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_TAXON_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_TAXON_ID before
  INSERT ON "BIO_TAXONOMY" FOR EACH row
BEGIN IF inserting THEN IF :NEW."BIO_TAXONOMY_ID" IS NULL THEN
  SELECT SEQ_BIO_DATA_ID.nextval INTO :NEW."BIO_TAXONOMY_ID" FROM dual;
END IF;
END IF;
END;
/


--
-- TRG_CTD2_CLIN_INHIB_EFFECT  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_CTD2_CLIN_INHIB_EFFECT 
BEFORE INSERT ON CTD2_CLIN_INHIB_EFFECT 
 FOR EACH ROW
BEGIN     
 IF INSERTING THEN      
	IF :NEW."CTD_CIE_SEQ" IS NULL THEN 
		SELECT SEQ_CLINICAL_TRIAL_DESIGN_ID.NEXTVAL INTO :NEW."CTD_CIE_SEQ" FROM DUAL;  
	END IF;    
 END IF; 
END;
/


--
-- TRG_CTD2_DISEASE  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_CTD2_DISEASE 
BEFORE INSERT ON CTD2_DISEASE
 FOR EACH ROW
BEGIN     
 IF INSERTING THEN      
	IF :NEW."CTD_DISEASE_SEQ" IS NULL THEN 
		SELECT SEQ_CLINICAL_TRIAL_DESIGN_ID.NEXTVAL INTO :NEW."CTD_DISEASE_SEQ" FROM DUAL;  
	END IF;    
 END IF; 
END;
/


--
-- TRG_CTD2_INHIB_DETAILS  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_CTD2_INHIB_DETAILS 
BEFORE INSERT ON CTD2_INHIB_DETAILS
 FOR EACH ROW
BEGIN     
 IF INSERTING THEN      
	IF :NEW."CTD_INHIB_SEQ" IS NULL THEN 
		SELECT SEQ_CLINICAL_TRIAL_DESIGN_ID.NEXTVAL INTO :NEW."CTD_INHIB_SEQ" FROM DUAL;  
	END IF;    
 END IF; 
END;
/


--
-- TRG_CTD2_STUDY_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_CTD2_STUDY_ID 
BEFORE INSERT ON CTD2_STUDY 
 FOR EACH ROW
BEGIN     
 IF INSERTING THEN      
	IF :NEW."CTD_STUDY_ID" IS NULL THEN 
		SELECT SEQ_CLINICAL_TRIAL_DESIGN_ID.NEXTVAL INTO :NEW."CTD_STUDY_ID" FROM DUAL;  
	END IF;    
 END IF; 
END;
/


--
-- TRG_CTD2_TRIAL_DETAILS  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_CTD2_TRIAL_DETAILS 
BEFORE INSERT ON CTD2_TRIAL_DETAILS
 FOR EACH ROW
BEGIN     
 IF INSERTING THEN      
	IF :NEW."CTD_TD_SEQ" IS NULL THEN 
		SELECT SEQ_CLINICAL_TRIAL_DESIGN_ID.NEXTVAL INTO :NEW."CTD_TD_SEQ" FROM DUAL;  
	END IF;    
 END IF; 
END;
/


--
-- TRG_REPORT_ITEM_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_REPORT_ITEM_ID 
before insert ON REPORT_ITEM
for each row
declare
begin
  if inserting then       
    if :NEW.REPORT_ITEM_ID is null then
      select BIOMART.SEQ_BIO_DATA_ID.nextval into :NEW.REPORT_ITEM_ID from dual;
    end if;
  end if;   
end TRG_REPORT_ITEM_ID;
/


--
-- "TRIG_CLINICAL_TRIAL_DESIGN_ID "  (Trigger) 
--
CREATE OR REPLACE TRIGGER "TRIG_CLINICAL_TRIAL_DESIGN_ID " 
before insert on "CTD_FULL"    
for each row
begin     
  if inserting then       
    if :NEW."CLINICAL_TRIAL_DESIGN_ID" is null then          
      select SEQ_CLINICAL_TRIAL_DESIGN_ID.nextval into :NEW."CLINICAL_TRIAL_DESIGN_ID" from dual;  
    end if; 
  end if; 
end;
/


--
-- BIO_ASSAY  (Table) 
--
CREATE TABLE BIO_ASSAY
(
  BIO_ASSAY_ID           NUMBER(18)             NOT NULL,
  ETL_ID                 NVARCHAR2(100)         NOT NULL,
  STUDY                  NVARCHAR2(200),
  PROTOCOL               NVARCHAR2(200),
  DESCRIPTION            NCLOB,
  SAMPLE_TYPE            NVARCHAR2(200),
  EXPERIMENT_ID          NUMBER(18)             NOT NULL,
  TEST_DATE              DATE,
  SAMPLE_RECEIVE_DATE    DATE,
  REQUESTOR              NVARCHAR2(200),
  BIO_ASSAY_TYPE         NVARCHAR2(200)         NOT NULL,
  BIO_ASSAY_PLATFORM_ID  NUMBER(18),
  CONSTRAINT RBMORDERDIM_PK
  PRIMARY KEY
  (BIO_ASSAY_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_ASY_PFM_FK 
  FOREIGN KEY (BIO_ASSAY_PLATFORM_ID) 
  REFERENCES BIO_ASSAY_PLATFORM (BIO_ASSAY_PLATFORM_ID)
  ENABLE VALIDATE,
  CONSTRAINT DATASET_EXPERIMENT_FK 
  FOREIGN KEY (EXPERIMENT_ID) 
  REFERENCES BIO_EXPERIMENT (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_ANALYSIS  (Table) 
--
CREATE TABLE BIO_ASSAY_ANALYSIS
(
  ANALYSIS_NAME              NVARCHAR2(500),
  SHORT_DESCRIPTION          NVARCHAR2(510),
  ANALYSIS_CREATE_DATE       DATE,
  ANALYST_ID                 NVARCHAR2(510),
  BIO_ASSAY_ANALYSIS_ID      NUMBER(18),
  ANALYSIS_VERSION           NVARCHAR2(200),
  FOLD_CHANGE_CUTOFF         NUMBER(9,2),
  PVALUE_CUTOFF              NUMBER(9,2),
  RVALUE_CUTOFF              NUMBER(9,2),
  BIO_ASY_ANALYSIS_PLTFM_ID  NUMBER(18),
  BIO_SOURCE_IMPORT_ID       NUMBER(18),
  ANALYSIS_TYPE              NVARCHAR2(200),
  ANALYST_NAME               VARCHAR2(250),
  ANALYSIS_METHOD_CD         VARCHAR2(50),
  BIO_ASSAY_DATA_TYPE        VARCHAR2(50),
  ETL_ID                     VARCHAR2(100),
  LONG_DESCRIPTION           VARCHAR2(4000),
  QA_CRITERIA                VARCHAR2(4000),
  DATA_COUNT                 NUMBER(18),
  TEA_DATA_COUNT             NUMBER(18),
  ETL_ID_SOURCE              NUMBER(18),
  CONSTRAINT BIO_DATA_ANL_PK
  PRIMARY KEY
  (BIO_ASSAY_ANALYSIS_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_ANS_PLTFM_FK 
  FOREIGN KEY (BIO_ASY_ANALYSIS_PLTFM_ID) 
  REFERENCES BIO_ASY_ANALYSIS_PLTFM (BIO_ASY_ANALYSIS_PLTFM_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_ANALYSIS_DATA  (Table) 
--
CREATE TABLE BIO_ASSAY_ANALYSIS_DATA
(
  BIO_ASY_ANALYSIS_DATA_ID    NUMBER            NOT NULL,
  FOLD_CHANGE_RATIO           NUMBER,
  RAW_PVALUE                  NUMBER(18,5),
  ADJUSTED_PVALUE             NUMBER(18,5),
  R_VALUE                     NUMBER(18,5),
  RHO_VALUE                   NUMBER(18,5),
  BIO_ASSAY_ANALYSIS_ID       NUMBER(18)        NOT NULL,
  ADJUSTED_P_VALUE_CODE       NVARCHAR2(100),
  FEATURE_GROUP_NAME          VARCHAR2(100) NOT NULL,
  BIO_EXPERIMENT_ID           NUMBER(18),
  BIO_ASSAY_PLATFORM_ID       NUMBER(18),
  ETL_ID                      NVARCHAR2(100),
  PREFERRED_PVALUE            NUMBER(18,5),
  CUT_VALUE                   NUMBER(18,5),
  RESULTS_VALUE               NVARCHAR2(100),
  NUMERIC_VALUE               NUMBER(18,5),
  NUMERIC_VALUE_CODE          NVARCHAR2(50),
  TEA_NORMALIZED_PVALUE       NUMBER(18,5),
  BIO_ASSAY_FEATURE_GROUP_ID  NUMBER(18),
  CONSTRAINT BIO_ASSAY_ANALYSIS_DATA_N_FK1 
  FOREIGN KEY (BIO_ASSAY_ANALYSIS_ID) 
  REFERENCES BIO_ASSAY_ANALYSIS (BIO_ASSAY_ANALYSIS_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_ANALYSIS_DATA_N_FK2 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_EXPERIMENT (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_ANALYSIS_DATA_N_FK3 
  FOREIGN KEY (BIO_ASSAY_PLATFORM_ID) 
  REFERENCES BIO_ASSAY_PLATFORM (BIO_ASSAY_PLATFORM_ID)
  DISABLE NOVALIDATE,
  CONSTRAINT BIO_ASY_AD_FG_FK 
  FOREIGN KEY (BIO_ASSAY_FEATURE_GROUP_ID) 
  REFERENCES BIO_ASSAY_FEATURE_GROUP (BIO_ASSAY_FEATURE_GROUP_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_ANALYSIS_DATA_TEA  (Table) 
--
CREATE TABLE BIO_ASSAY_ANALYSIS_DATA_TEA
(
  BIO_ASY_ANALYSIS_DATA_ID    NUMBER            NOT NULL,
  FOLD_CHANGE_RATIO           NUMBER,
  RAW_PVALUE                  NUMBER(18,5),
  ADJUSTED_PVALUE             NUMBER(18,5),
  R_VALUE                     NUMBER(18,5),
  RHO_VALUE                   NUMBER(18,5),
  BIO_ASSAY_ANALYSIS_ID       NUMBER(18)        NOT NULL,
  ADJUSTED_P_VALUE_CODE       NVARCHAR2(100),
  FEATURE_GROUP_NAME          VARCHAR2(100) NOT NULL,
  BIO_EXPERIMENT_ID           NUMBER(18),
  BIO_ASSAY_PLATFORM_ID       NUMBER(18),
  ETL_ID                      NVARCHAR2(100),
  PREFERRED_PVALUE            NUMBER(18,5),
  CUT_VALUE                   NUMBER(18,5),
  RESULTS_VALUE               NVARCHAR2(100),
  NUMERIC_VALUE               NUMBER(18,5),
  NUMERIC_VALUE_CODE          NVARCHAR2(50),
  TEA_NORMALIZED_PVALUE       NUMBER(18,5),
  BIO_EXPERIMENT_TYPE         VARCHAR2(50),
  BIO_ASSAY_FEATURE_GROUP_ID  NUMBER(18),
  TEA_RANK                    NUMBER(18),
  CONSTRAINT BIO_AA_DATA_T_PK
  PRIMARY KEY
  (BIO_ASY_ANALYSIS_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_ANALYSIS_DATA_T_FK1 
  FOREIGN KEY (BIO_ASSAY_ANALYSIS_ID) 
  REFERENCES BIO_ASSAY_ANALYSIS (BIO_ASSAY_ANALYSIS_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_ANALYSIS_DATA_T_FK2 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_EXPERIMENT (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_ANALYSIS_DATA_T_FK3 
  FOREIGN KEY (BIO_ASSAY_PLATFORM_ID) 
  REFERENCES BIO_ASSAY_PLATFORM (BIO_ASSAY_PLATFORM_ID)
  DISABLE NOVALIDATE,
  CONSTRAINT BIO_ASY_AD_TEA_FG_FK 
  FOREIGN KEY (BIO_ASSAY_FEATURE_GROUP_ID) 
  REFERENCES BIO_ASSAY_FEATURE_GROUP (BIO_ASSAY_FEATURE_GROUP_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_DATASET  (Table) 
--
CREATE TABLE BIO_ASSAY_DATASET
(
  BIO_ASSAY_DATASET_ID  NUMBER(18)              NOT NULL,
  DATASET_NAME          NVARCHAR2(400),
  DATASET_DESCRIPTION   NVARCHAR2(1000),
  DATASET_CRITERIA      NVARCHAR2(1000),
  CREATE_DATE           DATE,
  BIO_EXPERIMENT_ID     NUMBER(18)              NOT NULL,
  BIO_ASSAY_ID          NUMBER(18),
  ETL_ID                NVARCHAR2(100),
  ACCESSION             VARCHAR2(50),
  CONSTRAINT BIO_DATASET_PK
  PRIMARY KEY
  (BIO_ASSAY_DATASET_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_DATASET_EXPERIMENT_FK 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_EXPERIMENT (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASY_ANALYSIS_DATASET  (Table) 
--
CREATE TABLE BIO_ASY_ANALYSIS_DATASET
(
  BIO_ASSAY_DATASET_ID   NUMBER(18)             NOT NULL,
  BIO_ASSAY_ANALYSIS_ID  NUMBER(18)             NOT NULL,
  CONSTRAINT BIO_DATA_ANALYSIS_DATASET_PK
  PRIMARY KEY
  (BIO_ASSAY_DATASET_ID, BIO_ASSAY_ANALYSIS_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_DATA_ANL_DS_ANL_FK 
  FOREIGN KEY (BIO_ASSAY_ANALYSIS_ID) 
  REFERENCES BIO_ASSAY_ANALYSIS (BIO_ASSAY_ANALYSIS_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_DATA_ANL_DS_FK 
  FOREIGN KEY (BIO_ASSAY_DATASET_ID) 
  REFERENCES BIO_ASSAY_DATASET (BIO_ASSAY_DATASET_ID)
  ENABLE VALIDATE
);


--
-- BIO_CELL_LINE  (Table) 
--
CREATE TABLE BIO_CELL_LINE
(
  DISEASE             NVARCHAR2(510),
  PRIMARY_SITE        NVARCHAR2(510),
  METASTATIC_SITE     NVARCHAR2(510),
  SPECIES             NVARCHAR2(510),
  ATTC_NUMBER         NVARCHAR2(510),
  CELL_LINE_NAME      NVARCHAR2(510),
  BIO_CELL_LINE_ID    NUMBER(18)                NOT NULL,
  BIO_DISEASE_ID      NUMBER(18),
  ORIGIN              NVARCHAR2(200),
  DESCRIPTION         NVARCHAR2(500),
  DISEASE_STAGE       NVARCHAR2(100),
  DISEASE_SUBTYPE     NVARCHAR2(200),
  ETL_REFERENCE_LINK  NVARCHAR2(300),
  CONSTRAINT CELLLINEDICTIONARY_PK
  PRIMARY KEY
  (BIO_CELL_LINE_ID)
  ENABLE VALIDATE,
  CONSTRAINT CD_DISEASE_FK 
  FOREIGN KEY (BIO_DISEASE_ID) 
  REFERENCES BIO_DISEASE (BIO_DISEASE_ID)
  ENABLE VALIDATE
);


--
-- BIO_CLINICAL_TRIAL  (Table) 
--
CREATE TABLE BIO_CLINICAL_TRIAL
(
  TRIAL_NUMBER             NVARCHAR2(510),
  STUDY_OWNER              NVARCHAR2(510),
  STUDY_PHASE              VARCHAR2(100),
  BLINDING_PROCEDURE       NVARCHAR2(1000),
  STUDYTYPE                NVARCHAR2(510),
  DURATION_OF_STUDY_WEEKS  NUMBER(10),
  NUMBER_OF_PATIENTS       NUMBER(10),
  NUMBER_OF_SITES          NUMBER(10),
  ROUTE_OF_ADMINISTRATION  NVARCHAR2(510),
  DOSING_REGIMEN           VARCHAR2(3500),
  GROUP_ASSIGNMENT         NVARCHAR2(510),
  TYPE_OF_CONTROL          NVARCHAR2(510),
  COMPLETION_DATE          DATE,
  PRIMARY_END_POINTS       VARCHAR2(2000),
  SECONDARY_END_POINTS     VARCHAR2(3500),
  INCLUSION_CRITERIA       NCLOB,
  EXCLUSION_CRITERIA       NCLOB,
  SUBJECTS                 VARCHAR2(2000),
  GENDER_RESTRICTION_MFB   NVARCHAR2(510),
  MIN_AGE                  NUMBER(10),
  MAX_AGE                  NUMBER(10),
  SECONDARY_IDS            NVARCHAR2(510),
  BIO_EXPERIMENT_ID        NUMBER(18),
  DEVELOPMENT_PARTNER      VARCHAR2(100),
  GEO_PLATFORM             VARCHAR2(30),
  MAIN_FINDINGS            VARCHAR2(2000),
  PLATFORM_NAME            VARCHAR2(200),
  SEARCH_AREA              VARCHAR2(100),
  CONSTRAINT CLINICALTRIALDIM_PK
  PRIMARY KEY
  (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_CLINICAL_TRIAL_BIO_EXPERIM 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_EXPERIMENT (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_CONTENT  (Table) 
--
CREATE TABLE BIO_CONTENT
(
  BIO_FILE_CONTENT_ID  NUMBER(18)               NOT NULL,
  FILE_NAME            NVARCHAR2(1000),
  REPOSITORY_ID        NUMBER(18),
  LOCATION             NVARCHAR2(400),
  TITLE                NVARCHAR2(1000),
  ABSTRACT             NVARCHAR2(2000),
  FILE_TYPE            NVARCHAR2(200)           NOT NULL,
  ETL_ID               NUMBER(18),
  ETL_ID_C             VARCHAR2(30),
  STUDY_NAME           VARCHAR2(30),
  CEL_LOCATION         VARCHAR2(300),
  CEL_FILE_SUFFIX      VARCHAR2(30),
  CONSTRAINT EXTERNAL_FILE_PK
  PRIMARY KEY
  (BIO_FILE_CONTENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT EXT_FILE_CNT_CNT_REPO_FK 
  FOREIGN KEY (REPOSITORY_ID) 
  REFERENCES BIO_CONTENT_REPOSITORY (BIO_CONTENT_REPO_ID)
  ENABLE VALIDATE
);


--
-- BIO_CONTENT_REFERENCE  (Table) 
--
CREATE TABLE BIO_CONTENT_REFERENCE
(
  BIO_CONTENT_REFERENCE_ID  NUMBER(18)          NOT NULL,
  BIO_CONTENT_ID            NUMBER(18)          NOT NULL,
  BIO_DATA_ID               NUMBER(18)          NOT NULL,
  CONTENT_REFERENCE_TYPE    NVARCHAR2(200)      NOT NULL,
  ETL_ID                    NUMBER(18),
  ETL_ID_C                  VARCHAR2(30),
  CONSTRAINT BIO_CONTENT_REF_N_PK
  PRIMARY KEY
  (BIO_CONTENT_REFERENCE_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_CONTENT_REF_CONT_FK 
  FOREIGN KEY (BIO_CONTENT_ID) 
  REFERENCES BIO_CONTENT (BIO_FILE_CONTENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_CURATED_DATA  (Table) 
--
CREATE TABLE BIO_CURATED_DATA
(
  STATEMENT                NCLOB,
  STATEMENT_STATUS         NVARCHAR2(200),
  BIO_DATA_ID              NUMBER(18)           NOT NULL,
  BIO_CURATION_DATASET_ID  NUMBER(18)           NOT NULL,
  REFERENCE_ID             NUMBER(18),
  DATA_TYPE                NVARCHAR2(200),
  CONSTRAINT BIO_EXTERNALANALYSIS_FACT_PK
  PRIMARY KEY
  (BIO_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_EXT_ANALYS_EXT_ANL_FK 
  FOREIGN KEY (BIO_CURATION_DATASET_ID) 
  REFERENCES BIO_CURATION_DATASET (BIO_CURATION_DATASET_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_CORRELATION  (Table) 
--
CREATE TABLE BIO_DATA_CORRELATION
(
  BIO_DATA_ID               NUMBER(18)          NOT NULL,
  ASSO_BIO_DATA_ID          NUMBER(18)          NOT NULL,
  BIO_DATA_CORREL_DESCR_ID  NUMBER(18)          NOT NULL,
  BIO_DATA_CORREL_ID        NUMBER(18)          NOT NULL,
  CONSTRAINT BIO_DATA_CORRELATION_PK
  PRIMARY KEY
  (BIO_DATA_CORREL_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_MARKER_LINK_BIO_MARKER_REL 
  FOREIGN KEY (BIO_DATA_CORREL_DESCR_ID) 
  REFERENCES BIO_DATA_CORREL_DESCR (BIO_DATA_CORREL_DESCR_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_DISEASE  (Table) 
--
CREATE TABLE BIO_DATA_DISEASE
(
  BIO_DATA_ID     NUMBER(18)                    NOT NULL,
  BIO_DISEASE_ID  NUMBER(18)                    NOT NULL,
  ETL_SOURCE      VARCHAR2(100),
  CONSTRAINT BIO_DATA_DISEASE_PK
  PRIMARY KEY
  (BIO_DATA_ID, BIO_DISEASE_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_DF_DISEASE_FK 
  FOREIGN KEY (BIO_DISEASE_ID) 
  REFERENCES BIO_DISEASE (BIO_DISEASE_ID)
  ENABLE VALIDATE
);


--
-- BIO_DATA_TAXONOMY  (Table) 
--
CREATE TABLE BIO_DATA_TAXONOMY
(
  BIO_TAXONOMY_ID  NUMBER(18)                   NOT NULL,
  BIO_DATA_ID      NUMBER(18)                   NOT NULL,
  ETL_SOURCE       VARCHAR2(100),
  CONSTRAINT BIO_TAXON_FK 
  FOREIGN KEY (BIO_TAXONOMY_ID) 
  REFERENCES BIO_TAXONOMY (BIO_TAXONOMY_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_ALT_DATA  (Table) 
--
CREATE TABLE BIO_LIT_ALT_DATA
(
  BIO_LIT_ALT_DATA_ID         NUMBER(18)        NOT NULL,
  BIO_LIT_REF_DATA_ID         NUMBER(18)        NOT NULL,
  IN_VIVO_MODEL_ID            NUMBER(18),
  IN_VITRO_MODEL_ID           NUMBER(18),
  ETL_ID                      NVARCHAR2(50),
  ALTERATION_TYPE             NVARCHAR2(50),
  CONTROL                     NVARCHAR2(1000),
  EFFECT                      NVARCHAR2(500),
  DESCRIPTION                 NVARCHAR2(1000),
  TECHNIQUES                  NVARCHAR2(1000),
  PATIENTS_PERCENT            NVARCHAR2(500),
  PATIENTS_NUMBER             NVARCHAR2(500),
  POP_NUMBER                  NVARCHAR2(250),
  POP_INCLUSION_CRITERIA      NVARCHAR2(1000),
  POP_EXCLUSION_CRITERIA      NVARCHAR2(1000),
  POP_DESCRIPTION             NVARCHAR2(1000),
  POP_TYPE                    NVARCHAR2(250),
  POP_VALUE                   NVARCHAR2(250),
  POP_PHASE                   NVARCHAR2(250),
  POP_STATUS                  NVARCHAR2(250),
  POP_EXPERIMENTAL_MODEL      NVARCHAR2(250),
  POP_TISSUE                  NVARCHAR2(250),
  POP_BODY_SUBSTANCE          NVARCHAR2(250),
  POP_LOCALIZATION            NVARCHAR2(1000),
  POP_CELL_TYPE               NVARCHAR2(250),
  CLIN_SUBMUCOSA_MARKER_TYPE  NVARCHAR2(250),
  CLIN_SUBMUCOSA_UNIT         NVARCHAR2(250),
  CLIN_SUBMUCOSA_VALUE        NVARCHAR2(250),
  CLIN_ASM_MARKER_TYPE        NVARCHAR2(250),
  CLIN_ASM_UNIT               NVARCHAR2(250),
  CLIN_ASM_VALUE              NVARCHAR2(250),
  CLIN_CELLULAR_SOURCE        NVARCHAR2(250),
  CLIN_CELLULAR_TYPE          NVARCHAR2(250),
  CLIN_CELLULAR_COUNT         NVARCHAR2(250),
  CLIN_PRIOR_MED_PERCENT      NVARCHAR2(250),
  CLIN_PRIOR_MED_DOSE         NVARCHAR2(250),
  CLIN_PRIOR_MED_NAME         NVARCHAR2(250),
  CLIN_BASELINE_VARIABLE      NVARCHAR2(250),
  CLIN_BASELINE_PERCENT       NVARCHAR2(250),
  CLIN_BASELINE_VALUE         NVARCHAR2(250),
  CLIN_SMOKER                 NVARCHAR2(250),
  CLIN_ATOPY                  NVARCHAR2(250),
  CONTROL_EXP_PERCENT         NVARCHAR2(50),
  CONTROL_EXP_NUMBER          NVARCHAR2(50),
  CONTROL_EXP_VALUE           NVARCHAR2(50),
  CONTROL_EXP_SD              NVARCHAR2(50),
  CONTROL_EXP_UNIT            NVARCHAR2(100),
  OVER_EXP_PERCENT            NVARCHAR2(50),
  OVER_EXP_NUMBER             NVARCHAR2(50),
  OVER_EXP_VALUE              NVARCHAR2(50),
  OVER_EXP_SD                 NVARCHAR2(50),
  OVER_EXP_UNIT               NVARCHAR2(100),
  LOSS_EXP_PERCENT            NVARCHAR2(50),
  LOSS_EXP_NUMBER             NVARCHAR2(50),
  LOSS_EXP_VALUE              NVARCHAR2(50),
  LOSS_EXP_SD                 NVARCHAR2(50),
  LOSS_EXP_UNIT               NVARCHAR2(100),
  TOTAL_EXP_PERCENT           NVARCHAR2(50),
  TOTAL_EXP_NUMBER            NVARCHAR2(50),
  TOTAL_EXP_VALUE             NVARCHAR2(50),
  TOTAL_EXP_SD                NVARCHAR2(50),
  TOTAL_EXP_UNIT              NVARCHAR2(100),
  GLC_CONTROL_PERCENT         NVARCHAR2(250),
  GLC_MOLECULAR_CHANGE        NVARCHAR2(250),
  GLC_TYPE                    NVARCHAR2(50),
  GLC_PERCENT                 NVARCHAR2(100),
  GLC_NUMBER                  NVARCHAR2(100),
  PTM_REGION                  NVARCHAR2(250),
  PTM_TYPE                    NVARCHAR2(250),
  PTM_CHANGE                  NVARCHAR2(250),
  LOH_LOCI                    NVARCHAR2(250),
  MUTATION_TYPE               NVARCHAR2(250),
  MUTATION_CHANGE             NVARCHAR2(250),
  MUTATION_SITES              NVARCHAR2(250),
  EPIGENETIC_REGION           NVARCHAR2(250),
  EPIGENETIC_TYPE             NVARCHAR2(250),
  CONSTRAINT BIO_LIT_ALT_DATA_PK
  PRIMARY KEY
  (BIO_LIT_ALT_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_LIT_ALT_REF_FK 
  FOREIGN KEY (BIO_LIT_REF_DATA_ID) 
  REFERENCES BIO_LIT_REF_DATA (BIO_LIT_REF_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_AMD_DATA  (Table) 
--
CREATE TABLE BIO_LIT_AMD_DATA
(
  BIO_LIT_AMD_DATA_ID      NUMBER(18)           NOT NULL,
  BIO_LIT_ALT_DATA_ID      NUMBER(18)           NOT NULL,
  ETL_ID                   NVARCHAR2(50),
  MOLECULE                 NVARCHAR2(50),
  MOLECULE_TYPE            NVARCHAR2(50),
  TOTAL_EXP_PERCENT        NVARCHAR2(50),
  TOTAL_EXP_NUMBER         NVARCHAR2(100),
  TOTAL_EXP_VALUE          NVARCHAR2(100),
  TOTAL_EXP_SD             NVARCHAR2(50),
  TOTAL_EXP_UNIT           NVARCHAR2(50),
  OVER_EXP_PERCENT         NVARCHAR2(50),
  OVER_EXP_NUMBER          NVARCHAR2(100),
  OVER_EXP_VALUE           NVARCHAR2(100),
  OVER_EXP_SD              NVARCHAR2(50),
  OVER_EXP_UNIT            NVARCHAR2(50),
  CO_EXP_PERCENT           NVARCHAR2(50),
  CO_EXP_NUMBER            NVARCHAR2(100),
  CO_EXP_VALUE             NVARCHAR2(100),
  CO_EXP_SD                NVARCHAR2(50),
  CO_EXP_UNIT              NVARCHAR2(50),
  MUTATION_TYPE            NVARCHAR2(50),
  MUTATION_SITES           NVARCHAR2(50),
  MUTATION_CHANGE          NVARCHAR2(50),
  MUTATION_PERCENT         NVARCHAR2(50),
  MUTATION_NUMBER          NVARCHAR2(100),
  TARGET_EXP_PERCENT       NVARCHAR2(50),
  TARGET_EXP_NUMBER        NVARCHAR2(100),
  TARGET_EXP_VALUE         NVARCHAR2(100),
  TARGET_EXP_SD            NVARCHAR2(50),
  TARGET_EXP_UNIT          NVARCHAR2(50),
  TARGET_OVER_EXP_PERCENT  NVARCHAR2(50),
  TARGET_OVER_EXP_NUMBER   NVARCHAR2(100),
  TARGET_OVER_EXP_VALUE    NVARCHAR2(100),
  TARGET_OVER_EXP_SD       NVARCHAR2(50),
  TARGET_OVER_EXP_UNIT     NVARCHAR2(50),
  TECHNIQUES               NVARCHAR2(250),
  DESCRIPTION              NVARCHAR2(1000),
  CONSTRAINT BIO_LIT_AMD_DATA_PK
  PRIMARY KEY
  (BIO_LIT_AMD_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_LIT_AMD_ALT_FK 
  FOREIGN KEY (BIO_LIT_ALT_DATA_ID) 
  REFERENCES BIO_LIT_ALT_DATA (BIO_LIT_ALT_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_INH_DATA  (Table) 
--
CREATE TABLE BIO_LIT_INH_DATA
(
  BIO_LIT_INH_DATA_ID       NUMBER(18)          NOT NULL,
  BIO_LIT_REF_DATA_ID       NUMBER(18),
  ETL_ID                    NVARCHAR2(50),
  TRIAL_TYPE                NVARCHAR2(250),
  TRIAL_PHASE               NVARCHAR2(250),
  TRIAL_STATUS              NVARCHAR2(250),
  TRIAL_EXPERIMENTAL_MODEL  NVARCHAR2(250),
  TRIAL_TISSUE              NVARCHAR2(250),
  TRIAL_BODY_SUBSTANCE      NVARCHAR2(250),
  TRIAL_DESCRIPTION         NVARCHAR2(1000),
  TRIAL_DESIGNS             NVARCHAR2(250),
  TRIAL_CELL_LINE           NVARCHAR2(250),
  TRIAL_CELL_TYPE           NVARCHAR2(250),
  TRIAL_PATIENTS_NUMBER     NVARCHAR2(100),
  TRIAL_INCLUSION_CRITERIA  NVARCHAR2(2000),
  INHIBITOR                 NVARCHAR2(250),
  INHIBITOR_STANDARD_NAME   NVARCHAR2(250),
  CASID                     NVARCHAR2(250),
  DESCRIPTION               NVARCHAR2(1000),
  CONCENTRATION             NVARCHAR2(250),
  TIME_EXPOSURE             NVARCHAR2(500),
  ADMINISTRATION            NVARCHAR2(250),
  TREATMENT                 NVARCHAR2(2000),
  TECHNIQUES                NVARCHAR2(1000),
  EFFECT_MOLECULAR          NVARCHAR2(250),
  EFFECT_PERCENT            NVARCHAR2(250),
  EFFECT_NUMBER             NVARCHAR2(50),
  EFFECT_VALUE              NVARCHAR2(250),
  EFFECT_SD                 NVARCHAR2(250),
  EFFECT_UNIT               NVARCHAR2(250),
  EFFECT_RESPONSE_RATE      NVARCHAR2(250),
  EFFECT_DOWNSTREAM         NVARCHAR2(2000),
  EFFECT_BENEFICIAL         NVARCHAR2(2000),
  EFFECT_ADVERSE            NVARCHAR2(2000),
  EFFECT_DESCRIPTION        NVARCHAR2(2000),
  EFFECT_PHARMACOS          NVARCHAR2(2000),
  EFFECT_POTENTIALS         NVARCHAR2(2000),
  CHECK ("BIO_LIT_REF_DATA_ID" IS NOT NULL)
  DISABLE NOVALIDATE,
  CONSTRAINT BIO_LIT_INH_DATA_PK
  PRIMARY KEY
  (BIO_LIT_INH_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_LIT_INH_REF_FK 
  FOREIGN KEY (BIO_LIT_REF_DATA_ID) 
  REFERENCES BIO_LIT_REF_DATA (BIO_LIT_REF_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_INT_DATA  (Table) 
--
CREATE TABLE BIO_LIT_INT_DATA
(
  BIO_LIT_INT_DATA_ID  NUMBER(18)               NOT NULL,
  BIO_LIT_REF_DATA_ID  NUMBER(18)               NOT NULL,
  IN_VIVO_MODEL_ID     NUMBER(18),
  IN_VITRO_MODEL_ID    NUMBER(18),
  ETL_ID               NVARCHAR2(50),
  SOURCE_COMPONENT     NVARCHAR2(100),
  SOURCE_GENE_ID       NVARCHAR2(50),
  TARGET_COMPONENT     NVARCHAR2(100),
  TARGET_GENE_ID       NVARCHAR2(50),
  INTERACTION_MODE     NVARCHAR2(250),
  REGULATION           NVARCHAR2(1000),
  MECHANISM            NVARCHAR2(250),
  EFFECT               NVARCHAR2(500),
  LOCALIZATION         NVARCHAR2(500),
  REGION               NVARCHAR2(250),
  TECHNIQUES           NVARCHAR2(1000),
  CONSTRAINT BIO_LIT_INT_DATA_PK
  PRIMARY KEY
  (BIO_LIT_INT_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_LIT_INT_REF_FK 
  FOREIGN KEY (BIO_LIT_REF_DATA_ID) 
  REFERENCES BIO_LIT_REF_DATA (BIO_LIT_REF_DATA_ID)
  ENABLE VALIDATE
);


--
-- BIO_LIT_PE_DATA  (Table) 
--
CREATE TABLE BIO_LIT_PE_DATA
(
  BIO_LIT_PE_DATA_ID   NUMBER(18)               NOT NULL,
  BIO_LIT_REF_DATA_ID  NUMBER(18)               NOT NULL,
  IN_VIVO_MODEL_ID     NUMBER(18),
  IN_VITRO_MODEL_ID    NUMBER(18),
  ETL_ID               NVARCHAR2(50),
  DESCRIPTION          NVARCHAR2(2000),
  CONSTRAINT BIO_LIT_PE_DATA_PK
  PRIMARY KEY
  (BIO_LIT_PE_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_LIT_PE_REF_FK 
  FOREIGN KEY (BIO_LIT_REF_DATA_ID) 
  REFERENCES BIO_LIT_REF_DATA (BIO_LIT_REF_DATA_ID)
  ENABLE VALIDATE
);


--
-- BAADT_F_IDX13  (Index) 
--
CREATE INDEX BAADT_F_IDX13 ON BIO_ASSAY_ANALYSIS_DATA_TEA
(BIO_ASSAY_FEATURE_GROUP_ID, BIO_ASY_ANALYSIS_DATA_ID);


--
-- BAADT_IDEX12  (Index) 
--
CREATE INDEX BAADT_IDEX12 ON BIO_ASSAY_ANALYSIS_DATA_TEA
(FEATURE_GROUP_NAME, BIO_ASY_ANALYSIS_DATA_ID);


--
-- BAADT_IDX11  (Index) 
--
CREATE INDEX BAADT_IDX11 ON BIO_ASSAY_ANALYSIS_DATA_TEA
(BIO_EXPERIMENT_ID, BIO_ASSAY_ANALYSIS_ID, BIO_ASY_ANALYSIS_DATA_ID);


--
-- BAADT_IDX17  (Index) 
--
CREATE INDEX BAADT_IDX17 ON BIO_ASSAY_ANALYSIS_DATA_TEA
(BIO_ASSAY_ANALYSIS_ID, TEA_RANK);


--
-- BAADT_IDX6  (Index) 
--
CREATE INDEX BAADT_IDX6 ON BIO_ASSAY_ANALYSIS_DATA_TEA
(BIO_EXPERIMENT_ID, BIO_ASSAY_ANALYSIS_ID);


--
-- BAADT_IDX7  (Index) 
--
CREATE INDEX BAADT_IDX7 ON BIO_ASSAY_ANALYSIS_DATA_TEA
(BIO_ASSAY_ANALYSIS_ID, BIO_ASY_ANALYSIS_DATA_ID);


--
-- BAAD_FGN_IDX  (Index) 
--
CREATE INDEX BAAD_FGN_IDX ON BIO_ASSAY_ANALYSIS_DATA
(FEATURE_GROUP_NAME);


--
-- BAAD_IDX11  (Index) 
--
CREATE INDEX BAAD_IDX11 ON BIO_ASSAY_ANALYSIS_DATA
(BIO_EXPERIMENT_ID, BIO_ASSAY_ANALYSIS_ID, BIO_ASY_ANALYSIS_DATA_ID);


--
-- BAAD_IDX12  (Index) 
--
CREATE INDEX BAAD_IDX12 ON BIO_ASSAY_ANALYSIS_DATA
(BIO_EXPERIMENT_ID, BIO_ASSAY_ANALYSIS_ID, BIO_ASSAY_FEATURE_GROUP_ID);


--
-- BAAD_IDX14  (Index) 
--
CREATE INDEX BAAD_IDX14 ON BIO_ASSAY_ANALYSIS_DATA
(BIO_ASSAY_FEATURE_GROUP_ID, BIO_ASY_ANALYSIS_DATA_ID);


--
-- BAAD_IDX4  (Index) 
--
CREATE INDEX BAAD_IDX4 ON BIO_ASSAY_ANALYSIS_DATA
(BIO_ASSAY_PLATFORM_ID);


--
-- BAAD_IDX6  (Index) 
--
CREATE INDEX BAAD_IDX6 ON BIO_ASSAY_ANALYSIS_DATA
(BIO_EXPERIMENT_ID, BIO_ASSAY_ANALYSIS_ID);


--
-- BAAD_IDX7  (Index) 
--
CREATE INDEX BAAD_IDX7 ON BIO_ASSAY_ANALYSIS_DATA
(BIO_ASSAY_ANALYSIS_ID, BIO_ASY_ANALYSIS_DATA_ID);


--
-- BAD_IDX13  (Index) 
--
CREATE INDEX BAD_IDX13 ON BIO_ASSAY_ANALYSIS_DATA
(BIO_ASSAY_ANALYSIS_ID, BIO_ASSAY_FEATURE_GROUP_ID);


--
-- BDC_INDEX1  (Index) 
--
CREATE INDEX BDC_INDEX1 ON BIO_DATA_CORRELATION
(ASSO_BIO_DATA_ID);


--
-- BIO_CELL_LINE_NAME_IDX  (Index) 
--
CREATE INDEX BIO_CELL_LINE_NAME_IDX ON BIO_CELL_LINE
(CELL_LINE_NAME, BIO_CELL_LINE_ID)
COMPRESS 1;

--
-- BIO_DD_IDX2  (Index) 
--
CREATE INDEX BIO_DD_IDX2 ON BIO_DATA_DISEASE
(BIO_DISEASE_ID);


--
-- BIO_DT_DIS_DID_IDX  (Index) 
--
CREATE INDEX BIO_DT_DIS_DID_IDX ON BIO_DATA_DISEASE
(BIO_DATA_ID);


--
-- IDX_BAADT_FG_AD  (Index) 
--
CREATE INDEX IDX_BAADT_FG_AD ON BIO_ASSAY_ANALYSIS_DATA_TEA
(BIO_ASSAY_FEATURE_GROUP_ID, BIO_ASSAY_ANALYSIS_ID);


--
-- IDX_BAADT_IDX10  (Index) 
--
CREATE INDEX IDX_BAADT_IDX10 ON BIO_ASSAY_ANALYSIS_DATA_TEA
(BIO_EXPERIMENT_TYPE, BIO_ASY_ANALYSIS_DATA_ID);


--
-- PK_BAAD  (Index) 
--
CREATE UNIQUE INDEX PK_BAAD ON BIO_ASSAY_ANALYSIS_DATA
(BIO_ASY_ANALYSIS_DATA_ID);


--
-- CUM_NORMAL_DIST  (Function) 
--
CREATE OR REPLACE FUNCTION           "CUM_NORMAL_DIST" ( 
  foldChg IN NUMBER, 
  mu IN NUMBER, 
  sigma IN NUMBER
) RETURN NUMBER AS
 -------------------------------------------------------------------------------
  -- implementation of a cumalative normal distribution
  -- JWS@20090601 - First rev.
  -- param foldChg: fold change ratio from from analysis_data table
  -- param mu: mean of all analsyis_data records for a given analysis
  -- param sigma: std dev of all analsyis_data records for a given analysis
  -------------------------------------------------------------------------------

  -- temporary vars  
  t1 NUMBER;
  
  -- fractional error dist input
  fract_error_input NUMBER;
  
  -- return result (i.e. Prob [X<=x])
  ans NUMBER;  

BEGIN
  t1:= (foldChg-mu)/sigma;  
  fract_error_input:= t1/SQRT(2);
  ans:= 0.5 * (1.0 + fract_error_dist(fract_error_input));
  return ans; 
END CUM_NORMAL_DIST; 
/


--
-- TEA_NPV_PRECOMPUTE  (Function) 
--
CREATE OR REPLACE FUNCTION           "TEA_NPV_PRECOMPUTE" ( 
  foldChg IN NUMBER, 
  mu IN NUMBER, 
  sigma IN NUMBER
) RETURN NUMBER AS

 -------------------------------------------------------------------------------
  -- used for gene signature TEA algorithm which precomputes normalized p-values
  -- based on fold change ratio from analysis_data records
  -- JWS@20090601 - First rev.
  -- param foldChg: input is fold change ratio from from analysis_data table
  -- param mu: mean of all analsyis_data records for a given analysis
  -- param sigma: std dev of all analsyis_data records for a given analysis
  -------------------------------------------------------------------------------
  npv number;
  outlier_cutoff number:=1.0e-5;
  
BEGIN
  -- normalized p-value 
  npv:= 1.0 - cum_normal_dist(abs(foldChg),mu,sigma);
  
  -- cap outliers to minimum value
  IF npv<outlier_cutoff THEN npv:= outlier_cutoff; END IF;
  
  RETURN npv;
  
END TEA_NPV_PRECOMPUTE; 
/

--
-- BIO_ASSAY_DATA_TEA_TOP50_MV  (View) 
--
CREATE OR REPLACE FORCE VIEW BIO_ASSAY_DATA_TEA_TOP50_MV
(BIO_ASY_ANALYSIS_DATA_ID, FOLD_CHANGE_RATIO, RAW_PVALUE, ADJUSTED_PVALUE, R_VALUE, 
 RHO_VALUE, BIO_ASSAY_ANALYSIS_ID, ADJUSTED_P_VALUE_CODE, FEATURE_GROUP_NAME, BIO_EXPERIMENT_ID, 
 BIO_ASSAY_PLATFORM_ID, ETL_ID, PREFERRED_PVALUE, CUT_VALUE, RESULTS_VALUE, 
 NUMERIC_VALUE, NUMERIC_VALUE_CODE, TEA_NORMALIZED_PVALUE, BIO_EXPERIMENT_TYPE, BIO_ASSAY_FEATURE_GROUP_ID, 
 TEA_RANK)
AS 
SELECT "BIO_ASY_ANALYSIS_DATA_ID","FOLD_CHANGE_RATIO","RAW_PVALUE","ADJUSTED_PVALUE","R_VALUE","RHO_VALUE","BIO_ASSAY_ANALYSIS_ID","ADJUSTED_P_VALUE_CODE","FEATURE_GROUP_NAME","BIO_EXPERIMENT_ID","BIO_ASSAY_PLATFORM_ID","ETL_ID","PREFERRED_PVALUE","CUT_VALUE","RESULTS_VALUE","NUMERIC_VALUE","NUMERIC_VALUE_CODE","TEA_NORMALIZED_PVALUE","BIO_EXPERIMENT_TYPE","BIO_ASSAY_FEATURE_GROUP_ID","TEA_RANK"   
FROM bio_assay_analysis_data_tea
where tea_rank<=50;


--
-- BIO_MARKER_EXP_ANALYSIS_MV  (View) 
--
CREATE OR REPLACE FORCE VIEW BIO_MARKER_EXP_ANALYSIS_MV
(BIO_MARKER_ID, BIO_EXPERIMENT_ID, BIO_ASSAY_ANALYSIS_ID, MV_ID)
AS 
SELECT DISTINCT t3.bio_marker_id,
    t1.bio_experiment_id,
    t1.bio_assay_analysis_id,
    t1.bio_assay_analysis_id*100+t3.bio_marker_id
  FROM BIO_ASSAY_ANALYSIS_DATA t1,
    BIO_EXPERIMENT t2,
    BIO_MARKER t3,
    BIO_ASSAY_DATA_ANNOTATION t4
  WHERE t1.bio_experiment_id       = t2.bio_experiment_id
  AND t2.bio_experiment_type       ='Experiment'
  AND t3.bio_marker_id             =t4.bio_marker_id
  AND t1.bio_assay_feature_group_id=t4.bio_assay_feature_group_id;


--
-- VW_FACETED_SEARCH  (View) 
--
CREATE OR REPLACE FORCE VIEW VW_FACETED_SEARCH
(ANALYSIS_ID, STUDY, STUDY_ID, DISEASE, ANALYSES, 
 DATA_TYPE, PLATFORM, OBSERVATION, FACET_ID)
AS 
select ba.bio_assay_analysis_id as ANALYSIS_ID
,be.bio_experiment_id as STUDY
,be.bio_experiment_id as STUDY_ID
,bd.disease as DISEASE
,ba.analysis_type as ANALYSES
,ba.bio_assay_data_type as DATA_TYPE 
,bplat.platform_accession as PLATFORM
,bpobs.obs_name as OBSERVATION
,row_number() over (order by ba.bio_assay_analysis_id) as FACET_ID
from bio_assay_analysis ba
Join bio_experiment be 
	 on ba.etl_id = be.accession
Left outer join bio_data_disease bdd
	 on ba.bio_assay_analysis_id = bdd.bio_data_id
left outer join bio_disease bd
	 on bdd.bio_disease_id = bd.bio_disease_id
left outer join bio_data_platform bdplat
	 on ba.bio_assay_analysis_id = bdplat.bio_data_id
left outer join bio_assay_platform bplat
	 on bdplat.bio_assay_platform_id = bplat.bio_assay_platform_id
left outer join bio_data_observation bdpobs
	 on ba.bio_assay_analysis_id = bdpobs.bio_data_id
left outer join bio_observation bpobs
	 on bdpobs.bio_observation_id = bpobs.bio_observation_id
where ba.bio_assay_data_type in ('GWAS','Metabolic GWAS','EQTL');


--
-- VW_FACETED_SEARCH_HX  (View) 
--
CREATE OR REPLACE FORCE VIEW VW_FACETED_SEARCH_HX
(ANALYSIS_ID, STUDY, STUDY_ID, ANALYSES, DATA_TYPE, 
 PLATFORM, PLATFORM_DESCRIPTION, PLATFORM_VENDOR, PLATFORM_NAME, OBSERVATION, 
 STUDY_TITLE, STUDY_DESCRIPTION, STUDY_DESIGN, STUDY_PRIMARY_INV, STUDY_CONTACT_FIELD, 
 STUDY_OVERALL_DESIGN, STUDY_INSTITUTION, STUDY_ACCESSION, STUDY_COUNTRY, STUDY_BIOMARKER_TYPE, 
 STUDY_TARGET, STUDY_ACCESS_TYPE, ANALYSIS_NAME, ANALYSIS_DESCRIPTION_S, ANALYSIS_DESCRIPTION_L, 
 ANALYSIS_TYPE, ANALYSIS_ANALYST_NAME, ANALYSIS_METHOD, ANALYSIS_DATA_TYPE, ANALYSIS_QA_CRITERIA, 
 MODEL_NAME, MODEL_DESCRIPTION, RESEARCH_UNIT, FACET_ID)
AS 
SELECT ba.bio_assay_analysis_id AS ANALYSIS_ID ,
    be.bio_experiment_id          AS STUDY ,
    be.bio_experiment_id          AS STUDY_ID ,
    ba.analysis_type              AS ANALYSES ,
    ba.bio_assay_data_type        AS DATA_TYPE ,
    bplat.platform_accession      AS PLATFORM ,
    bplat.platform_description    AS PLATFORM_DESCRIPTION ,
    bplat.platform_vendor         AS PLATFORM_VENDOR ,
    baap.platform_name            AS PLATFORM_NAME ,
    'OBS:'
    || bpobs.obs_code                                     AS OBSERVATION ,
    be.title                                              AS STUDY_TITLE ,
    be.description                                        AS STUDY_DESCRIPTION ,
    be.design                                             AS STUDY_DESIGN ,
    be.primary_investigator                               AS STUDY_PRIMARY_INV ,
    be.contact_field                                      AS STUDY_CONTACT_FIELD ,
    be.overall_design                                     AS STUDY_OVERALL_DESIGN ,
    be.institution                                        AS STUDY_INSTITUTION ,
    be.accession                                          AS STUDY_ACCESSION ,
    be.country                                            AS STUDY_COUNTRY ,
    be.biomarker_type                                     AS STUDY_BIOMARKER_TYPE ,
    be.target                                             AS STUDY_TARGET ,
    be.access_type                                        AS STUDY_ACCESS_TYPE ,
    ba.analysis_name                                      AS ANALYSIS_NAME ,
    ba.short_description                                  AS ANALYSIS_DESCRIPTION_S ,
    ba.long_description                                   AS ANALYSIS_DESCRIPTION_L ,
    ba.analysis_type                                      AS ANALYSIS_TYPE ,
    ba.analyst_name                                       AS ANALYSIS_ANALYST_NAME ,
    ba.analysis_method_cd                                 AS ANALYSIS_METHOD ,
    ba.bio_assay_data_type                                AS ANALYSIS_DATA_TYPE ,
    ba.qa_criteria                                        AS ANALYSIS_QA_CRITERIA ,
    bae.model_name                                        AS MODEL_NAME ,
    bae.model_desc                                        AS MODEL_DESCRIPTION ,
    bae.research_unit                                     AS RESEARCH_UNIT ,
    row_number() over (order by ba.bio_assay_analysis_id) AS FACET_ID
  FROM bio_assay_analysis ba
  JOIN bio_experiment be
  ON ba.etl_id = be.accession
  LEFT OUTER JOIN bio_assay_analysis_ext bae
  ON bae.bio_assay_analysis_id = ba.bio_assay_analysis_id
  LEFT OUTER JOIN bio_data_platform bdplat
  ON ba.bio_assay_analysis_id = bdplat.bio_data_id
  LEFT OUTER JOIN bio_assay_platform bplat
  ON bdplat.bio_assay_platform_id = bplat.bio_assay_platform_id
  LEFT OUTER JOIN bio_data_observation bdpobs
  ON ba.bio_assay_analysis_id = bdpobs.bio_data_id
  LEFT OUTER JOIN bio_observation bpobs
  ON bdpobs.bio_observation_id = bpobs.bio_observation_id
  LEFT OUTER JOIN bio_asy_analysis_pltfm baap
  ON baap.bio_asy_analysis_pltfm_id   = ba.bio_asy_analysis_pltfm_id
  WHERE lower(be.bio_experiment_type) = 'experiment';


--
-- TRG_BIO_ASSAY_ANALYSIS_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASSAY_ANALYSIS_ID 
before insert on "BIO_ASSAY_ANALYSIS" for each row
begin     if inserting then       if :NEW."BIO_ASSAY_ANALYSIS_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASSAY_ANALYSIS_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_ASSAY_DATASET_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASSAY_DATASET_ID before insert on "BIO_ASSAY_DATASET"    for each row
begin     if inserting then       if :NEW."BIO_ASSAY_DATASET_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASSAY_DATASET_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_ASSAY_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASSAY_ID before insert on "BIO_ASSAY"    for each row
begin     if inserting then       if :NEW."BIO_ASSAY_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASSAY_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_CELL_LINE_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_CELL_LINE_ID before insert on "BIO_CELL_LINE"    for each row
begin     if inserting then       if :NEW."BIO_CELL_LINE_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CELL_LINE_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_CONTENT_REF_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_CONTENT_REF_ID before insert on "BIO_CONTENT_REFERENCE"    for each row
begin     if inserting then       if :NEW."BIO_CONTENT_REFERENCE_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CONTENT_REFERENCE_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_DATA_CORREL_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_DATA_CORREL_ID before insert on "BIO_DATA_CORRELATION"    for each row
begin     if inserting then       if :NEW."BIO_DATA_CORREL_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_DATA_CORREL_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_FILE_CONTENT_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_FILE_CONTENT_ID before insert on "BIO_CONTENT"    for each row
begin     if inserting then       if :NEW."BIO_FILE_CONTENT_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_FILE_CONTENT_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_LIT_ALT_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_ALT_DATA_ID 
before insert on "BIO_LIT_ALT_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_ALT_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_ALT_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- TRG_BIO_LIT_AMD_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_AMD_DATA_ID 
before insert on "BIO_LIT_AMD_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_AMD_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_AMD_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- TRG_BIO_LIT_INH_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_INH_DATA_ID 
before insert on "BIO_LIT_INH_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_INH_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_INH_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- TRG_BIO_LIT_INT_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_INT_DATA_ID 
before insert on "BIO_LIT_INT_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_INT_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_INT_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- TRG_BIO_LIT_PE_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_LIT_PE_DATA_ID 
before insert on "BIO_LIT_PE_DATA"
for each row
begin
     if inserting then
       if :NEW."BIO_LIT_PE_DATA_ID" is null then
          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_LIT_PE_DATA_ID" from dual;
       end if;
    end if; end;
/


--
-- BIO_CLINC_TRIAL_ATTR  (Table) 
--
CREATE TABLE BIO_CLINC_TRIAL_ATTR
(
  BIO_CLINC_TRIAL_ATTR_ID  NUMBER(18)           NOT NULL,
  PROPERTY_CODE            NVARCHAR2(200)       NOT NULL,
  PROPERTY_VALUE           NVARCHAR2(200),
  BIO_EXPERIMENT_ID        NUMBER(18)           NOT NULL,
  CONSTRAINT BIO_CLINICAL_TRIAL_PATIENT_GRP
  PRIMARY KEY
  (BIO_CLINC_TRIAL_ATTR_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_CLINICAL_TRIAL_PROPERTY_BI 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_CLINICAL_TRIAL (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_CLINC_TRIAL_PT_GROUP  (Table) 
--
CREATE TABLE BIO_CLINC_TRIAL_PT_GROUP
(
  BIO_EXPERIMENT_ID              NUMBER(18)     NOT NULL,
  BIO_CLINICAL_TRIAL_P_GROUP_ID  NUMBER(18)     NOT NULL,
  NAME                           NVARCHAR2(510),
  DESCRIPTION                    NVARCHAR2(1000),
  NUMBER_OF_PATIENTS             NUMBER(10),
  PATIENT_GROUP_TYPE_CODE        NVARCHAR2(200),
  CONSTRAINT BIO_CLINICAL_TRIAL_PT_GROUP
  PRIMARY KEY
  (BIO_CLINICAL_TRIAL_P_GROUP_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_CLINC_TRL_PT_GRP_EXP_FK 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_CLINICAL_TRIAL (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_CLINC_TRIAL_TIME_PT  (Table) 
--
CREATE TABLE BIO_CLINC_TRIAL_TIME_PT
(
  BIO_CLINC_TRIAL_TM_PT_ID  NUMBER(18)          NOT NULL,
  TIME_POINT                NVARCHAR2(200),
  TIME_POINT_CODE           NVARCHAR2(200),
  START_DATE                DATE,
  END_DATE                  DATE,
  BIO_EXPERIMENT_ID         NUMBER(18)          NOT NULL,
  CONSTRAINT BIO_CLINICAL_TRIAL_TIME_POINT_
  PRIMARY KEY
  (BIO_CLINC_TRIAL_TM_PT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_CLI_TRIAL_TIME_TRL_FK 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_CLINICAL_TRIAL (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_PATIENT  (Table) 
--
CREATE TABLE BIO_PATIENT
(
  BIO_PATIENT_ID                 NUMBER(18)     NOT NULL,
  FIRST_NAME                     NVARCHAR2(200),
  LAST_NAME                      NVARCHAR2(200),
  MIDDLE_NAME                    NVARCHAR2(200),
  BIRTH_DATE                     DATE,
  BIRTH_DATE_ORIG                NVARCHAR2(200),
  GENDER_CODE                    NVARCHAR2(200),
  RACE_CODE                      NVARCHAR2(200),
  ETHNIC_GROUP_CODE              NVARCHAR2(200),
  ADDRESS_ZIP_CODE               NVARCHAR2(200),
  COUNTRY_CODE                   NVARCHAR2(200),
  INFORMED_CONSENT_CODE          NVARCHAR2(200),
  BIO_EXPERIMENT_ID              NUMBER(18),
  BIO_CLINICAL_TRIAL_P_GROUP_ID  NUMBER(18),
  CONSTRAINT BIO_PATIENT_PK
  PRIMARY KEY
  (BIO_PATIENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_PATIENT_BIO_CLINICAL_TRIAL 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_CLINICAL_TRIAL (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_PATIENT_BIO_CLINIC_TRI_FK 
  FOREIGN KEY (BIO_CLINICAL_TRIAL_P_GROUP_ID) 
  REFERENCES BIO_CLINC_TRIAL_PT_GROUP (BIO_CLINICAL_TRIAL_P_GROUP_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_PATIENT_BIO_SUBJECT_FK 
  FOREIGN KEY (BIO_PATIENT_ID) 
  REFERENCES BIO_SUBJECT (BIO_SUBJECT_ID)
  ENABLE VALIDATE
);


--
-- BIO_PATIENT_EVENT  (Table) 
--
CREATE TABLE BIO_PATIENT_EVENT
(
  BIO_PATIENT_EVENT_ID           NUMBER(18)     NOT NULL,
  BIO_PATIENT_ID                 NUMBER(18)     NOT NULL,
  EVENT_CODE                     NVARCHAR2(200),
  EVENT_TYPE_CODE                NVARCHAR2(200),
  EVENT_DATE                     DATE,
  SITE                           NVARCHAR2(400),
  BIO_CLINIC_TRIAL_TIMEPOINT_ID  NUMBER(18)     NOT NULL,
  CONSTRAINT BIO_PATIENT_EVENT_PK
  PRIMARY KEY
  (BIO_PATIENT_EVENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_PT_EVENT_BIO_PT_FK 
  FOREIGN KEY (BIO_PATIENT_ID) 
  REFERENCES BIO_PATIENT (BIO_PATIENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_PT_EVENT_BIO_TRL_TP_FK 
  FOREIGN KEY (BIO_CLINIC_TRIAL_TIMEPOINT_ID) 
  REFERENCES BIO_CLINC_TRIAL_TIME_PT (BIO_CLINC_TRIAL_TM_PT_ID)
  ENABLE VALIDATE
);


--
-- BIO_PATIENT_EVENT_ATTR  (Table) 
--
CREATE TABLE BIO_PATIENT_EVENT_ATTR
(
  BIO_PATIENT_ATTR_CODE     NVARCHAR2(200)      NOT NULL,
  ATTRIBUTE_TEXT_VALUE      NVARCHAR2(200),
  ATTRIBUTE_NUMERIC_VALUE   NVARCHAR2(200),
  BIO_CLINIC_TRIAL_ATTR_ID  NUMBER(18)          NOT NULL,
  BIO_PATIENT_ATTRIBUTE_ID  NUMBER(18)          NOT NULL,
  BIO_PATIENT_EVENT_ID      NUMBER(18)          NOT NULL,
  CONSTRAINT BIO_PATIENT_ATTRIBUTE_PK
  PRIMARY KEY
  (BIO_PATIENT_ATTRIBUTE_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_PT_ATTR_TRL_ATTR_FK 
  FOREIGN KEY (BIO_CLINIC_TRIAL_ATTR_ID) 
  REFERENCES BIO_CLINC_TRIAL_ATTR (BIO_CLINC_TRIAL_ATTR_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_PT_EVENT_ATTR_EVT_FK 
  FOREIGN KEY (BIO_PATIENT_EVENT_ID) 
  REFERENCES BIO_PATIENT_EVENT (BIO_PATIENT_EVENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_SAMPLE  (Table) 
--
CREATE TABLE BIO_SAMPLE
(
  BIO_SAMPLE_ID         NUMBER(18)              NOT NULL,
  BIO_SAMPLE_TYPE       NVARCHAR2(200)          NOT NULL,
  CHARACTERISTICS       NVARCHAR2(1000),
  SOURCE_CODE           NVARCHAR2(200),
  EXPERIMENT_ID         NUMBER(18),
  BIO_SUBJECT_ID        NUMBER(18),
  SOURCE                NVARCHAR2(200),
  BIO_BANK_ID           NUMBER(18),
  BIO_PATIENT_EVENT_ID  NUMBER(18),
  BIO_CELL_LINE_ID      NUMBER(18),
  BIO_SAMPLE_NAME       NVARCHAR2(100),
  CONSTRAINT BIOSAMPLE_PK
  PRIMARY KEY
  (BIO_SAMPLE_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_SAMPLE_BIO_SUBJECT_FK 
  FOREIGN KEY (BIO_SUBJECT_ID) 
  REFERENCES BIO_SUBJECT (BIO_SUBJECT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_SAMPLE_CL_FK 
  FOREIGN KEY (BIO_CELL_LINE_ID) 
  REFERENCES BIO_CELL_LINE (BIO_CELL_LINE_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_SAMPLE_PT_EVT_FK 
  FOREIGN KEY (BIO_PATIENT_EVENT_ID) 
  REFERENCES BIO_PATIENT_EVENT (BIO_PATIENT_EVENT_ID)
  ENABLE VALIDATE
);


--
-- TRG_BIO_CLIN_TRL_PT_GRP_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_CLIN_TRL_PT_GRP_ID before insert on "BIO_CLINC_TRIAL_PT_GROUP"    for each row
begin     if inserting then       if :NEW."BIO_CLINICAL_TRIAL_P_GROUP_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CLINICAL_TRIAL_P_GROUP_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_CLN_TRL_ATTR_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_CLN_TRL_ATTR_ID before insert on "BIO_CLINC_TRIAL_ATTR"    for each row
begin     if inserting then       if :NEW."BIO_CLINC_TRIAL_ATTR_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CLINC_TRIAL_ATTR_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_CL_TRL_TIME_PT_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_CL_TRL_TIME_PT_ID before insert on "BIO_CLINC_TRIAL_TIME_PT"    for each row
begin     if inserting then       if :NEW."BIO_CLINC_TRIAL_TM_PT_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_CLINC_TRIAL_TM_PT_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_PATIENT_EVENT_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_PATIENT_EVENT_ID before insert on "BIO_PATIENT_EVENT"    for each row
begin     if inserting then       if :NEW."BIO_PATIENT_EVENT_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_PATIENT_EVENT_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_PATIENT_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_PATIENT_ID before insert on "BIO_PATIENT"    for each row
begin     if inserting then       if :NEW."BIO_PATIENT_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_PATIENT_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_PT_EVT_ATTR_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_PT_EVT_ATTR_ID 
before insert on BIO_PATIENT_EVENT_ATTR
    for each row
begin
  if inserting then
	 if :NEW.BIO_CLINIC_TRIAL_ATTR_ID is null then
	   select SEQ_BIO_DATA_ID.nextval into :NEW.BIO_CLINIC_TRIAL_ATTR_ID from dual;
	 end if;
  end if;
end;
/


--
-- TRG_BIO_SAMPLE_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_SAMPLE_ID before insert on "BIO_SAMPLE"    for each row
begin     if inserting then       if :NEW."BIO_SAMPLE_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_SAMPLE_ID" from dual;       end if;    end if; end;
/


--
-- BIO_ASSAY_DATA  (Table) 
--
CREATE TABLE BIO_ASSAY_DATA
(
  BIO_SAMPLE_ID         NUMBER(18),
  BIO_ASSAY_DATA_ID     NUMBER(18)              NOT NULL,
  LOG2_VALUE            NUMBER(18,5),
  LOG10_VALUE           NUMBER(18,5),
  NUMERIC_VALUE         NUMBER(18),
  TEXT_VALUE            VARCHAR2(200),
  FLOAT_VALUE           NUMBER(18,5),
  FEATURE_GROUP_NAME    VARCHAR2(100)      NOT NULL,
  BIO_EXPERIMENT_ID     NUMBER(18),
  BIO_ASSAY_DATASET_ID  NUMBER(18),
  BIO_ASSAY_ID          NUMBER(18),
  ETL_ID                NUMBER,
  CONSTRAINT BIO_EXPERIMENT_DATA_FACT_PK
  PRIMARY KEY
  (BIO_ASSAY_DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_DT_DS_FK 
  FOREIGN KEY (BIO_ASSAY_DATASET_ID) 
  REFERENCES BIO_ASSAY_DATASET (BIO_ASSAY_DATASET_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_EXP_FK 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_EXPERIMENT (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_EXP_DATA_FACT_SAMP_FK 
  FOREIGN KEY (BIO_SAMPLE_ID) 
  REFERENCES BIO_SAMPLE (BIO_SAMPLE_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_DATA_STATS  (Table) 
--
CREATE TABLE BIO_ASSAY_DATA_STATS
(
  BIO_ASSAY_DATA_STATS_ID     NUMBER(18),
  BIO_SAMPLE_COUNT            NUMBER(18),
  QUARTILE_1                  NUMBER(18,5),
  QUARTILE_2                  NUMBER(18,5),
  QUARTILE_3                  NUMBER(18,5),
  MAX_VALUE                   NUMBER(18,5),
  MIN_VALUE                   NUMBER(18,5),
  BIO_SAMPLE_ID               NUMBER(18),
  FEATURE_GROUP_NAME          NVARCHAR2(120),
  VALUE_NORMALIZE_METHOD      NVARCHAR2(50),
  BIO_EXPERIMENT_ID           NUMBER(18),
  MEAN_VALUE                  NUMBER(18,5),
  STD_DEV_VALUE               NUMBER(18,5),
  BIO_ASSAY_DATASET_ID        NUMBER(18),
  BIO_ASSAY_FEATURE_GROUP_ID  NUMBER(18)        NOT NULL,
  CONSTRAINT BIO_ASY_DT_STATS_S_PK
  PRIMARY KEY
  (BIO_ASSAY_DATA_STATS_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_DT_FG_FK 
  FOREIGN KEY (BIO_ASSAY_FEATURE_GROUP_ID) 
  REFERENCES BIO_ASSAY_FEATURE_GROUP (BIO_ASSAY_FEATURE_GROUP_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_DT_STATS_DS_S_FK 
  FOREIGN KEY (BIO_ASSAY_DATASET_ID) 
  REFERENCES BIO_ASSAY_DATASET (BIO_ASSAY_DATASET_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_DT_STATS_SMP_S_FK 
  FOREIGN KEY (BIO_SAMPLE_ID) 
  REFERENCES BIO_SAMPLE (BIO_SAMPLE_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_DT_STAT_EXP_S_FK 
  FOREIGN KEY (BIO_EXPERIMENT_ID) 
  REFERENCES BIO_EXPERIMENT (BIO_EXPERIMENT_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASSAY_SAMPLE  (Table) 
--
CREATE TABLE BIO_ASSAY_SAMPLE
(
  BIO_ASSAY_ID                   NUMBER(18)     NOT NULL,
  BIO_SAMPLE_ID                  NUMBER(18)     NOT NULL,
  BIO_CLINIC_TRIAL_TIMEPOINT_ID  NUMBER(18)     NOT NULL,
  CONSTRAINT BIO_ASSAY_SAMPLE_PK
  PRIMARY KEY
  (BIO_ASSAY_ID, BIO_SAMPLE_ID, BIO_CLINIC_TRIAL_TIMEPOINT_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_SAMPLE_BIO_ASSAY_FK 
  FOREIGN KEY (BIO_ASSAY_ID) 
  REFERENCES BIO_ASSAY (BIO_ASSAY_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASSAY_SAMPLE_BIO_SAMPLE_FK 
  FOREIGN KEY (BIO_SAMPLE_ID) 
  REFERENCES BIO_SAMPLE (BIO_SAMPLE_ID)
  ENABLE VALIDATE
);


--
-- BIO_ASY_DATA_STATS_ALL  (Table) 
--
CREATE TABLE BIO_ASY_DATA_STATS_ALL
(
  BIO_ASSAY_DATA_STATS_ID  NUMBER(18),
  BIO_SAMPLE_COUNT         NUMBER(18),
  QUARTILE_1               NUMBER(18,5),
  QUARTILE_2               NUMBER(18,5),
  QUARTILE_3               NUMBER(18,5),
  MAX_VALUE                NUMBER(18,5),
  MIN_VALUE                NUMBER(18,5),
  BIO_SAMPLE_ID            NUMBER(18),
  FEATURE_GROUP_NAME       NVARCHAR2(120),
  VALUE_NORMALIZE_METHOD   NVARCHAR2(50),
  BIO_EXPERIMENT_ID        NUMBER(18),
  MEAN_VALUE               NUMBER(18,5),
  STD_DEV_VALUE            NUMBER(18,5),
  BIO_ASSAY_DATASET_ID     NUMBER(18),
  CONSTRAINT BIO_ASY_DT_STATS_PK
  PRIMARY KEY
  (BIO_ASSAY_DATA_STATS_ID)
  ENABLE VALIDATE,
  CONSTRAINT BIO_ASY_DT_STATS_SMP_FK 
  FOREIGN KEY (BIO_SAMPLE_ID) 
  REFERENCES BIO_SAMPLE (BIO_SAMPLE_ID)
  ENABLE VALIDATE
);


--
-- BIO_A_D_S_DS__S_IDX  (Index) 
--
CREATE INDEX BIO_A_D_S_DS__S_IDX ON BIO_ASSAY_DATA_STATS
(BIO_ASSAY_DATASET_ID)
COMPRESS 1;


--
-- BIO_A_D_S_EXP__S_IDX  (Index) 
--
CREATE INDEX BIO_A_D_S_EXP__S_IDX ON BIO_ASSAY_DATA_STATS
(BIO_EXPERIMENT_ID)
COMPRESS 1;


--
-- BIO_A_D_S_FGI_S_IDX  (Index) 
--
CREATE INDEX BIO_A_D_S_FGI_S_IDX ON BIO_ASSAY_DATA_STATS
(BIO_ASSAY_FEATURE_GROUP_ID, BIO_ASSAY_DATA_STATS_ID)
COMPRESS 1;


--
-- BIO_A_D_S_F_G_S_IDX  (Index) 
--
CREATE INDEX BIO_A_D_S_F_G_S_IDX ON BIO_ASSAY_DATA_STATS
(FEATURE_GROUP_NAME, BIO_ASSAY_DATA_STATS_ID)
COMPRESS 1;


--
-- BIO_A__D_S_DS_IDX  (Index) 
--
CREATE INDEX BIO_A__D_S_DS_IDX ON BIO_ASY_DATA_STATS_ALL
(BIO_ASSAY_DATASET_ID);


--
-- BIO_A__D_S_EXP_IDX  (Index) 
--
CREATE INDEX BIO_A__D_S_EXP_IDX ON BIO_ASY_DATA_STATS_ALL
(BIO_EXPERIMENT_ID);


--
-- BIO_A__D_S_F_G_IDX  (Index) 
--
CREATE INDEX BIO_A__D_S_F_G_IDX ON BIO_ASY_DATA_STATS_ALL
(FEATURE_GROUP_NAME);


--
-- TRG_BIO_ASSAY_DATA_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASSAY_DATA_ID before insert on "BIO_ASSAY_DATA"    for each row
begin     if inserting then       if :NEW."BIO_ASSAY_DATA_ID" is null then          select SEQ_BIO_DATA_ID.nextval into :NEW."BIO_ASSAY_DATA_ID" from dual;       end if;    end if; end;
/


--
-- TRG_BIO_ASY_DT_STATS_ID  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRG_BIO_ASY_DT_STATS_ID before insert on "BIO_ASY_DATA_STATS_ALL"    for each row
begin     if inserting then       if :NEW."BIO_ASSAY_DATA_STATS_ID" is null then          select SEQ_BIO_DATA_FACT_ID.nextval into :NEW."BIO_ASSAY_DATA_STATS_ID" from dual;       end if;    end if; end;
/


--
-- BIO_LIT_INT_MODEL_MV  (Materialized View) 
--
CREATE MATERIALIZED VIEW BIO_LIT_INT_MODEL_MV
BUILD IMMEDIATE
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
select distinct
  bio_lit_int_data_id, experimental_model
from (
  select
    a.bio_lit_int_data_id,
    b.experimental_model
  from
    biomart.bio_lit_int_data a
    inner join biomart.bio_lit_model_data b on a.in_vivo_model_id = b.bio_lit_model_data_id
  where
    b.experimental_model is not null
  UNION
  select
    a.bio_lit_int_data_id,
    b.experimental_model
  from
    biomart.bio_lit_int_data a
    inner join biomart.bio_lit_model_data b on a.in_vitro_model_id = b.bio_lit_model_data_id
  where
    b.experimental_model is not null
)

;


COMMENT ON MATERIALIZED VIEW BIO_LIT_INT_MODEL_MV IS 'snapshot table for snapshot BIOMART.BIO_LIT_INT_MODEL_MV';

--
-- BIO_MARKER_CORREL_MV  (Materialized View) 
--
CREATE MATERIALIZED VIEW BIO_MARKER_CORREL_MV
BUILD IMMEDIATE
REFRESH FORCE ON DEMAND
WITH PRIMARY KEY
AS 
SELECT DISTINCT b.bio_marker_id AS bio_marker_id,
    b.bio_marker_id               AS asso_bio_marker_id,
    'GENE'                        AS correl_type,
    1                             AS mv_id
  FROM biomart.bio_marker b
  WHERE b.bio_marker_type = 'GENE'
  UNION
  SELECT DISTINCT c.bio_data_id AS bio_marker_id,
    c.asso_bio_data_id          AS asso_bio_marker_id,
    'PATHWAY_GENE'              AS correl_type,
    2                           AS mv_id
  FROM biomart.bio_marker b,
    biomart.bio_data_correlation c,
    biomart.bio_data_correl_descr d
  WHERE b.bio_marker_id          = c.bio_data_id
  AND c.bio_data_correl_descr_id = d.bio_data_correl_descr_id
  AND b.primary_source_code     != 'ARIADNE'
  AND d.correlation              = 'PATHWAY GENE'
  UNION
  SELECT DISTINCT c.bio_data_id AS bio_marker_id,
    c.asso_bio_data_id          AS asso_bio_marker_id,
    'HOMOLOGENE_GENE'           AS correl_type,
    3                           AS mv_id
  FROM biomart.bio_marker b,
    biomart.bio_data_correlation c,
    biomart.bio_data_correl_descr d
  WHERE b.bio_marker_id          = c.bio_data_id
  AND c.bio_data_correl_descr_id = d.bio_data_correl_descr_id
  AND d.correlation              = 'HOMOLOGENE GENE'
;


COMMENT ON MATERIALIZED VIEW BIO_MARKER_CORREL_MV IS 'snapshot table for snapshot BIOMART.BIO_MARKER_CORREL_MV';

--
-- "bio_marker_c_Mv_idx1"  (Index) 
--
CREATE INDEX "bio_marker_c_Mv_idx1" ON BIO_MARKER_CORREL_MV
(BIO_MARKER_ID, ASSO_BIO_MARKER_ID);

--
-- "bio_marker_c_Mv_idx2"  (Index) 
--
CREATE INDEX "bio_marker_c_Mv_idx2" ON BIO_MARKER_CORREL_MV
(ASSO_BIO_MARKER_ID, BIO_MARKER_ID);

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_AD_HOC_PROPERTY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ANALYSIS_ATTRIBUTE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ANALYSIS_ATTRIBUTE_LINEAGE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_EQTL TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_EXT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_GWAS TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATA_ANNOTATION TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_FEATURE_GROUP TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_PLATFORM TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_DATA_EXT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_DATA_IDX TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_EQTL_TOP50 TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_GWAS_TOP50 TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_PLTFM TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CGDCP_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINICAL_TRIAL_DESIGN TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_COMPOUND TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONCEPT_CODE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONTENT_REPOSITORY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CURATION_DATASET TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_ATTRIBUTE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_COMPOUND TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_CORREL_DESCR TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_EXT_CODE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_LITERATURE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_OBSERVATION TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_OMIC_MARKER TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_PLATFORM TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_UID TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DISEASE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_EXPERIMENT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_INT_MODEL_MV TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_MODEL_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_REF_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_SUM_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_MARKER TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_MARKER_CORREL_MV TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_OBSERVATION TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_SPECIES_ORGANISM TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_STATS_EXP_MARKER TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_SUBJECT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_TAXONOMY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_CLIN_INHIB_EFFECT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_DISEASE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_INHIB_DETAILS TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_STUDY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_TRIAL_DETAILS TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_ALLOWED_MEDS_TREATMENT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_BIOMARKER TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_DISEASE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_DRUG_INHIB TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_FULL TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_INCLUSION_CRITERIA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_PRIMARY_ENDPTS TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_SEC_ENDPTS TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_STUDY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON MESH TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON MESH_ENTRY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON REPORT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON REPORT_ITEM TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_AD_HOC_PROPERTY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ANALYSIS_ATTRIBUTE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ANALYSIS_ATTRIBUTE_LINEAGE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_EQTL TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_EXT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_GWAS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATA_ANNOTATION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_FEATURE_GROUP TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_PLATFORM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_DATA_EXT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_DATA_IDX TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_EQTL_TOP50 TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_GWAS_TOP50 TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_PLTFM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CGDCP_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINICAL_TRIAL_DESIGN TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_COMPOUND TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONCEPT_CODE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONTENT_REPOSITORY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CURATION_DATASET TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_ATTRIBUTE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_COMPOUND TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_CORREL_DESCR TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_EXT_CODE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_LITERATURE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_OBSERVATION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_OMIC_MARKER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_PLATFORM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_UID TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DISEASE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_EXPERIMENT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_INT_MODEL_MV TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_MODEL_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_REF_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_SUM_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_MARKER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_MARKER_CORREL_MV TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_OBSERVATION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_SPECIES_ORGANISM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_STATS_EXP_MARKER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_SUBJECT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_TAXONOMY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_CLIN_INHIB_EFFECT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_DISEASE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_INHIB_DETAILS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_STUDY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD2_TRIAL_DETAILS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_ALLOWED_MEDS_TREATMENT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_BIOMARKER TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_DISEASE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_DRUG_INHIB TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_FULL TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_INCLUSION_CRITERIA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_PRIMARY_ENDPTS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_SEC_ENDPTS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON CTD_STUDY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON MESH TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON MESH_ENTRY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON REPORT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON REPORT_ITEM TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_DATA_TEA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATASET TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_DATASET TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CELL_LINE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINICAL_TRIAL TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONTENT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONTENT_REFERENCE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CURATED_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_CORRELATION TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_DISEASE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_TAXONOMY TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_ALT_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_AMD_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_INH_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_INT_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_PE_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_ANALYSIS_DATA_TEA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATASET TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_ANALYSIS_DATASET TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CELL_LINE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINICAL_TRIAL TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONTENT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CONTENT_REFERENCE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CURATED_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_CORRELATION TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_DISEASE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_DATA_TAXONOMY TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_ALT_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_AMD_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_INH_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_INT_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_LIT_PE_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINC_TRIAL_ATTR TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINC_TRIAL_PT_GROUP TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINC_TRIAL_TIME_PT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_PATIENT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_PATIENT_EVENT TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_PATIENT_EVENT_ATTR TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_SAMPLE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINC_TRIAL_ATTR TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINC_TRIAL_PT_GROUP TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_CLINC_TRIAL_TIME_PT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_PATIENT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_PATIENT_EVENT TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_PATIENT_EVENT_ATTR TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_SAMPLE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATA TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATA_STATS TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_SAMPLE TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_DATA_STATS_ALL TO SEARCHAPP;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATA TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_DATA_STATS TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASSAY_SAMPLE TO TM_CZ;

GRANT DELETE, INSERT, SELECT, UPDATE ON BIO_ASY_DATA_STATS_ALL TO TM_CZ;