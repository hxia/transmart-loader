--
-- Create Schema Script 
--   Database Version          : 11.2.0.1.0 
--   Database Compatible Level : 11.2.0.0.0 
--   Script Compatible Level   : 11.2.0.0.0 
--   Toad Version              : 12.1.0.22 
--   DB Connect String         : 10.118.255.5:1521/ORCL5 
--   Schema                    : I2B2PM 
--   Script Created by         : BIOMART_USER 
--   Script Created at         : 7/17/2015 3:48:46 PM 
--   Physical Location         :  
--   Notes                     :  
--

-- Object Counts: 
--   Indexes: 15        Columns: 22         
--   Sequences: 1 
--   Tables: 16         Columns: 149        Constraints: 47     
--   Triggers: 7 


--
-- PM_APPROVALS  (Table) 
--
CREATE TABLE PM_APPROVALS
(
  APPROVAL_ID               VARCHAR2(50 BYTE)   NOT NULL,
  APPROVAL_NAME             VARCHAR2(255 BYTE),
  APPROVAL_DESCRIPTION      VARCHAR2(2000 BYTE),
  APPROVAL_ACTIVATION_DATE  DATE,
  APPROVAL_EXPIRATION_DATE  DATE,
  OBJECT_CD                 VARCHAR2(50 BYTE),
  CHANGE_DATE               DATE,
  ENTRY_DATE                DATE,
  CHANGEBY_CHAR             VARCHAR2(50 BYTE),
  STATUS_CD                 VARCHAR2(50 BYTE)
);


--
-- PM_APPROVALS_PARAMS  (Table) 
--
CREATE TABLE PM_APPROVALS_PARAMS
(
  ID               NUMBER,
  APPROVAL_ID      VARCHAR2(50 BYTE)            NOT NULL,
  PARAM_NAME_CD    VARCHAR2(50 BYTE)            NOT NULL,
  VALUE            CLOB,
  ACTIVATION_DATE  DATE,
  EXPIRATION_DATE  DATE,
  DATATYPE_CD      VARCHAR2(50 BYTE),
  OBJECT_CD        VARCHAR2(50 BYTE),
  CHANGE_DATE      DATE,
  ENTRY_DATE       DATE,
  CHANGEBY_CHAR    VARCHAR2(50 BYTE),
  STATUS_CD        VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_CELL_DATA  (Table) 
--
CREATE TABLE PM_CELL_DATA
(
  CELL_ID        VARCHAR2(50 BYTE)              NOT NULL,
  PROJECT_PATH   VARCHAR2(255 BYTE)             NOT NULL,
  NAME           VARCHAR2(255 BYTE),
  METHOD_CD      VARCHAR2(255 BYTE),
  URL            VARCHAR2(255 BYTE),
  CAN_OVERRIDE   NUMBER(1),
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (CELL_ID, PROJECT_PATH)
  ENABLE VALIDATE
);


--
-- PM_CELL_PARAMS  (Table) 
--
CREATE TABLE PM_CELL_PARAMS
(
  ID             NUMBER,
  DATATYPE_CD    VARCHAR2(50 BYTE),
  CELL_ID        VARCHAR2(50 BYTE)              NOT NULL,
  PROJECT_PATH   VARCHAR2(255 BYTE)             NOT NULL,
  PARAM_NAME_CD  VARCHAR2(50 BYTE)              NOT NULL,
  VALUE          CLOB,
  CAN_OVERRIDE   NUMBER(1),
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_GLOBAL_PARAMS  (Table) 
--
CREATE TABLE PM_GLOBAL_PARAMS
(
  ID             NUMBER,
  DATATYPE_CD    VARCHAR2(50 BYTE),
  PARAM_NAME_CD  VARCHAR2(50 BYTE)              NOT NULL,
  PROJECT_PATH   VARCHAR2(255 BYTE)             NOT NULL,
  VALUE          CLOB,
  CAN_OVERRIDE   NUMBER(1),
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_HIVE_DATA  (Table) 
--
CREATE TABLE PM_HIVE_DATA
(
  DOMAIN_ID       VARCHAR2(50 BYTE)             NOT NULL,
  HELPURL         VARCHAR2(255 BYTE),
  DOMAIN_NAME     VARCHAR2(255 BYTE),
  ENVIRONMENT_CD  VARCHAR2(255 BYTE),
  ACTIVE          NUMBER(1),
  CHANGE_DATE     DATE,
  ENTRY_DATE      DATE,
  CHANGEBY_CHAR   VARCHAR2(50 BYTE),
  STATUS_CD       VARCHAR2(50 BYTE),
  PRIMARY KEY
  (DOMAIN_ID)
  ENABLE VALIDATE
);


--
-- PM_HIVE_PARAMS  (Table) 
--
CREATE TABLE PM_HIVE_PARAMS
(
  ID             NUMBER,
  DATATYPE_CD    VARCHAR2(50 BYTE),
  DOMAIN_ID      VARCHAR2(50 BYTE)              NOT NULL,
  PARAM_NAME_CD  VARCHAR2(50 BYTE)              NOT NULL,
  VALUE          CLOB,
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_PROJECT_DATA  (Table) 
--
CREATE TABLE PM_PROJECT_DATA
(
  PROJECT_ID           VARCHAR2(50 BYTE)        NOT NULL,
  PROJECT_NAME         VARCHAR2(255 BYTE),
  PROJECT_WIKI         VARCHAR2(255 BYTE),
  PROJECT_KEY          VARCHAR2(255 BYTE),
  PROJECT_PATH         VARCHAR2(255 BYTE),
  PROJECT_DESCRIPTION  VARCHAR2(2000 BYTE),
  CHANGE_DATE          DATE,
  ENTRY_DATE           DATE,
  CHANGEBY_CHAR        VARCHAR2(50 BYTE),
  STATUS_CD            VARCHAR2(50 BYTE),
  PRIMARY KEY
  (PROJECT_ID)
  ENABLE VALIDATE
);


--
-- PM_PROJECT_PARAMS  (Table) 
--
CREATE TABLE PM_PROJECT_PARAMS
(
  ID             NUMBER,
  DATATYPE_CD    VARCHAR2(50 BYTE),
  PROJECT_ID     VARCHAR2(50 BYTE)              NOT NULL,
  PARAM_NAME_CD  VARCHAR2(50 BYTE)              NOT NULL,
  VALUE          CLOB,
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_PROJECT_REQUEST  (Table) 
--
CREATE TABLE PM_PROJECT_REQUEST
(
  ID             NUMBER,
  TITLE          VARCHAR2(255 BYTE),
  REQUEST_XML    CLOB                           NOT NULL,
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PROJECT_ID     VARCHAR2(50 BYTE),
  SUBMIT_CHAR    VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_PROJECT_USER_PARAMS  (Table) 
--
CREATE TABLE PM_PROJECT_USER_PARAMS
(
  ID             NUMBER,
  DATATYPE_CD    VARCHAR2(50 BYTE),
  PROJECT_ID     VARCHAR2(50 BYTE)              NOT NULL,
  USER_ID        VARCHAR2(50 BYTE)              NOT NULL,
  PARAM_NAME_CD  VARCHAR2(50 BYTE)              NOT NULL,
  VALUE          CLOB,
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_PROJECT_USER_ROLES  (Table) 
--
CREATE TABLE PM_PROJECT_USER_ROLES
(
  PROJECT_ID     VARCHAR2(50 BYTE)              NOT NULL,
  USER_ID        VARCHAR2(50 BYTE)              NOT NULL,
  USER_ROLE_CD   VARCHAR2(255 BYTE)             NOT NULL,
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (PROJECT_ID, USER_ID, USER_ROLE_CD)
  ENABLE VALIDATE
);


--
-- PM_ROLE_REQUIREMENT  (Table) 
--
CREATE TABLE PM_ROLE_REQUIREMENT
(
  TABLE_CD           VARCHAR2(50 BYTE)          NOT NULL,
  COLUMN_CD          VARCHAR2(50 BYTE)          NOT NULL,
  READ_HIVEMGMT_CD   VARCHAR2(50 BYTE)          NOT NULL,
  WRITE_HIVEMGMT_CD  VARCHAR2(50 BYTE)          NOT NULL,
  NAME_CHAR          VARCHAR2(2000 BYTE),
  CHANGE_DATE        DATE,
  ENTRY_DATE         DATE,
  CHANGEBY_CHAR      VARCHAR2(50 BYTE),
  STATUS_CD          VARCHAR2(50 BYTE),
  PRIMARY KEY
  (TABLE_CD, COLUMN_CD, READ_HIVEMGMT_CD, WRITE_HIVEMGMT_CD)
  ENABLE VALIDATE
);


--
-- PM_USER_DATA  (Table) 
--
CREATE TABLE PM_USER_DATA
(
  USER_ID        VARCHAR2(50 BYTE)              NOT NULL,
  FULL_NAME      VARCHAR2(255 BYTE),
  PASSWORD       VARCHAR2(255 BYTE),
  EMAIL          VARCHAR2(255 BYTE),
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (USER_ID)
  ENABLE VALIDATE
);


--
-- PM_USER_PARAMS  (Table) 
--
CREATE TABLE PM_USER_PARAMS
(
  ID             NUMBER,
  DATATYPE_CD    VARCHAR2(50 BYTE),
  USER_ID        VARCHAR2(50 BYTE)              NOT NULL,
  PARAM_NAME_CD  VARCHAR2(50 BYTE)              NOT NULL,
  VALUE          CLOB,
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (ID)
  ENABLE VALIDATE
);


--
-- PM_USER_SESSION  (Table) 
--
CREATE TABLE PM_USER_SESSION
(
  USER_ID        VARCHAR2(50 BYTE)              NOT NULL,
  SESSION_ID     VARCHAR2(50 BYTE)              NOT NULL,
  EXPIRED_DATE   DATE,
  CHANGE_DATE    DATE,
  ENTRY_DATE     DATE,
  CHANGEBY_CHAR  VARCHAR2(50 BYTE),
  STATUS_CD      VARCHAR2(50 BYTE),
  PRIMARY KEY
  (SESSION_ID, USER_ID)
  ENABLE VALIDATE
);


--
-- PM_PARAMS  (Sequence) 
--
CREATE SEQUENCE PM_PARAMS
  START WITH 431
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


















--
-- PM_CELL_PARAMS_INC  (Trigger) 
--
CREATE OR REPLACE TRIGGER PM_CELL_PARAMS_INC 
	BEFORE INSERT
	ON PM_CELL_PARAMS
	FOR EACH ROW
BEGIN
	SELECT PM_PARAMS.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/


--
-- PM_GLOBAL_PARAMS_INC  (Trigger) 
--
CREATE OR REPLACE TRIGGER PM_GLOBAL_PARAMS_INC 
	BEFORE INSERT
	ON PM_GLOBAL_PARAMS
	REFERENCING NEW AS NEW
	FOR EACH ROW
BEGIN
	SELECT PM_PARAMS.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/


--
-- PM_HIVE_PARAMS_INC  (Trigger) 
--
CREATE OR REPLACE TRIGGER PM_HIVE_PARAMS_INC 
	BEFORE INSERT
	ON PM_HIVE_PARAMS
	FOR EACH ROW
BEGIN
	SELECT PM_PARAMS.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/


--
-- PM_PROJECT_PARAMS_INC  (Trigger) 
--
CREATE OR REPLACE TRIGGER PM_PROJECT_PARAMS_INC 
	BEFORE INSERT
	ON PM_PROJECT_PARAMS
	FOR EACH ROW
BEGIN
	SELECT PM_PARAMS.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/


--
-- PM_PROJECT_REQUEST_INC  (Trigger) 
--
CREATE OR REPLACE TRIGGER PM_PROJECT_REQUEST_INC 
	BEFORE INSERT
	ON PM_PROJECT_REQUEST
	FOR EACH ROW
BEGIN
	SELECT PM_PARAMS.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/


--
-- PM_PROJECT_USER_PARAMS_INC  (Trigger) 
--
CREATE OR REPLACE TRIGGER PM_PROJECT_USER_PARAMS_INC 
	BEFORE INSERT
	ON PM_PROJECT_USER_PARAMS
	FOR EACH ROW
BEGIN
	SELECT PM_PARAMS.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/


--
-- PM_USER_PARAMS_INC  (Trigger) 
--
CREATE OR REPLACE TRIGGER PM_USER_PARAMS_INC 
	BEFORE INSERT
	ON PM_USER_PARAMS
	FOR EACH ROW
BEGIN
	SELECT PM_PARAMS.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/